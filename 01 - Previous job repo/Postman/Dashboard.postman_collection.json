{
	"info": {
		"_postman_id": "f6fe7dc2-9c75-43f5-8614-e4a0fdc68f8b",
		"name": "Dashboard",
		"description": "В {{AccountId}} нужно выбрать акк, в котором у вас нет виджетов на дашборде, выключена ГА.\n\nПроверка дефолтных виджетов и последовательности отображения на странице.\n\nПеремещение виджетов на Дашборде и проверка позиций. Создание не дефолтных виджетов.\n\nРедактирование всех виджетов (бренд, домен) и сброс всех виджетов до дефолта.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29429126",
		"_collection_link": "https://priceshape-qa-team.postman.co/workspace/Priceshape-QA-team~d7aa963c-2715-492c-a94f-33bcfc083d8c/collection/17508544-f6fe7dc2-9c75-43f5-8614-e4a0fdc68f8b?action=share&source=collection_link&creator=29429126"
	},
	"item": [
		{
			"name": "Generate default widgets",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2524 Generate dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response message is 'Default widgets created successfully'\", function () {\r",
									"    pm.expect(jsonData.message).to.equal(\"Default widgets created successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-dashboard-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-dashboard-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'welcome', position: 0 },\r",
									"    { widgetType: 'price_position', position: 1 },\r",
									"    { widgetType: 'selected_domains', position: 2 },\r",
									"    { widgetType: 'gross_margin', position: 3 },\r",
									"    { widgetType: 'price_history_chart', position: 4 },\r",
									"    { widgetType: 'competitor_activity', position: 5 },\r",
									"    { widgetType: 'new_prices', position: 6 },\r",
									"    { widgetType: 'stock_status', position: 7 },\r",
									"    { widgetType: 'inventory_value', position: 8 },\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(`${widgetData.widgetType} widget has correct position`, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);\r",
									"var dWidgetIdPosition = 7;\r",
									"if (pm.response.code === 200) {\r",
									"    var dWidgetID = jsonData[dWidgetIdPosition].id;\r",
									"    pm.collectionVariables.set(\"stock_statusID\", dWidgetID);\r",
									"    postman.setNextRequest(\"PRSP-2748 Delete Stock status widget\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2748 Delete Stock status widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {\r",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{stock_statusID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{stock_statusID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'welcome', position: 0 },\r",
									"    { widgetType: 'price_position', position: 1 },\r",
									"    { widgetType: 'selected_domains', position: 2 },\r",
									"    { widgetType: 'gross_margin', position: 3 },\r",
									"    { widgetType: 'price_history_chart', position: 4 },\r",
									"    { widgetType: 'competitor_activity', position: 5 },\r",
									"    { widgetType: 'new_prices', position: 6 },\r",
									"    { widgetType: 'inventory_value', position: 8 },\r",
									"];\r",
									"function createWidgetTest(widgetData, jsonData) {\r",
									"    if (widgetData.position < jsonData.length) {\r",
									"        pm.test(`${widgetData.widgetType} widget has correct position`, function () {\r",
									"            pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"            pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"widgetsData.forEach(function (widgetData) {\r",
									"    createWidgetTest(widgetData, jsonData);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2524 Generate dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response message is 'Default widgets created successfully'\", function () {\r",
									"    pm.expect(jsonData.message).to.equal(\"Default widgets created successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-dashboard-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-dashboard-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'welcome', position: 0 },\r",
									"    { widgetType: 'price_position', position: 1 },\r",
									"    { widgetType: 'selected_domains', position: 2 },\r",
									"    { widgetType: 'gross_margin', position: 3 },\r",
									"    { widgetType: 'price_history_chart', position: 4 },\r",
									"    { widgetType: 'competitor_activity', position: 5 },\r",
									"    { widgetType: 'new_prices', position: 6 },\r",
									"    { widgetType: 'stock_status', position: 7 },\r",
									"    { widgetType: 'inventory_value', position: 8 },\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(`${widgetData.widgetType} widget has correct position`, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widgets Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var collectionVariableNames = [",
									"    \"welcomeID\",",
									"    \"price_positionID\",",
									"    \"selected_domainsID\",",
									"    \"gross_marginID\",",
									"    \"price_history_chartID\",",
									"    \"competitor_activityID\",",
									"    \"new_pricesID\",",
									"    \"stock_statusID\",",
									"    \"inventory_valueID\"",
									"];",
									"jsonData.forEach(function (widget, index) {",
									"    var variableName = collectionVariableNames[index];",
									"    pm.collectionVariables.set(variableName, widget.id);",
									"});",
									"pm.test(\"All widget_typeID variables assigned successfully\", function () {",
									"    collectionVariableNames.forEach(function (variableName) {",
									"        pm.expect(pm.collectionVariables.has(variableName)).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Welcome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{welcomeID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{welcomeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2809 Delete Price Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2810 Delete Selected Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2811 Delete Gross Margin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2812 Delete Product Price History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2813 Delete Competitor Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{competitor_activityID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{competitor_activityID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2814 Delete New Prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{new_pricesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{new_pricesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2748 Delete Stock Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{stock_statusID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{stock_statusID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2815 Delete Inventory Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2524](https://app.qase.io/case/PRSP-2524) B: Dashboard -> \"Generate default widgets\" button (Admin/RA)\n\n[PRSP-2748 ](https://app.qase.io/case/PRSP-2748) F: Dashboard ->\"Stock status\" widget-> Delete\n\n[PRSP-2809 ](https://app.qase.io/case/PRSP-2809) B: Dashboard -> Price position widget -> Delete\n\n[PRSP-2810 ](https://app.qase.io/case/PRSP-2810) B: Dashboard-> \"Selected Domains\" widget-> Delete\n\n[PRSP-2811 ](https://app.qase.io/case/PRSP-2811) B: Dashboard -> Gross margin widget -> Delete\n\n[PRSP-2812 ](https://app.qase.io/case/PRSP-2812) B: Dashboard -> “Product price history” widget ->Delete\n\n[PRSP-2813 ](https://app.qase.io/case/PRSP-2813) B: Dashboard -> Competitor Activity widget -> Delete\n\n[PRSP-2814 ](https://app.qase.io/case/PRSP-2814) B: Dashboard -> New Prices widget -> Delete\n\n[PRSP-2815 ](https://app.qase.io/case/PRSP-2815) B: Dashboard -> Inventory Value widget -> Delete"
		},
		{
			"name": "Widgets Drag'n'drop",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Switch to account successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2524 Generate dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Default widgets created successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-dashboard-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-dashboard-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var collectionVariableNames = [\r",
									"    \"welcomeID\",\r",
									"    \"price_positionID\",\r",
									"    \"selected_domainsID\",\r",
									"    \"gross_marginID\",\r",
									"    \"price_history_chartID\",\r",
									"    \"competitor_activityID\",\r",
									"    \"new_pricesID\",\r",
									"    \"stock_statusID\",\r",
									"    \"inventory_valueID\"\r",
									"];\r",
									"collectionVariableNames.forEach(function (variableName) {\r",
									"    pm.collectionVariables.unset(variableName);\r",
									"});\r",
									"jsonData.forEach(function (widget, index) {\r",
									"    var variableName = collectionVariableNames[index];\r",
									"    pm.collectionVariables.set(variableName, widget.id);\r",
									"});\r",
									"pm.test(\"All widget_typeID variables assigned successfully\", function () {\r",
									"    collectionVariableNames.forEach(function (variableName) {\r",
									"        pm.expect(pm.collectionVariables.has(variableName)).to.eql(true);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2521 Widgets Drag'n'drop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget positions was successfully updated'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget positions was successfully updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"page\": \"dashboard\",\r\n    \"positions\": [\r\n        {\r\n            \"id\": {{welcomeID}},\r\n            \"oldPos\": 0,\r\n            \"position\": 0\r\n        },\r\n        {\r\n            \"id\": {{price_positionID}},\r\n            \"oldPos\": 1,\r\n            \"position\": 2\r\n        },\r\n        {\r\n            \"id\": {{selected_domainsID}},\r\n            \"oldPos\": 2,\r\n            \"position\": 1\r\n        },\r\n        {\r\n            \"id\": {{gross_marginID}},\r\n            \"oldPos\": 3,\r\n            \"position\": 4\r\n        },\r\n        {\r\n            \"id\": {{price_history_chartID}},\r\n            \"oldPos\": 4,\r\n            \"position\": 3\r\n        },\r\n        {\r\n            \"id\": {{competitor_activityID}},\r\n            \"oldPos\": 5,\r\n            \"position\": 6\r\n        },\r\n        {\r\n            \"id\": {{new_pricesID}},\r\n            \"oldPos\": 6,\r\n            \"position\": 5\r\n        },\r\n        {\r\n            \"id\": {{stock_statusID}},\r\n            \"oldPos\": 7,\r\n            \"position\": 8\r\n        },\r\n        {\r\n            \"id\": {{inventory_valueID}},\r\n            \"oldPos\": 8,\r\n            \"position\": 7\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/positions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check positions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedWidgetOrder = [\r",
									"    { widgetType: 'welcome', position: 0 },\r",
									"    { widgetType: 'selected_domains', position: 1 },\r",
									"    { widgetType: 'price_position', position: 2 },\r",
									"    { widgetType: 'price_history_chart', position: 3 },\r",
									"    { widgetType: 'gross_margin', position: 4 },\r",
									"    { widgetType: 'new_prices', position: 5 },\r",
									"    { widgetType: 'competitor_activity', position: 6 },\r",
									"    { widgetType: 'inventory_value', position: 7 },\r",
									"    { widgetType: 'stock_status', position: 8 },\r",
									"];\r",
									"for (var i = 0; i < expectedWidgetOrder.length; i++) {\r",
									"    var expectedWidget = expectedWidgetOrder[i];\r",
									"    var currentWidget = jsonData[i];\r",
									"    pm.test(`Widget \"${expectedWidget.widgetType}\" at position ${expectedWidget.position}`, function () {\r",
									"        pm.expect(currentWidget.widget_type).to.eql(expectedWidget.widgetType);\r",
									"        pm.expect(currentWidget.position).to.eql(expectedWidget.position);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Welcome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{welcomeID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{welcomeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2809 Delete Price Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2810 Delete Selected Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2811 Delete Gross Margin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2812 Delete Product Price History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2813 Delete Competitor Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{competitor_activityID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{competitor_activityID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2814 Delete New Prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{new_pricesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{new_pricesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2748 Delete Stock Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{stock_statusID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{stock_statusID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2815 Delete Inventory Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2521](https://app.qase.io/case/PRSP-2521) B: Dashboard-> Widgets Drag'n'drop\n\n[PRSP-2524](https://app.qase.io/case/PRSP-2524) B: Dashboard -> \"Generate default widgets\" button (Admin/RA)\n\n[PRSP-2748 ](https://app.qase.io/case/PRSP-2748) F: Dashboard ->\"Stock status\" widget-> Delete\n\n[PRSP-2809 ](https://app.qase.io/case/PRSP-2809) B: Dashboard -> Price position widget -> Delete\n\n[PRSP-2810 ](https://app.qase.io/case/PRSP-2810) B: Dashboard-> \"Selected Domains\" widget-> Delete\n\n[PRSP-2811 ](https://app.qase.io/case/PRSP-2811) B: Dashboard -> Gross margin widget -> Delete\n\n[PRSP-2812 ](https://app.qase.io/case/PRSP-2812) B: Dashboard -> “Product price history” widget ->Delete\n\n[PRSP-2813 ](https://app.qase.io/case/PRSP-2813) B: Dashboard -> Competitor Activity widget -> Delete\n\n[PRSP-2814 ](https://app.qase.io/case/PRSP-2814) B: Dashboard -> New Prices widget -> Delete\n\n[PRSP-2815 ](https://app.qase.io/case/PRSP-2815) B: Dashboard -> Inventory Value widget -> Delete"
		},
		{
			"name": "Reset to default all widgets",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feed, check GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.feed && jsonData.feed.hasOwnProperty('id')) {",
									"    pm.test(\"Test GA\", function () {",
									"        if (jsonData.feed.ga_data && jsonData.feed.ga_data.hasOwnProperty('enableGa')) {",
									"            pm.collectionVariables.set(\"FeedID\", jsonData.feed.id);",
									"            pm.collectionVariables.set(\"FeedName\", jsonData.feed.name);",
									"            pm.collectionVariables.set(\"FeedCount\", jsonData.feed.count);",
									"            if (jsonData.feed.ga_data.enableGa === false) {",
									"                pm.test(\"GA is disabled\");",
									"                postman.setNextRequest(\"PRSP-2527 Enable GA\");",
									"            } else if (jsonData.feed.ga_data.enableGa === true) {",
									"                pm.test(\"GA is enabled\");",
									"                postman.setNextRequest(\"GA test data\");",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    pm.test(jsonData.message, function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2527 Enable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Google Analytics settings saved'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Google Analytics settings saved\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"GA4\",\n        \"enableGa\": true,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"itemId\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is enabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "GA test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Your google analytics was filled with test data.Products will be recalculated in background shortly'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Your google analytics was filled with test data.Products will be recalculated in background shortly\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/fill-account-with-test-ga-data",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"fill-account-with-test-ga-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2524 Generate dashboard widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Default widgets created successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-dashboard-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-dashboard-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-523,537, 548 Create GA widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widgets were successfully created'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 1,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 1,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 1,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-495,1890 Create Price changes, Top domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widgets were successfully created'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 1,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 1,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check widgets, Get Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'welcome', position: 0 },\r",
									"    { widgetType: 'price_position', position: 1 },\r",
									"    { widgetType: 'selected_domains', position: 2 },\r",
									"    { widgetType: 'gross_margin', position: 3 },\r",
									"    { widgetType: 'price_history_chart', position: 4 },\r",
									"    { widgetType: 'competitor_activity', position: 5 },\r",
									"    { widgetType: 'new_prices', position: 6 },\r",
									"    { widgetType: 'stock_status', position: 7 },\r",
									"    { widgetType: 'inventory_value', position: 8 },\r",
									"    { widgetType: 'conversion_rate', position: 9 },\r",
									"    { widgetType: 'profit', position: 10 },\r",
									"    { widgetType: 'google_analytics', position: 11 },\r",
									"    { widgetType: 'top_competitors', position: 12 },\r",
									"    { widgetType: 'price_changes', position: 13 },\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(\"Get \" + widgetData.widgetType + \"ID\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            console.log(pm.collectionVariables.get(widgetData.widgetType + \"ID\"));\r",
									"            if (widgetData.widgetType === \"top_competitors\") {\r",
									"                pm.collectionVariables.set(\"top_competitorsID\", jsonData[widgetData.position].id);\r",
									"            }\r",
									"            postman.setNextRequest(\"Get Brand ID, Domain ID\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand ID, Domain ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"BrandID\", jsonData.facets.brands[0].id);",
									"pm.collectionVariables.set(\"DomainID\", jsonData.facets.domains[0].id);",
									"if (pm.collectionVariables.get(\"BrandID\") && pm.collectionVariables.get(\"DomainID\")) {",
									"    pm.test(\"BrandID and DomainID received successfully\", function () {",
									"        console.log(\"BrandID =\", pm.collectionVariables.get(\"BrandID\"), \" and DomainID =\", pm.collectionVariables.get(\"DomainID\"));",
									"    });",
									"} else {",
									"    pm.test(\"Didn't get\", function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"direction\": \"DESC\",\n    \"isCustomHideLoader\": true,\n    \"isExactMatch\": false,\n    \"limit\": 5,\n    \"onlyFacets\": false,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-508 Edit Selected domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Selected_domains widget is filtered by brand and domain\", function () {\r",
									"    pm.expect(jsonData.data.selected[\"brandsIds\"]).to.eql([pm.collectionVariables.get(\"BrandID\")]) && pm.expect(jsonData.data.selected[\"domainIds\"]).to.eql([pm.collectionVariables.get(\"DomainID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [\r\n        {{DomainID}}\r\n    ],\r\n    \"brandsIds\": [\r\n        {{BrandID}}\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-497  Edit Top domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Top_domains widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"brandsIds\": [\r\n        {{BrandID}}\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-941 Edit Inventory value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Inventory_Value widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-540 Edit Conversion rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Inventory_Value widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-526 Edit Profit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Profit widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-551 Edit GA widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Google Analytics widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1891 Edit Price changes widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Price Changes widget is filtered by brand\", function () {\r",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-471 Edit Price position widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Price Position widget is filtered by brand\", function () {",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"    pm.expect(jsonData.data.data[1].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"    pm.expect(jsonData.data.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"});",
									"pm.test(\"Price Position widget is filtered by domain\", function () {",
									"    pm.expect(jsonData.data.data[0].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"    pm.expect(jsonData.data.data[1].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"    pm.expect(jsonData.data.data[2].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"});",
									"pm.test(\"Price Position widget is filtered by competitorsStockStatus\", function () {",
									"    pm.expect(jsonData.data.data[0].param.competitorsStockStatus).to.eql([\"in stock\"]);",
									"    pm.expect(jsonData.data.data[1].param.competitorsStockStatus).to.eql([\"out of stock\"]);",
									"    pm.expect(jsonData.data.data[2].param.competitorsStockStatus).to.eql([\"in stock\", \"out of stock\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"domainIds\": [\n                {{DomainID}}\n            ],\n            \"competitorsStockStatus\": [\n                \"in stock\"\n            ]\n        },\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"domainIds\": [\n                {{DomainID}}\n            ],\n            \"competitorsStockStatus\": [\n                \"out of stock\"\n            ]\n        },\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"domainIds\": [\n                {{DomainID}}\n            ],\n            \"competitorsStockStatus\": [\n                \"in stock\",\n                \"out of stock\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1387 Edit Gross Margin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Gross Margin widget widget is filtered by brand\", function () {",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"    pm.expect(jsonData.data.data[1].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"    pm.expect(jsonData.data.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"BrandID\")]);",
									"});",
									"pm.test(\"Gross Margin widget is filtered by domain\", function () {",
									"    pm.expect(jsonData.data.data[0].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"    pm.expect(jsonData.data.data[1].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"    pm.expect(jsonData.data.data[2].param.domainIds).to.eql([pm.collectionVariables.get(\"DomainID\")]);",
									"});",
									"pm.test(\"Gross Margin widget is filtered by competitorsStockStatus\", function () {",
									"    pm.expect(jsonData.data.data[0].param.stockStatus).to.eql([\"in stock\"]);",
									"    pm.expect(jsonData.data.data[1].param.stockStatus).to.eql([\"out of stock\"]);",
									"    pm.expect(jsonData.data.data[2].param.stockStatus).to.eql([\"preorder\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"stockStatus\": [\n                \"in stock\"\n            ],\n            \"origin\": \"brandsIds\",\n            \"domainIds\": [\n                {{DomainID}}\n            ]\n        },\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"stockStatus\": [\n                \"out of stock\"\n            ],\n            \"origin\": \"brandsIds\",\n            \"domainIds\": [\n                {{DomainID}}\n            ]\n        },\n        {\n            \"brandsIds\": [\n                {{BrandID}}\n            ],\n            \"stockStatus\": [\n                \"preorder\"\n            ],\n            \"origin\": \"brandsIds\",\n            \"domainIds\": [\n                {{DomainID}}\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var DomainID = pm.collectionVariables.get(\"DomainID\");",
									"var BrandID = pm.collectionVariables.get(\"BrandID\");",
									"jsonData.forEach(function (widget) {",
									"    switch (widget.widget_type) {",
									"        case \"selected_domains\":",
									"            pm.test(\"Check selected_domains widget params\", function () {",
									"                pm.expect(widget.params.domainIds).to.eql([DomainID]);",
									"                pm.expect(widget.params.brandsIds).to.eql([BrandID]);",
									"            });",
									"            break;",
									"        case \"top_competitors\":",
									"        case \"inventory_value\":",
									"        case \"conversion_rate\":",
									"        case \"profit\":",
									"        case \"google_analytics\":",
									"        case \"price_changes\":",
									"            pm.test(\"Check \" + widget.widget_type + \" widget params\", function () {",
									"                pm.expect(widget.params.brandsIds).to.eql([BrandID]);",
									"            });",
									"            break;",
									"        case \"price_position\":",
									"            pm.test(\"Check price_position widget params\", function () {",
									"                widget.params.forEach(function (param) {",
									"                    pm.expect(param.domainIds).to.eql([DomainID]);",
									"                    pm.expect(param.brandsIds).to.eql([BrandID]);",
									"                    pm.expect([\"in stock\", \"out of stock\"]).to.include.members(param.competitorsStockStatus);",
									"                });",
									"            });",
									"            break;",
									"        case \"gross_margin\":",
									"            pm.test(\"Check gross_margin widget params\", function () {",
									"                widget.params.forEach(function (param) {",
									"                    pm.expect(param.domainIds).to.eql([DomainID]);",
									"                    pm.expect(param.brandsIds).to.eql([BrandID]);",
									"                    pm.expect([\"in stock\", \"out of stock\", \"preorder\"]).to.include.members(param.stockStatus);",
									"                });",
									"            });",
									"            break;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2523 Reset to default all widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'All widgets was reset to default.'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"All widgets was reset to default.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/reset-to-default-all-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"reset-to-default-all-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check widgets after reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"for (var i = 0; i < jsonData.length; i++) {",
									"    var widget = jsonData[i];",
									"    var params = widget.params;",
									"    if (",
									"        widget.widget_type == \"selected_domains\" ||",
									"        widget.widget_type == \"inventory_value\" ||",
									"        widget.widget_type == \"conversion_rate\" ||",
									"        widget.widget_type == \"profit\" ||",
									"        widget.widget_type == \"google_analytics\" ||",
									"        widget.widget_type == \"top_competitors\" ||",
									"        widget.widget_type == \"price_changes\"",
									"    ) {",
									"        pm.test(widget.widget_type + \" widget is reseted\", function () {",
									"            pm.expect(params).to.eql(null);",
									"        });",
									"    } else if (",
									"        widget.widget_type == \"price_position\" ||",
									"        widget.widget_type == \"gross_margin\"",
									"    ) {",
									"        pm.test(widget.widget_type + \" widget is reseted\", function () {",
									"            for (var j = 0; j < params.length; j++) {",
									"                pm.expect(params[0]).to.be.empty;",
									"                pm.expect(params[1].brandsIds).not.empty;",
									"                pm.expect(params[1].brandsIds).to.not.eql(pm.collectionVariables.get(\"BrandID\"));",
									"                pm.expect(params[2]).not.empty;",
									"                pm.expect(params[j]).to.not.have.property('domainIds');",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Welcome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{welcomeID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{welcomeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2809 Delete Price Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2810 Delete Selected Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2811 Delete Gross Margin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2812 Delete Product Price History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2813 Delete Competitor Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{competitor_activityID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{competitor_activityID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2814 Delete New Prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{new_pricesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{new_pricesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2748 Delete Stock Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{stock_statusID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{stock_statusID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2815 Delete Inventory Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2816 Delete Profit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2817 Delete Conversion Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2818 Delete GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2819 Delete Price Changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2820 Delete Top Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2220 Disable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{FeedID}},\r\n    \"url\": null,\r\n    \"link\": null,\r\n    \"name\": \"{{FeedName}}\",\r\n    \"note\": null,\r\n    \"count\": {{FeedCount}},\r\n    \"status\": \"Scraped successfully\",\r\n    \"ga_data\": {\r\n        \"viewId\": null,\r\n        \"apiType\": \"UA\",\r\n        \"enableGa\": false,\r\n        \"propertyId\": null,\r\n        \"compareField\": \"gtin\",\r\n        \"cronUpdateType\": \"mockData\",\r\n        \"customApiField\": false,\r\n        \"compareApiField\": \"ga:productSku\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is disabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2523 ](https://app.qase.io/case/PRSP-2523) B: Dashboard-> “Reset to default all widgets” button (Admin/RA)\n\n[PRSP-2524](https://app.qase.io/case/PRSP-2524) B: Dashboard -> \"Generate default widgets\" button (Admin/RA)\n\n[PRSP-2527 ](https://app.qase.io/case/PRSP-2527) B: Datafeeds -> Enable GA and cron \"Mock testing data\" (Admin/RA)\n\n[PRSP-523 ](https://app.qase.io/case/PRSP-523) B: Dashboard -> Profit widget -> Add\n\n[PRSP-537 ](https://app.qase.io/case/PRSP-537) B: Dashboard -> Conversion rate -> Add\n\n[PRSP-548 ](https://app.qase.io/case/PRSP-548) B: Dashboard -> Google Analytics widget -> Add\n\n[PRSP-495 ](https://app.qase.io/case/PRSP-495) B: Dashboard ->\"Top Domains\" widget ->Add\n\n[PRSP-1890 ](https://app.qase.io/case/PRSP-1890) B: Dashboard -> Price changes widget -> Add (Admin/RA)\n\n[PRSP-508 ](https://app.qase.io/case/PRSP-508) B: Dashboard ->\"Selected Domains\" widget-> Filters-> \"Brands\"\n\n[PRSP-497 ](https://app.qase.io/case/PRSP-497) B: Dashboard -> \"Top Domains\" widget -> Filters -> \"Brands\"\n\n[PRSP-941 ](https://app.qase.io/case/PRSP-941) B: Dashboard -> Inventory Value widget ->Filters -> Brands\n\n[PRSP-540 ](https://app.qase.io/case/PRSP-540) B: Dashboard -> Conversion rate -> Filters -> \"Brands\"\n\n[PRSP-526 ](https://app.qase.io/case/PRSP-526) B: Dashboard -> Profit widget -> Filters-> \"Brands\"\n\n[PRSP-551 ](https://app.qase.io/case/PRSP-551) B: Dashboard -> Google Analytics widget -> Filters ->\"Brands\"\n\n[PRSP-1891 ](https://app.qase.io/case/PRSP-1891) B: Dashboard -> Price changes widget -> Filters ->\"Brands\" (Admin/RA)\n\n[PRSP-471 ](https://app.qase.io/case/PRSP-471) B: Dashboard -> Price position widget -> Brands parameters\n\n[PRSP-1387 ](https://app.qase.io/case/PRSP-1387) B: Dashboard -> Gross margin widget -> Brands parameters\n\n[PRSP-2748 ](https://app.qase.io/case/PRSP-2748) F: Dashboard ->\"Stock status\" widget-> Delete\n\n[PRSP-2809 ](https://app.qase.io/case/PRSP-2809) B: Dashboard -> Price position widget -> Delete\n\n[PRSP-2810 ](https://app.qase.io/case/PRSP-2810) B: Dashboard-> \"Selected Domains\" widget-> Delete\n\n[PRSP-2811 ](https://app.qase.io/case/PRSP-2811) B: Dashboard -> Gross margin widget -> Delete\n\n[PRSP-2812 ](https://app.qase.io/case/PRSP-2812) B: Dashboard -> “Product price history” widget ->Delete\n\n[PRSP-2813 ](https://app.qase.io/case/PRSP-2813) B: Dashboard -> Competitor Activity widget -> Delete\n\n[PRSP-2814 ](https://app.qase.io/case/PRSP-2814) B: Dashboard -> New Prices widget -> Delete\n\n[PRSP-2815 ](https://app.qase.io/case/PRSP-2815) B: Dashboard -> Inventory Value widget -> Delete\n\n[PRSP-2816 ](https://app.qase.io/case/PRSP-2816) B: Dashboard -> Profit widget -> Delete\n\n[PRSP-2817](https://app.qase.io/case/PRSP-2817) B: Dashboard -> Conversion rate -> Delete\n\n[PRSP-2818](https://app.qase.io/case/PRSP-2818) B: Dashboard -> Google Analytics widget -> Delete\n\n[PRSP-2819](https://app.qase.io/case/PRSP-2819) B: Dashboard -> Price changes widget -> Delete (Admin/RA)\n\n[PRSP-2820](https://app.qase.io/case/PRSP-2820) B: Dashboard ->\"Top Domains\" widget-> Delete\n\n[PRSP-2220](https://app.qase.io/case/PRSP-2220) B: Datafeeds -> Disable GA without dynamic tags (Admin/RA)"
		},
		{
			"name": "Check GA widgets displaying",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feed, check GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.feed && jsonData.feed.hasOwnProperty('id')) {",
									"    pm.test(\"Test GA\", function () {",
									"        if (jsonData.feed.ga_data && jsonData.feed.ga_data.hasOwnProperty('enableGa')) {",
									"            pm.collectionVariables.set(\"FeedID\", jsonData.feed.id);",
									"            pm.collectionVariables.set(\"FeedName\", jsonData.feed.name);",
									"            pm.collectionVariables.set(\"FeedCount\", jsonData.feed.count);",
									"            if (jsonData.feed.ga_data.enableGa === false) {",
									"                pm.test(\"GA is disabled\");",
									"                postman.setNextRequest(\"PRSP-2527 Enable GA\");",
									"            } else if (jsonData.feed.ga_data.enableGa === true) {",
									"                pm.test(\"GA is enabled\");",
									"                postman.setNextRequest(\"PRSP-523,537,548 Create GA widgets\");",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    pm.test(jsonData.message, function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2527 Enable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": true,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is enabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-523,537,548 Create GA widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.response.json().message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 1,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 1,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 1,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-757 Check GA widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var count = 0;",
									"jsonData.forEach(function (widgets) {",
									"    if (widgets.widget_type == \"profit\") {",
									"        count = count + 1;",
									"    } else if (widgets.widget_type == \"conversion_rate\") {",
									"        count = count + 1;",
									"    } else if (widgets.widget_type == \"google_analytics\") {",
									"        count = count + 1;",
									"    } else {",
									"        count;",
									"    }",
									"});",
									"if (count = 3) {",
									"    pm.test(\"GA widgets is enabled\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widgets Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var collectionVariableNames = [",
									"    \"profitID\",",
									"    \"conversion_rateID\",",
									"    \"google_analyticsID\"",
									"];",
									"collectionVariableNames.forEach(function (variableName) {",
									"    pm.collectionVariables.unset(variableName);",
									"});",
									"jsonData.forEach(function (widget, index) {",
									"    var variableName = collectionVariableNames[index];",
									"    pm.collectionVariables.set(variableName, widget.id);",
									"});",
									"pm.test(\"All widget_typeID variables assigned successfully\", function () {",
									"    collectionVariableNames.forEach(function (variableName) {",
									"        pm.expect(pm.collectionVariables.has(variableName)).to.eql(true);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2220 Disable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": false,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is disabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-757 Check GA widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var count = 0;",
									"jsonData.forEach(function (widgets) {",
									"    if (widgets.widget_type == \"profit\") {",
									"        count = count + 1;",
									"    } else if (widgets.widget_type == \"conversion_rate\") {",
									"        count = count + 1;",
									"    } else if (widgets.widget_type == \"google_analytics\") {",
									"        count = count + 1;",
									"    } else {",
									"        count;",
									"    }",
									"});",
									"if (count === 0) {",
									"    pm.test(\"GA widgets is disabled\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2816 Delete Profit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2817 Delete Conversion Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2818 Delete GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2527 ](https://app.qase.io/case/PRSP-2527) B: Datafeeds -> Enable GA and cron \"Mock testing data\" (Admin/RA)\n\n[PRSP-523 ](https://app.qase.io/case/PRSP-523) B: Dashboard -> Profit widget -> Add\n\n[PRSP-537 ](https://app.qase.io/case/PRSP-537) B: Dashboard -> Conversion rate -> Add\n\n[PRSP-548 ](https://app.qase.io/case/PRSP-548) B: Dashboard -> Google Analytics widget -> Add\n\n[PRSP-757 ](https://app.qase.io/case/PRSP-757) B: Dashboard->Widgets->Option GA widget is disabled/enabled (Admin/RA)\n\n[PRSP-2220 ](https://app.qase.io/case/PRSP-2220) B: Datafeeds -> Disable GA without dynamic tags (Admin/RA)\n\n[PRSP-2816 ](https://app.qase.io/case/PRSP-2816) B: Dashboard -> Profit widget -> Delete\n\n[PRSP-2817](https://app.qase.io/case/PRSP-2817) B: Dashboard -> Conversion rate -> Delete\n\n[PRSP-2818](https://app.qase.io/case/PRSP-2818) B: Dashboard -> Google Analytics widget -> Delete"
		},
		{
			"name": "Price position widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
									"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-469 Create Price position widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 1,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'price_position', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand2ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-471 Edit Price position widget by Brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"), pm.collectionVariables.get(\"Brand2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"Brand1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"Brand2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"Brand1Count\") + pm.collectionVariables.get(\"Brand2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"brandsIds\": [\n                {{Brand1ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        },\n        {\n            \"brandsIds\": [\n                {{Brand2ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        },\n        {\n            \"brandsIds\": [\n                {{Brand1ID}},\n                {{Brand2ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType1ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType2ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-472 Edit Price position widget by Product types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"ProductType2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\") + pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"productTypesIds\": [\n                {{ProductType1ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        },\n        {\n            \"productTypesIds\": [\n                {{ProductType2ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        },\n        {\n            \"productTypesIds\": [\n                {{ProductType1ID}},\n                {{ProductType2ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"DynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag with Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagAndDynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagAndDynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-473,997,998 Edit Price position widget by Tags and Dynamic tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.data[1].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y + jsonData.data.data[0].data[1].y).to.be.eql(pm.collectionVariables.get(\"TagCount\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"DynamicTagCount\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"TagAndDynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"labelsIds\": [\n                {{TagID}}\n            ],\n            \"origin\": \"labelsIds\"\n        },\n        {\n            \"dynamicTagsIds\": [\n                {{DynamicTagID}}\n            ],\n            \"origin\": \"dynamicTagsIds\"\n        },\n        {\n            \"labelsIds\": [\n                {{TagID}}\n            ],\n            \"dynamicTagsIds\": [\n                {{DynamicTagID}}\n            ],\n            \"origin\": \"labelsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag1ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2462 Edit Price position widget by Imported tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\") + pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag1ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        },\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag2ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        },\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag1ID}},\n                {{ImportedTag2ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel1ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel2ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-474 Edit Price position widget by Custom labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"),pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\") + pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel1ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        },\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel2ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        },\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel1ID}},\n                {{CustomLabel2ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\r\n        \"in stock\"\r\n    ],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\r\n        \"out of stock\"\r\n    ],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-502 Edit Price position widget by Competitor stock statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.competitorsStockStatus).to.eql([\"in stock\"]);",
									"    pm.expect(jsonData.data.data[1].param.competitorsStockStatus).to.eql([\"out of stock\"]);",
									"    pm.expect(jsonData.data.data[2].param.competitorsStockStatus).to.eql([\"in stock\",\"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y + jsonData.data.data[0].data[1].y).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter1Count\") + pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"competitorsStockStatus\": [\"in stock\"],\n            \"origin\": null\n        },\n        {\n            \"competitorsStockStatus\": [\"out of stock\"],\n            \"origin\": null\n        },\n        {\n            \"competitorsStockStatus\": [\"in stock\",\"out of stock\"],\n            \"origin\": null\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SeveralParameters1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"SeveralParameters1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"SeveralParameters1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}},\r\n        {{Brand2ID}}\r\n    ],\r\n    \"productTypesIds\": [\r\n        {{ProductType2ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\r\n        \"out of stock\"\r\n    ],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SeveralParameters2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"SeveralParameters2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"SeveralParameters2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel1ID}},\r\n        {{CustomLabel2ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\r\n        \"in stock\"\r\n    ],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SeveralParameters3 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"SeveralParameters3Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"SeveralParameters3Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [\r\n        \"green-price\",\r\n        \"red-price\"\r\n    ],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-475 Edit Price position widget by Several parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"), pm.collectionVariables.get(\"Brand2ID\")]);",
									"    pm.expect(jsonData.data.data[0].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"    pm.expect(jsonData.data.data[0].param.competitorsStockStatus).to.eql([\"out of stock\"]);",
									"    pm.expect(jsonData.data.data[1].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.competitorsStockStatus).to.eql([\"in stock\"]);",
									"    pm.expect(jsonData.data.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.competitorsStockStatus).to.eql([\"in stock\", \"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters3Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"brandsIds\": [\n                {{Brand1ID}},\n                {{Brand2ID}}\n            ],\n            \"productTypesIds\": [\n                {{ProductType2ID}}\n            ],\n            \"origin\": \"brandsIds\",\n            \"competitorsStockStatus\": [\n                \"out of stock\"\n            ]\n        },\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel1ID}},\n                {{CustomLabel2ID}}\n            ],\n            \"origin\": \"customLabelsIds\",\n            \"importedTagsIds\": [\n                {{ImportedTag2ID}}\n            ],\n            \"competitorsStockStatus\": [\n                \"in stock\"\n            ]\n        },\n        {\n            \"brandsIds\": [\n                {{Brand1ID}}\n            ],\n            \"labelsIds\": [\n                {{TagID}}\n            ],\n            \"dynamicTagsIds\": [\n                {{DynamicTagID}}\n            ],\n            \"importedTagsIds\": [\n                {{ImportedTag2ID}}\n            ],\n            \"origin\": \"labelsIds\",\n            \"competitorsStockStatus\": [\n                \"in stock\",\n                \"out of stock\"\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1362 Check Price position with removed filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Params are correctly\", function () {\r",
									"    pm.expect(jsonData.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"), pm.collectionVariables.get(\"Brand2ID\")]);\r",
									"    pm.expect(jsonData.data[0].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);\r",
									"    pm.expect(jsonData.data[0].param.competitorsStockStatus).to.eql([\"out of stock\"]);\r",
									"    pm.expect(jsonData.data[1].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);\r",
									"    pm.expect(jsonData.data[1].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);\r",
									"    pm.expect(jsonData.data[1].param.competitorsStockStatus).to.eql([\"in stock\"]);\r",
									"    pm.expect(jsonData.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);\r",
									"    pm.expect(jsonData.data[2].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);\r",
									"    pm.expect(jsonData.data[2].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);\r",
									"    pm.expect(jsonData.data[2].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);\r",
									"    pm.expect(jsonData.data[2].param.competitorsStockStatus).to.eql([\"in stock\", \"out of stock\"]);\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters1Count\"));\r",
									"    pm.expect(jsonData.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters2Count\"));\r",
									"    pm.expect(jsonData.data[2].data).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Removed filters are correctly\", function () {\r",
									"    pm.expect(jsonData.data[2].paramsTitles.labels).to.be.eql(\"Test For Postman(removed)\");\r",
									"    pm.expect(jsonData.data[2].paramsTitles.dynamicTags).to.be.eql(\"Test(removed)\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/data/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"data",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AllProductsWithМatches count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"AllProductsWithМatchesCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"AllProductsWithМatchesCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-476 Reset to default Price position widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"), pm.collectionVariables.get(\"Brand2ID\")]);\r",
									"    pm.expect(jsonData.data.data[0].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);\r",
									"    pm.expect(jsonData.data.data[0].param.competitorsStockStatus).to.eql([\"out of stock\"]);\r",
									"    pm.expect(jsonData.data.data[1].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);\r",
									"    pm.expect(jsonData.data.data[1].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);\r",
									"    pm.expect(jsonData.data.data[1].param.competitorsStockStatus).to.eql([\"in stock\"]);\r",
									"    pm.expect(jsonData.data.data[2].title).to.eql(\"All products\");\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters1Count\"));\r",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"SeveralParameters2Count\"));\r",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"AllProductsWithМatchesCount\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": [\r\n        {\r\n            \"brandsIds\": [\r\n                {{Brand1ID}},\r\n                {{Brand2ID}}\r\n            ],\r\n            \"productTypesIds\": [\r\n                {{ProductType2ID}}\r\n            ],\r\n            \"origin\": \"brandsIds\",\r\n            \"competitorsStockStatus\": [\r\n                \"out of stock\"\r\n            ]\r\n        },\r\n        {\r\n            \"customLabelsIds\": [\r\n                {{CustomLabel1ID}},\r\n                {{CustomLabel2ID}}\r\n            ],\r\n            \"origin\": \"customLabelsIds\",\r\n            \"importedTagsIds\": [\r\n                {{ImportedTag2ID}}\r\n            ],\r\n            \"competitorsStockStatus\": [\r\n                \"in stock\"\r\n            ]\r\n        },\r\n        {\r\n            \"brandsIds\": [],\r\n            \"productTypesIds\": [],\r\n            \"labelsIds\": [],\r\n            \"dynamicTagsIds\": [],\r\n            \"customLabelsIds\": [],\r\n            \"importedTagsIds\": [],\r\n            \"origin\": null,\r\n            \"customFilters\": null,\r\n            \"domainsIds\": null,\r\n            \"competitorsStockStatus\": [],\r\n            \"mainFilters\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-positions/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-positions",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2809 Delete Price position widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_positionID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_positionID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "После отработки рана удалить тег и удаленный тег с таблицы removed_filter_items.\n\n[PRSP-469](https://app.qase.io/case/PRSP-469) B: Dashboard -> Price position widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-471](https://app.qase.io/case/PRSP-471) B: Dashboard -> Price position widget -> Brands parameters\n\n[PRSP-472](https://app.qase.io/case/PRSP-472) B: Dashboard -> Price position widget -> Product Types parameters\n\n[PRSP-473](https://app.qase.io/case/PRSP-473) B: Dashboard -> Price position widget -> Tags parameters\n\n[PRSP-997](https://app.qase.io/case/PRSP-997) B: Dashboard -> Price position widget -> Dynamic tags parameters\n\n[PRSP-998](https://app.qase.io/case/PRSP-998) B: Dashboard -> Price position widget -> Mix Tags and Dynamic tags parameters\n\n[PRSP-2462](https://app.qase.io/case/PRSP-2462) B: Dashboard -> Price position widget -> Imported tags parameters\n\n[PRSP-474](https://app.qase.io/case/PRSP-474) B: Dashboard -> Price position widget -> “Labels” parameters\n\n[PRSP-502](https://app.qase.io/case/PRSP-502) B: Dashboard -> Price position widget -> \"Competitor Stock Filter\" parameters\n\n[PRSP-475](https://app.qase.io/case/PRSP-475) B: Dashboard -> Price position widget -> Several parameters\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1362](https://app.qase.io/case/PRSP-1362) B: Dashboard -> Price position widget -> Removed filters\n\n[PRSP-476](https://app.qase.io/case/PRSP-476) B: Dashboard -> Price position widget -> \"Reset to default\" button\n\n[PRSP-2809](https://app.qase.io/case/PRSP-2809) B: Dashboard -> Price position widget -> Delete\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Selected domains widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
									"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-505 Create Selected domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 1,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'selected_domains', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand2ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-508 Edit Selected domains widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count).to.be.eql(pm.collectionVariables.get(\"Brand1Count\") + pm.collectionVariables.get(\"Brand2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brandsIds\": [\n        {{Brand1ID}},\n        {{Brand2ID}}\n    ],\n    \"origin\": \"brandsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-508 Edit Selected domains widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"Brand1Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brandsIds\": [\n        {{Brand1ID}}\n    ],\n    \"origin\": \"brandsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType1ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType2ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-509 Edit Selected domains widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\") + pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productTypesIds\": [\n        {{ProductType1ID}},\n        {{ProductType2ID}}\n    ],\n    \"origin\": \"productTypesIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-509 Edit Selected domains widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productTypesIds\": [\n        {{ProductType2ID}}\n    ],\n    \"origin\": \"productTypesIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"DynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag with Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagAndDynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagAndDynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-510 Edit Selected domains widget by Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count).to.be.eql(pm.collectionVariables.get(\"TagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labelsIds\": [\n        {{TagID}}\n    ],\n    \"origin\": \"labelsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1004 Edit Selected domains widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count).to.be.eql(pm.collectionVariables.get(\"DynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dynamicTagsIds\": [\n        {{DynamicTagID}}\n    ],\n    \"origin\": \"dynamicTagsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1005 Edit Selected domains widget by Tags and Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.selected.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"TagAndDynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"labelsIds\": [\n        {{TagID}}\n    ],\n    \"dynamicTagsIds\": [\n        {{DynamicTagID}}\n    ],\n    \"origin\": \"labelsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag1ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2493 Edit Selected domains widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count + jsonData.data.facets[2].count).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\") + pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"importedTagsIds\": [\n        {{ImportedTag1ID}},\n        {{ImportedTag2ID}}\n    ],\n    \"origin\": \"importedTagsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2493 Edit Selected domains widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"importedTagsIds\": [\n        {{ImportedTag1ID}}\n    ],\n    \"origin\": \"importedTagsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel1ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel2ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-511 Edit Selected domains widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\") + pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customLabelsIds\": [\n        {{CustomLabel1ID}},\n        {{CustomLabel2ID}}\n    ],\n    \"origin\": \"customLabelsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-511 Edit Selected domains widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customLabelsIds\": [\n        {{CustomLabel2ID}}\n    ],\n    \"origin\": \"customLabelsIds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\"in stock\"],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\"out of stock\"],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-512 Edit Selected domains widget by Competitor stock status 1 and Competitor stock status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.competitorsStockStatus).to.eql([\"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"competitorsStockStatus\": [\n        \"out of stock\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-512 Edit Selected domains widget by Competitor stock status 1 and Competitor stock status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.selected.competitorsStockStatus).to.eql([\"in stock\",\"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count + jsonData.data.facets[2].count).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter1Count\") + pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"competitorsStockStatus\": [\n        \"in stock\",\n        \"out of stock\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-514 Change Selected domains widget name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.subTitle).to.eql(\"Test\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subTitle\": \"Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AllProductsWithМatches count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"AllProductsWithМatchesCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"AllProductsWithМatchesCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2936 Reset to default Selected domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.data.selected.subTitle).to.eql(null);\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data.facets[0].count + jsonData.data.facets[1].count + jsonData.data.facets[2].count).to.be.eql(pm.collectionVariables.get(\"AllProductsWithМatchesCount\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mainFilters\": null,\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"origin\": null,\r\n    \"customFilters\": null,\r\n    \"domainsIds\": null,\r\n    \"subTitle\": null,\r\n    \"competitorsStockStatus\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/selected-domains/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"selected-domains",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2810 Delete Selected domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{selected_domainsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{selected_domainsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-505](https://app.qase.io/case/PRSP-505) B: Dashboard-> \"Selected Domains\" widget->Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-508](https://app.qase.io/case/PRSP-508) B: Dashboard ->\"Selected Domains\" widget-> Filters-> \"Brands\"\n\n[PRSP-509](https://app.qase.io/case/PRSP-509) B: Dashboard ->\"Selected Domains\" widget-> Filters->\"Product Types\"\n\n[PRSP-510](https://app.qase.io/case/PRSP-510) B: Dashboard ->\"Selected Domains\" widget-> Filters->\"Tags\"\n\n[PRSP-1004](https://app.qase.io/case/PRSP-1004) B: Dashboard ->\"Selected Domains\" widget-> Filters->“Dynamic tags” parameters\n\n[PRSP-1005](https://app.qase.io/case/PRSP-1005) B: Dashboard ->\"Selected Domains\" widget-> Filters-> Mix \"Tags\" and “Dynamic tags”\n\n[PRSP-2493](https://app.qase.io/case/PRSP-2493) B: Dashboard -> Selected Domains widget -> Filters -> \"Imported tags\"\n\n[PRSP-511](https://app.qase.io/case/PRSP-511) B: Dashboard ->\"Selected Domains\" widget-> Filters-> \"Labels\"\n\n[PRSP-512](https://app.qase.io/case/PRSP-512) B: Dashboard ->\"Selected Domains\" widget-> Filters-> \"Competitor Stock Filter\"\n\n[PRSP-514](https://app.qase.io/case/PRSP-514) B: Dashboard ->\"Selected Domains\" widget->Changing the widget\\`s name\n\n[PRSP-2936](https://app.qase.io/case/PRSP-2936) B: Dashboard -> Selected domains widget -> Reset to default button\n\n[PRSP-2810](https://app.qase.io/case/PRSP-2810) B: Dashboard-> \"Selected Domains\" widget-> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Gross margin widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
									"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1385 Create Gross margin widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 1,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'gross_margin', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"origin\": null,\r\n    \"customFilters\": null,\r\n    \"mainFilters\": null,\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"light-green-margin\",\r\n        \"red-margin\",\r\n        \"yellow-margin\"\r\n    ],\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand2ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1387 Edit Gross margin widget by Brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"), pm.collectionVariables.get(\"Brand2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"Brand1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"Brand2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"Brand1Count\") + pm.collectionVariables.get(\"Brand2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"brandsIds\": [\n                {{Brand1ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        },\n        {\n            \"brandsIds\": [\n                {{Brand2ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        },\n        {\n            \"brandsIds\": [\n                {{Brand1ID}},\n                {{Brand2ID}}\n            ],\n            \"origin\": \"brandsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType1ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType2ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1388 Edit Gross margin widget by Product types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"ProductType2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\") + pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"productTypesIds\": [\n                {{ProductType1ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        },\n        {\n            \"productTypesIds\": [\n                {{ProductType2ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        },\n        {\n            \"productTypesIds\": [\n                {{ProductType1ID}},\n                {{ProductType2ID}}\n            ],\n            \"origin\": \"productTypesIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag1ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2464 Edit Gross margin widget by Imported tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y + jsonData.data.data[1].data[1].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\") + pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag1ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        },\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag2ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        },\n        {\n            \"importedTagsIds\": [\n                {{ImportedTag1ID}},\n                {{ImportedTag2ID}}\n            ],\n            \"origin\": \"importedTagsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel1ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel2ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1390 Edit Gross margin widget by Custom labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\")]);",
									"    pm.expect(jsonData.data.data[1].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"    pm.expect(jsonData.data.data[2].param.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"),pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\") + pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel1ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        },\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel2ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        },\n        {\n            \"customLabelsIds\": [\n                {{CustomLabel1ID}},\n                {{CustomLabel2ID}}\n            ],\n            \"origin\": \"customLabelsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"DynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag with Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagAndDynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagAndDynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1389,1396,1397 Edit Gross margin widget by Tags and Dynamic tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.data[0].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.data[1].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.data[2].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.data[0].data[0].y + jsonData.data.data[0].data[1].y).to.be.eql(pm.collectionVariables.get(\"TagCount\"));",
									"    pm.expect(jsonData.data.data[1].data[0].y + jsonData.data.data[1].data[1].y).to.be.eql(pm.collectionVariables.get(\"DynamicTagCount\"));",
									"    pm.expect(jsonData.data.data[2].data[0].y).to.be.eql(pm.collectionVariables.get(\"TagAndDynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": [\n        {\n            \"labelsIds\": [\n                {{TagID}}\n            ],\n            \"origin\": \"labelsIds\"\n        },\n        {\n            \"dynamicTagsIds\": [\n                {{DynamicTagID}}\n            ],\n            \"origin\": \"dynamicTagsIds\"\n        },\n        {\n            \"labelsIds\": [\n                {{TagID}}\n            ],\n            \"dynamicTagsIds\": [\n                {{DynamicTagID}}\n            ],\n            \"origin\": \"labelsIds\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1401 Check Gross margin with removed filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Params are correctly\", function () {\r",
									"    pm.expect(jsonData.data[0].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);\r",
									"    pm.expect(jsonData.data[1].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);\r",
									"    pm.expect(jsonData.data[2].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);\r",
									"    pm.expect(jsonData.data[2].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data[0].data).to.be.undefined;\r",
									"    pm.expect(jsonData.data[1].data).to.be.undefined;\r",
									"    pm.expect(jsonData.data[2].data).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Removed filters are correctly\", function () {\r",
									"    pm.expect(jsonData.data[0].paramsTitles.labels).to.be.eql(\"Test For Postman(removed)\");\r",
									"    pm.expect(jsonData.data[1].paramsTitles.dynamicTags).to.be.eql(\"Test(removed)\");\r",
									"    pm.expect(jsonData.data[2].paramsTitles.labels).to.be.eql(\"Test For Postman(removed)\");\r",
									"    pm.expect(jsonData.data[2].paramsTitles.dynamicTags).to.be.eql(\"Test(removed)\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/data/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"data",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AllProductsWithGrossMargin count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"AllProductsWithGrossMargin received successful\", function () {\r",
									"    pm.collectionVariables.set(\"AllProductsWithGrossMargin\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [\r\n        \"gray-margin\",\r\n        \"green-margin\",\r\n        \"red-margin\"\r\n    ],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1392 Reset to default Gross margin widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.data.data[0].param.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);\r",
									"    pm.expect(jsonData.data.data[1].param.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);\r",
									"    pm.expect(jsonData.data.data[2].title).to.eql(\"All products\");\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data.data[0].data).to.be.undefined;\r",
									"    pm.expect(jsonData.data.data[1].data).to.be.undefined;\r",
									"    pm.expect(jsonData.data.data[2].data[0].y + jsonData.data.data[2].data[1].y + jsonData.data.data[2].data[2].y).to.be.eql(pm.collectionVariables.get(\"AllProductsWithGrossMargin\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": [\r\n        {\r\n            \"labelsIds\": [\r\n                {{TagID}}\r\n            ],\r\n            \"origin\": \"labelsIds\"\r\n        },\r\n        {\r\n            \"dynamicTagsIds\": [\r\n                {{DynamicTagID}}\r\n            ],\r\n            \"origin\": \"dynamicTagsIds\"\r\n        },\r\n        {\r\n            \"brandsIds\": [],\r\n            \"productTypesIds\": [],\r\n            \"labelsIds\": [],\r\n            \"dynamicTagsIds\": [],\r\n            \"customLabelsIds\": [],\r\n            \"importedTagsIds\": [],\r\n            \"origin\": null,\r\n            \"customFilters\": null,\r\n            \"domainsIds\": null,\r\n            \"stockStatus\": [],\r\n            \"mainFilters\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-gross-margin/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-gross-margin",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2811 Delete Gross margin widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{gross_marginID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{gross_marginID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "После отработки рана удалить тег и удаленный тег с таблицы removed_filter_items.\n\n[PRSP-1385 ](https://app.qase.io/case/PRSP-1385) B: Dashboard -> Gross margin widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-1387 ](https://app.qase.io/case/PRSP-1387) B: Dashboard -> Gross margin widget -> Brands parameters\n\n[PRSP-1388 ](https://app.qase.io/case/PRSP-1388) B: Dashboard -> Gross margin widget -> Product Types parameters\n\n[PRSP-2464 ](https://app.qase.io/case/PRSP-2464) B: Dashboard -> Gross margin widget -> Imported tags parameters\n\n[PRSP-1390 ](https://app.qase.io/case/PRSP-1390) B: Dashboard -> Gross margin widget -> Labels parameters\n\n[PRSP-1389 ](https://app.qase.io/case/PRSP-1389) B: Dashboard -> Gross margin widget -> Tags parameters\n\n[PRSP-1396 ](https://app.qase.io/case/PRSP-1396) B: Dashboard -> Gross margin widget -> Dynamic tags parameters\n\n[PRSP-1397 ](https://app.qase.io/case/PRSP-1397) B: Dashboard -> Gross margin widget -> Mix \"Tags\" and “Dynamic tags” parameters\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1401 ](https://app.qase.io/case/PRSP-1401) B: Dashboard -> Gross margin widget -> Removed filters\n\n[PRSP-1392 ](https://app.qase.io/case/PRSP-1392) B: Dashboard -> Gross margin widget -> Reset to default button\n\n[PRSP-2811 ](https://app.qase.io/case/PRSP-2811) B: Dashboard -> Gross margin widget -> Delete\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Product price history",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3004 Create Product price history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'price_history_chart', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check ProductPriceHistoryDefaultCount count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"ProductPriceHistoryDefaultCount received successful\", function () {",
									"    pm.collectionVariables.set(\"ProductPriceHistoryDefaultCount\", jsonData.length);",
									"    pm.collectionVariables.set(\"Product1ID\", jsonData[0].value);",
									"    pm.collectionVariables.set(\"Product2ID\", jsonData[1].value);",
									"    pm.collectionVariables.set(\"Product3ID\", jsonData[2].value);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"widget_id\": {{price_history_chartID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-history-products/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-history-products",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-482 Delete product from Product price history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.be.eql(\"Widget was successfully updated\");",
									"    pm.expect(jsonData.data.productIds).to.be.eql([pm.collectionVariables.get(\"Product2ID\"), pm.collectionVariables.get(\"Product1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        {{Product1ID}},\n        {{Product2ID}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-history-products/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-history-products",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-481 Add product to Product price history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.be.eql(\"Widget was successfully updated\");",
									"    pm.expect(jsonData.data.productIds).to.be.eql([pm.collectionVariables.get(\"Product2ID\"), pm.collectionVariables.get(\"Product1ID\"), pm.collectionVariables.get(\"Product3ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        {{Product1ID}},\n        {{Product2ID}},\n        {{Product3ID}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-history-products/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-history-products",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2812 Delete Product price history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_history_chartID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_history_chartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3004 ](https://app.qase.io/case/PRSP-3004) B: Dashboard -> \"Product price history\" widget -> Add\n\n[PRSP-482 ](https://app.qase.io/case/PRSP-482) B: Dashboard -> “Product price history” widget ->Deleting a product\n\n[PRSP-481 ](https://app.qase.io/case/PRSP-481) B: Dashboard -> “Product price history” widget -> Adding a product\n\n[PRSP-2812 ](https://app.qase.io/case/PRSP-2812) B: Dashboard -> “Product price history” widget ->Delete"
		},
		{
			"name": "Top domains widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
									"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-495 Create Top domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 1,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'top_competitors', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand1ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brand2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Brand2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{Brand2ID}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-497 Edit Top domains widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count).to.be.eql(pm.collectionVariables.get(\"Brand1Count\") + pm.collectionVariables.get(\"Brand2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-497 Edit Top domains widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"Brand1Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType1ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ProductType2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ProductType2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{ProductType2ID}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-498 Edit Top domains widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count).to.be.eql(pm.collectionVariables.get(\"ProductType1Count\") + pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-498 Edit Top domains widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"ProductType2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"DynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tag with Dynamic Tag count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"TagAndDynamicTagCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"TagAndDynamicTagCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{TagID}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagID}}\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-499 Edit Top domains widget by Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count).to.be.eql(pm.collectionVariables.get(\"TagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1002 Edit Top domains widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count).to.be.eql(pm.collectionVariables.get(\"DynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1001 Edit Top domains widget by Tags and Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"    pm.expect(jsonData.data.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"TagAndDynamicTagCount\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag1ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Imported Tag 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"ImportedTag2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{ImportedTag2ID}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2463 Edit Top domains widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count + jsonData.data.domains[2].count).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\") + pm.collectionVariables.get(\"ImportedTag2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2463 Edit Top domains widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"ImportedTag1Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel1ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CustomLabel 2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CustomLabel2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{CustomLabel2ID}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-500 Edit Top domains widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count).to.be.eql(pm.collectionVariables.get(\"CustomLabel1Count\") + pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-500 Edit Top domains widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"CustomLabel2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter1 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter1Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter1Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\"in stock\"],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CompetitorStockFilter2 count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CompetitorStockFilter2Count received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CompetitorStockFilter2Count\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [\"out of stock\"],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-504 Edit Top domains widget by Competitor stock status 1 and Competitor stock status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.competitorsStockStatus).to.eql([\"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"competitorsStockStatus\": [\n            \"out of stock\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-504 Edit Top domains widget by Competitor stock status 1 and Competitor stock status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.data.params.competitorsStockStatus).to.eql([\"in stock\",\"out of stock\"]);",
									"});",
									"pm.test(\"Count is correctly\", function () {",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count + jsonData.data.domains[2].count).to.be.eql(pm.collectionVariables.get(\"CompetitorStockFilter1Count\") + pm.collectionVariables.get(\"CompetitorStockFilter2Count\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"competitorsStockStatus\": [\n            \"in stock\",\n            \"out of stock\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AllProductsWithМatches count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"AllProductsWithМatchesCount received successful\", function () {\r",
									"    pm.collectionVariables.set(\"AllProductsWithМatchesCount\", jsonData.count);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-compare-products",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-compare-products"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-501 Reset to default Top domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.data.params.competitorsStockStatus).to.be.an('array').that.is.empty;\r",
									"});\r",
									"pm.test(\"Count is correctly\", function () {\r",
									"    pm.expect(jsonData.data.domains[0].count + jsonData.data.domains[1].count + jsonData.data.domains[2].count).to.be.eql(pm.collectionVariables.get(\"AllProductsWithМatchesCount\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/top-domains/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"top-domains",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2820 Delete Top domains widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top_competitorsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top_competitorsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-495 ](https://app.qase.io/case/PRSP-495) B: Dashboard ->\"Top Domains\" widget ->Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-497 ](https://app.qase.io/case/PRSP-497) B: Dashboard -> \"Top Domains\" widget -> Filters -> \"Brands\"\n\n[PRSP-498 ](https://app.qase.io/case/PRSP-498) B: Dashboard -> \"Top Domains\" widget -> Filters -> \"Product Types\"\n\n[PRSP-499 ](https://app.qase.io/case/PRSP-499) B: Dashboard ->\"Top Domains\" widget-> Filters-> \"Tags\"\n\n[PRSP-1002](https://app.qase.io/case/PRSP-1002) B: Dashboard -> \"Top Domains\" widget -> Filters ->“Dynamic tags” parameters\n\n[PRSP-1001 ](https://app.qase.io/case/PRSP-1001) B: Dashboard -> \"Top Domains\" widget -> Filters- > Mix \"Tags\" and “Dynamic tags” parameters\n\n[PRSP-2463 ](https://app.qase.io/case/PRSP-2463) B: Dashboard ->Top Domains widget -> Filters -> \"Imported tags\"\n\n[PRSP-500 ](https://app.qase.io/case/PRSP-500) B: Dashboard -> \"Top Domains\" widget -> Filters -> \"Labels\"\n\n[PRSP-504 ](https://app.qase.io/case/PRSP-504) B: Dashboard -> \"Top Domains\" widget -> \"Competitor Stock status\"\n\n[PRSP-501 ](https://app.qase.io/case/PRSP-501) B: Dashboard ->\"Top Domains\" widget->\"Reset to default\" button\n\n[PRSP-2820 ](https://app.qase.io/case/PRSP-2820) B: Dashboard ->\"Top Domains\" widget-> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Inventory value widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3015 Create Inventory value widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 1,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'inventory_value', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null,\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-941 Edit Inventory value widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-941 Edit Inventory value widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-942 Edit Inventory value widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-942 Edit Inventory value widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-943 Edit Inventory value widget by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1014 Edit Inventory value widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2466 Edit Inventory value widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2466 Edit Inventory value widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-944 Edit Inventory value widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-944 Edit Inventory value widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-945 Reset to default Inventory value widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/inventory-value/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"inventory-value",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2815 Delete Inventory value widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{inventory_valueID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{inventory_valueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3015 ](https://app.qase.io/case/PRSP-3015) B: Dashboard -> Inventory Value widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-941 ](https://app.qase.io/case/PRSP-941) B: Dashboard -> Inventory Value widget ->Filters -> Brands\n\n[PRSP-942 ](https://app.qase.io/case/PRSP-942) B: Dashboard -> Inventory Value widget ->Filters ->Product Types\n\n[PRSP-943 ](https://app.qase.io/case/PRSP-943) B: Dashboard -> Inventory Value widget ->Filters ->Tags\n\n[PRSP-1014 ](https://app.qase.io/case/PRSP-1014) B: Dashboard -> Inventory Value widget ->Filters -> Dynamic Tags\n\n[PRSP-2466 ](https://app.qase.io/case/PRSP-2466) B: Dashboard -> Inventory value widget -> Filters -> \"Imported tags\"\n\n[PRSP-944 ](https://app.qase.io/case/PRSP-944) B: Dashboard -> Inventory Value widget ->Filters -> Labels\n\n[PRSP-945 ](https://app.qase.io/case/PRSP-945) B: Dashboard -> Inventory Value widget ->Filters ->\"Reset to default\" button\n\n[PRSP-2815 ](https://app.qase.io/case/PRSP-2815) B: Dashboard -> Inventory Value widget -> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Price changes widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1890 Create Price changes widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 1,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'price_changes', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null,\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1891 Edit Price changes widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1891 Edit Price changes widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1892 Edit Price changes widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1892 Edit Price changes widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1893 Edit Price changes widget by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1894 Edit Price changes widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2470 Edit Price changes widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2470 Edit Price changes widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1895 Edit Price changes widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1895 Edit Price changes widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1896 Reset to default Price changes widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2819 Delete Price changes widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{price_changesID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{price_changesID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-1890 ](https://app.qase.io/case/PRSP-1890) B: Dashboard -> Price changes widget -> Add (Admin/RA)\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-1891 ](https://app.qase.io/case/PRSP-1891) B: Dashboard -> Price changes widget -> Filters ->\"Brands\" (Admin/RA)\n\n[PRSP-1892 ](https://app.qase.io/case/PRSP-1892) B: Dashboard -> Price changes widget -> Filters ->\"Product types\" (Admin/RA)\n\n[PRSP-1893 ](https://app.qase.io/case/PRSP-1893) B: Dashboard -> Price changes widget -> Filters ->\"Tags\" (Admin/RA)\n\n[PRSP-1894 ](https://app.qase.io/case/PRSP-1894) B: Dashboard -> Price changes widget -> Filters ->\"Dynamic tags\" (Admin/RA)\n\n[PRSP-2470 ](https://app.qase.io/case/PRSP-2470) B: Dashboard -> Price changes widget -> Filters -> \"Imported tags\"\n\n[PRSP-1895 ](https://app.qase.io/case/PRSP-1895) B: Dashboard -> Price changes widget -> Filters ->\"Labels\" (Admin/RA)\n\n[PRSP-1896 ](https://app.qase.io/case/PRSP-1896) B: Dashboard -> Price changes widget -> Reset to default (Admin/RA)\n\n[PRSP-2819 ](https://app.qase.io/case/PRSP-2819) B: Dashboard -> Price changes widget -> Delete (Admin/RA)\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page"
		},
		{
			"name": "Profit widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feed, check GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.feed && jsonData.feed.hasOwnProperty('id')) {",
									"    pm.test(\"Test GA\", function () {",
									"        if (jsonData.feed.ga_data && jsonData.feed.ga_data.hasOwnProperty('enableGa')) {",
									"            pm.collectionVariables.set(\"FeedID\", jsonData.feed.id);",
									"            pm.collectionVariables.set(\"FeedName\", jsonData.feed.name);",
									"            pm.collectionVariables.set(\"FeedCount\", jsonData.feed.count);",
									"            if (jsonData.feed.ga_data.enableGa === false) {",
									"                pm.test(\"GA is disabled\");",
									"                postman.setNextRequest(\"PRSP-2527 Enable GA\");",
									"            } else if (jsonData.feed.ga_data.enableGa === true) {",
									"                pm.test(\"GA is enabled\");",
									"                postman.setNextRequest(\"PRSP-523 Create Profit widget\");",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    pm.test(jsonData.message, function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2527 Enable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": true,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is enabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-523 Create Profit widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 1,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'profit', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null,\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-526 Edit Profit widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-526 Edit Profit widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-527 Edit Profit widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-527 Edit Profit widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-528 Edit Profit widget by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1007 Edit Profit widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2467 Edit Profit widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2467 Edit Profit widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-529 Edit Profit widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-529 Edit Profit widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-530 Reset to default Profit widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    },\r\n    \"sortParams\": {\r\n        \"interval\": 30\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/profit/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"profit",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2816 Delete Profit widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{profitID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{profitID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2220 Disable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": false,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is disabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2527 ](https://app.qase.io/case/PRSP-2527) B: Datafeeds -> Enable GA and cron \"Mock testing data\" (Admin/RA)\n\n[PRSP-523 ](https://app.qase.io/case/PRSP-523) B: Dashboard -> Profit widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-526 ](https://app.qase.io/case/PRSP-526) B: Dashboard -> Profit widget -> Filters-> \"Brands\"\n\n[PRSP-527 ](https://app.qase.io/case/PRSP-527) B: Dashboard -> Profit widget -> Filters-> \"Product Types\"\n\n[PRSP-528 ](https://app.qase.io/case/PRSP-528) B: Dashboard -> Profit widget -> Filters-> \"Tags\"\n\n[PRSP-1007 ](https://app.qase.io/case/PRSP-1007) B: Dashboard -> Profit widget -> Filters-> “Dynamic tags”\n\n[PRSP-2467 ](https://app.qase.io/case/PRSP-2467) B: Dashboard -> Profit widget -> Filters -> \"Imported tags\"\n\n[PRSP-529 ](https://app.qase.io/case/PRSP-529) B: Dashboard -> Profit widget -> Filters-> \"Labels\"\n\n[PRSP-530 ](https://app.qase.io/case/PRSP-530) B: Dashboard -> Profit widget -> Filters-> \"Reset to default\"\n\n[PRSP-2816 ](https://app.qase.io/case/PRSP-2816) B: Dashboard -> Profit widget -> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page\n\n[PRSP-2220 ](https://app.qase.io/case/PRSP-2220) B: Datafeeds -> Disable GA without dynamic tags (Admin/RA)"
		},
		{
			"name": "Conversion rate widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feed, check GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.feed && jsonData.feed.hasOwnProperty('id')) {",
									"    pm.test(\"Test GA\", function () {",
									"        if (jsonData.feed.ga_data && jsonData.feed.ga_data.hasOwnProperty('enableGa')) {",
									"            pm.collectionVariables.set(\"FeedID\", jsonData.feed.id);",
									"            pm.collectionVariables.set(\"FeedName\", jsonData.feed.name);",
									"            pm.collectionVariables.set(\"FeedCount\", jsonData.feed.count);",
									"            if (jsonData.feed.ga_data.enableGa === false) {",
									"                pm.test(\"GA is disabled\");",
									"                postman.setNextRequest(\"PRSP-2527 Enable GA\");",
									"            } else if (jsonData.feed.ga_data.enableGa === true) {",
									"                pm.test(\"GA is enabled\");",
									"                postman.setNextRequest(\"PRSP-537 Create Conversion rate widget\");",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    pm.test(jsonData.message, function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2527 Enable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": true,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is enabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-537 Create Conversion rate widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 1,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 0,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'conversion_rate', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null,\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-540 Edit Conversion rate widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-540 Edit Conversion rate widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-539 Edit Conversion rate widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-539 Edit Conversion rate widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-541 Edit Conversion rate widget by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1012 Edit Conversion rate widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2468 Edit Conversion rate widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2468 Edit Conversion rate widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-542 Edit Conversion rate widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-542 Edit Conversion rate widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    },\n    \"sortParams\": {\n        \"interval\": 30\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-645 Reset to default Conversion rate widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    },\r\n    \"sortParams\": {\r\n        \"interval\": 30\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/conversion-rate/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"conversion-rate",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2817 Delete Conversion rate widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{conversion_rateID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{conversion_rateID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2220 Disable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": false,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is disabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2527 ](https://app.qase.io/case/PRSP-2527) B: Datafeeds -> Enable GA and cron \"Mock testing data\" (Admin/RA)\n\n[PRSP-523 ](https://app.qase.io/case/PRSP-523) B: Dashboard -> Profit widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-540 ](https://app.qase.io/case/PRSP-540) B: Dashboard -> Conversion rate -> Filters -> \"Brands\"\n\n[PRSP-539 ](https://app.qase.io/case/PRSP-539) B: Dashboard -> Conversion rate -> Filters -> \"Product types\"\n\n[PRSP-541 ](https://app.qase.io/case/PRSP-541) B: Dashboard -> Conversion rate -> Filters -> \"Tags\"\n\n[PRSP-1012 ](https://app.qase.io/case/PRSP-1012) B: Dashboard -> Conversion rate -> Filters -> \"Dynamic tags”\n\n[PRSP-2468 ](https://app.qase.io/case/PRSP-2468) B: Dashboard -> Conversion rate widget -> Filters -> \"Imported tags\"\n\n[PRSP-542 ](https://app.qase.io/case/PRSP-542) B: Dashboard -> Conversion rate -> Filters -> \"Labels\"\n\n[PRSP-645 ](https://app.qase.io/case/PRSP-645) B: Dashboard -> Conversion rate -> Filters ->\"Reset to default\"\n\n[PRSP-2817 ](https://app.qase.io/case/PRSP-2817) B: Dashboard -> Conversion rate -> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page\n\n[PRSP-2220 ](https://app.qase.io/case/PRSP-2220) B: Datafeeds -> Disable GA without dynamic tags (Admin/RA)"
		},
		{
			"name": "Google analytics widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Switch into account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get feed, check GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"if (jsonData.feed && jsonData.feed.hasOwnProperty('id')) {",
									"    pm.test(\"Test GA\", function () {",
									"        if (jsonData.feed.ga_data && jsonData.feed.ga_data.hasOwnProperty('enableGa')) {",
									"            pm.collectionVariables.set(\"FeedID\", jsonData.feed.id);",
									"            pm.collectionVariables.set(\"FeedName\", jsonData.feed.name);",
									"            pm.collectionVariables.set(\"FeedCount\", jsonData.feed.count);",
									"            if (jsonData.feed.ga_data.enableGa === false) {",
									"                pm.test(\"GA is disabled\");",
									"                postman.setNextRequest(\"PRSP-2527 Enable GA\");",
									"            } else if (jsonData.feed.ga_data.enableGa === true) {",
									"                pm.test(\"GA is enabled\");",
									"                postman.setNextRequest(\"PRSP-548 Create Google analytics widget\");",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    pm.test(jsonData.message, function () {",
									"        postman.setNextRequest(null);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2527 Enable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": true,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is enabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-548 Create Google analytics widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widgets were successfully created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profit\": 0,\n    \"welcome\": 0,\n    \"new_prices\": 0,\n    \"gross_margin\": 0,\n    \"stock_status\": 0,\n    \"price_changes\": 0,\n    \"price_position\": 0,\n    \"conversion_rate\": 0,\n    \"inventory_value\": 0,\n    \"top_competitors\": 0,\n    \"google_analytics\": 1,\n    \"selected_domains\": 0,\n    \"competitor_activity\": 0,\n    \"price_history_chart\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/multiple",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get widget ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgetsData = [\r",
									"    { widgetType: 'google_analytics', position: 0 }\r",
									"];\r",
									"function createWidgetTest(widgetData) {\r",
									"    pm.test(widgetData.widgetType, function () {\r",
									"        pm.expect(jsonData[widgetData.position].widget_type).to.eql(widgetData.widgetType);\r",
									"        pm.expect(jsonData[widgetData.position].position).to.eql(widgetData.position);\r",
									"    });\r",
									"    pm.test(widgetData.widgetType + \"ID received successful\", function () {\r",
									"        if (pm.response.code === 200) {\r",
									"            pm.collectionVariables.set(widgetData.widgetType + \"ID\", jsonData[widgetData.position].id);\r",
									"            postman.setNextRequest(\"PRSP-1476 Create tag\");\r",
									"        }\r",
									"    });\r",
									"}\r",
									"widgetsData.forEach(createWidgetTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1476 Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
									"if (pm.collectionVariables.get(\"TagID\")) {",
									"    pm.test(jsonData.message, function () {",
									"        pm.expect(jsonData.data.name).to.eql(\"Test for Postman\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test for Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1434 Apply tags to selected products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isExactMatch\": false,\n    \"productIds\": [\n        2858546,\n        2858545\n    ],\n    \"productLabelIds\": [\n        {{TagID}}\n    ],\n    \"search\": \"\",\n    \"selectedAll\": false,\n    \"unCheckedProductIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/add-relations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"add-relations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1690 Turn on Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1414 Create Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"DynamicTagID\", jsonData.tag.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"max\",\r\n                \"values\": {\r\n                    \"max\": 1000\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"facets = jsonData.facets;\r",
									"pm.test(\"Brands received successful\", function () {\r",
									"    pm.collectionVariables.set(\"Brand1ID\", facets.brands[0].id);\r",
									"    pm.collectionVariables.set(\"Brand2ID\", facets.brands[1].id);\r",
									"});\r",
									"pm.test(\"Product types received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ProductType1ID\", facets.productTypes[0].id);\r",
									"    pm.collectionVariables.set(\"ProductType2ID\", facets.productTypes[1].id);\r",
									"});\r",
									"pm.test(\"Custom labels received successful\", function () {\r",
									"    pm.collectionVariables.set(\"CustomLabel1ID\", facets.customLabels[1].id);\r",
									"    pm.collectionVariables.set(\"CustomLabel2ID\", facets.customLabels[2].id);\r",
									"});\r",
									"pm.test(\"Imported tags received successful\", function () {\r",
									"    pm.collectionVariables.set(\"ImportedTag1ID\", facets.importedTags[0].id);\r",
									"    pm.collectionVariables.set(\"ImportedTag2ID\", facets.importedTags[1].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domainIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"subTitle\": \"\",\r\n    \"competitorsStockStatus\": [],\r\n    \"origin\": null,\r\n    \"matchesFilter\": \"all\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/facets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"facets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-551 Edit Google analytics widget by Brand 1 and Brand 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\"),pm.collectionVariables.get(\"Brand2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}},\n            {{Brand2ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-551 Edit Google analytics widget by Brand 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"facets = jsonData.facets;",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.brandsIds).to.eql([pm.collectionVariables.get(\"Brand1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"brandsIds\": [\n            {{Brand1ID}}\n        ],\n        \"origin\": \"brandsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-552 Edit Google analytics widget by Product type 1 and Product type 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType1ID\"), pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType1ID}},\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-552 Edit Google analytics widget by Product types 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.productTypesIds).to.eql([pm.collectionVariables.get(\"ProductType2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"productTypesIds\": [\n            {{ProductType2ID}}\n        ],\n        \"origin\": \"productTypesIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-553 Edit Google analytics widget by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.labelsIds).to.eql([pm.collectionVariables.get(\"TagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"labelsIds\": [\n            {{TagID}}\n        ],\n        \"origin\": \"labelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1013 Edit Google analytics widget by Dynamic Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.dynamicTagsIds).to.eql([pm.collectionVariables.get(\"DynamicTagID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"dynamicTagsIds\": [\n            {{DynamicTagID}}\n        ],\n        \"origin\": \"dynamicTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2469 Edit Google analytics widget by Imported tag 1 and Imported tag 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\"),pm.collectionVariables.get(\"ImportedTag2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}},\n            {{ImportedTag2ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2469 Edit Google analytics widget by Imported tag 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.importedTagsIds).to.eql([pm.collectionVariables.get(\"ImportedTag1ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"importedTagsIds\": [\n            {{ImportedTag1ID}}\n        ],\n        \"origin\": \"importedTagsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-554 Edit Google analytics widget by Custom label 1 and Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel1ID\"), pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel1ID}},\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-554 Edit Google analytics widget by Custom label 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.eql([pm.collectionVariables.get(\"CustomLabel2ID\")]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"facets\": {\n        \"customLabelsIds\": [\n            {{CustomLabel2ID}}\n        ],\n        \"origin\": \"customLabelsIds\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-555 Reset to default Google analytics widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.widget.params.customLabelsIds).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"mainFilters\": null,\r\n        \"brandsIds\": [],\r\n        \"productTypesIds\": [],\r\n        \"labelsIds\": [],\r\n        \"dynamicTagsIds\": [],\r\n        \"customLabelsIds\": [],\r\n        \"importedTagsIds\": [],\r\n        \"origin\": null,\r\n        \"customFilters\": null,\r\n        \"domainsIds\": null,\r\n        \"competitorsStockStatus\": []\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/google-analytics/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"google-analytics",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2818 Delete Google analytics widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{google_analyticsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{google_analyticsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check no widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body is an empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1445 Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"product-labels",
								"{{TagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-458 Delete Dynamic Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"dynamic-tag",
								"{{DynamicTagID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1691 Turn off the Dynamic Tags page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"exclude_domains\": [],\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": false\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2220 Disable GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{FeedID}},\n    \"url\": null,\n    \"link\": null,\n    \"name\": \"{{FeedName}}\",\n    \"note\": null,\n    \"count\": {{FeedCount}},\n    \"status\": \"Scraped successfully\",\n    \"ga_data\": {\n        \"viewId\": null,\n        \"apiType\": \"UA\",\n        \"enableGa\": false,\n        \"propertyId\": null,\n        \"compareField\": \"gtin\",\n        \"cronUpdateType\": \"mockData\",\n        \"customApiField\": false,\n        \"compareApiField\": \"ga:productSku\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/save-google-analytics/{{FeedID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"save-google-analytics",
								"{{FeedID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check GA OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"GA is disabled\", function () {",
									"    pm.expect(jsonData.feed.ga_data.enableGa).to.be.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/feed",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"feed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-2527 ](https://app.qase.io/case/PRSP-2527) B: Datafeeds -> Enable GA and cron \"Mock testing data\" (Admin/RA)\n\n[PRSP-548 ](https://app.qase.io/case/PRSP-548) B: Dashboard -> Google Analytics widget -> Add\n\n[PRSP-1476](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1434](https://app.qase.io/case/PRSP-1434) B: Product list -> Select action -> Tags -> Edit tags -> Apply tags to selected products\n\n[PRSP-1690](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-551 ](https://app.qase.io/case/PRSP-551) B: Dashboard -> Google Analytics widget -> Filters ->\"Brands\"\n\n[PRSP-552 ](https://app.qase.io/case/PRSP-552) B: Dashboard -> Google Analytics widget -> Filters-> \"Product Types\"\n\n[PRSP-1013 ](https://app.qase.io/case/PRSP-1013) B: Dashboard -> Google Analytics widget -> Filters-> \"Dynamic Tags\"\n\n[PRSP-2469 ](https://app.qase.io/case/PRSP-2469) B: Dashboard -> Google Analytics widget -> Filters -> \"Imported tags\"\n\n[PRSP-554 ](https://app.qase.io/case/PRSP-554) B: Dashboard -> Google Analytics widget -> Filters-> \"Labels\"\n\n[PRSP-555 ](https://app.qase.io/case/PRSP-555) B: Dashboard -> Google Analytics widget -> Filters-> Reset to default\n\n[PRSP-2818 ](https://app.qase.io/case/PRSP-2818) B: Dashboard -> Google Analytics widget -> Delete\n\n[PRSP-1445](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-458](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page\n\n[PRSP-2220 ](https://app.qase.io/case/PRSP-2220) B: Datafeeds -> Disable GA without dynamic tags (Admin/RA)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "EmailAdmin",
			"value": "",
			"type": "string"
		},
		{
			"key": "PasswordAdmin",
			"value": "123456789",
			"type": "string"
		},
		{
			"key": "AccountID",
			"value": "10984",
			"type": "string"
		},
		{
			"key": "FeedID",
			"value": ""
		},
		{
			"key": "FeedName",
			"value": ""
		},
		{
			"key": "FeedCount",
			"value": ""
		},
		{
			"key": "welcomeID",
			"value": ""
		},
		{
			"key": "price_positionID",
			"value": ""
		},
		{
			"key": "selected_domainsID",
			"value": ""
		},
		{
			"key": "gross_marginID",
			"value": ""
		},
		{
			"key": "price_history_chartID",
			"value": ""
		},
		{
			"key": "competitor_activityID",
			"value": ""
		},
		{
			"key": "new_pricesID",
			"value": ""
		},
		{
			"key": "stock_statusID",
			"value": ""
		},
		{
			"key": "inventory_valueID",
			"value": ""
		},
		{
			"key": "conversion_rateID",
			"value": ""
		},
		{
			"key": "profitID",
			"value": ""
		},
		{
			"key": "google_analyticsID",
			"value": ""
		},
		{
			"key": "top_competitorsID",
			"value": ""
		},
		{
			"key": "price_changesID",
			"value": ""
		},
		{
			"key": "BrandID",
			"value": ""
		},
		{
			"key": "DomainID",
			"value": ""
		},
		{
			"key": "AdminUserID",
			"value": ""
		},
		{
			"key": "Account2ID",
			"value": "11078",
			"type": "string"
		},
		{
			"key": "Feed2ID",
			"value": ""
		},
		{
			"key": "Feed2Name",
			"value": ""
		},
		{
			"key": "Feed2Count",
			"value": ""
		},
		{
			"key": "Webshop2ID",
			"value": ""
		},
		{
			"key": "MaxBrandID",
			"value": ""
		},
		{
			"key": "MaxBrandCount",
			"value": ""
		},
		{
			"key": "TagID",
			"value": ""
		},
		{
			"key": "AccountName",
			"value": ""
		},
		{
			"key": "DynamicTagID",
			"value": ""
		},
		{
			"key": "ProductType1ID",
			"value": ""
		},
		{
			"key": "ProductType2ID",
			"value": ""
		},
		{
			"key": "CustomLabel1ID",
			"value": ""
		},
		{
			"key": "CustomLabel2ID",
			"value": ""
		},
		{
			"key": "ImportedTag1ID",
			"value": ""
		},
		{
			"key": "ImportedTag2ID",
			"value": ""
		},
		{
			"key": "ProductType1Count",
			"value": ""
		},
		{
			"key": "ProductType2Count",
			"value": ""
		},
		{
			"key": "TagCount",
			"value": ""
		},
		{
			"key": "DynamicTagCount",
			"value": ""
		},
		{
			"key": "TagAndDynamicTagCount",
			"value": ""
		},
		{
			"key": "ImportedTag1Count",
			"value": ""
		},
		{
			"key": "ImportedTag2Count",
			"value": ""
		},
		{
			"key": "CustomLabel1Count",
			"value": ""
		},
		{
			"key": "CustomLabel2Count",
			"value": ""
		},
		{
			"key": "CompetitorStockFilter1Count",
			"value": ""
		},
		{
			"key": "CompetitorStockFilter2Count",
			"value": ""
		},
		{
			"key": "Brand1ID",
			"value": ""
		},
		{
			"key": "Brand2ID",
			"value": ""
		},
		{
			"key": "Brand1Count",
			"value": ""
		},
		{
			"key": "Brand2Count",
			"value": ""
		},
		{
			"key": "SeveralParameters1Count",
			"value": ""
		},
		{
			"key": "SeveralParameters2Count",
			"value": ""
		},
		{
			"key": "SeveralParameters3Count",
			"value": ""
		},
		{
			"key": "AllProductsWithМatchesCount",
			"value": ""
		},
		{
			"key": "SeveralParametersCount",
			"value": ""
		},
		{
			"key": "AllProductsWithGrossMargin",
			"value": ""
		},
		{
			"key": "ProductPriceHistoryDefaultCount",
			"value": ""
		},
		{
			"key": "Product1ID",
			"value": ""
		},
		{
			"key": "Product2ID",
			"value": ""
		},
		{
			"key": "Product3ID",
			"value": ""
		}
	]
}