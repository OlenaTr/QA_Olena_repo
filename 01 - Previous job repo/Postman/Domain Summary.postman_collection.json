{
	"info": {
		"_postman_id": "75b9ea0f-f22d-448e-8f21-64f187acddce",
		"name": "Domain Summary",
		"description": "На DS странице создаем дефолтные виджеты, также проверяем, что виджеты не создаются на дашборде.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29429126",
		"_collection_link": "https://priceshape-qa-team.postman.co/workspace/Priceshape-QA-team~d7aa963c-2715-492c-a94f-33bcfc083d8c/collection/29403567-75b9ea0f-f22d-448e-8f21-64f187acddce?action=share&source=collection_link&creator=29429126"
	},
	"item": [
		{
			"name": "Generate default widgets",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Switch to account successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1688 Turn on Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
									"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1743 Generate DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-domain-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"price-leaders\", position: 5 },\r",
									"    { type: \"domain-index\", position: 6 }\r",
									"];\r",
									"for (var i = 0; i < widgets.length; i++) {\r",
									"    var widget = widgets[i];\r",
									"    pm.test(widget.type + \" widget has correct properties\", function () {\r",
									"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
									"        pm.expect(currentWidget).not.to.be.undefined;\r",
									"        pm.expect(currentWidget.page).to.eql('domain');\r",
									"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
									"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
									"        if (widget.fields) {\r",
									"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
									"        }\r",
									"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
									"        if (currentWidget.params.showInDashboard = undefined) {\r",
									"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
									"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
									"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"pm.test(\"Get DsWidgetId\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === \"price-leaders\");\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"DsWidgetId\", dsWidget.id);\r",
									"            console.log(\"DsWidgetId: \" + pm.collectionVariables.get(\"DsWidgetId\"));\r",
									"            postman.setNextRequest(\"PRSP-625 Delete DS widget\");\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete DS widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{DsWidgetId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{DsWidgetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"domain-index\", position: 6 }\r",
									"];\r",
									"for (var i = 0; i < widgets.length; i++) {\r",
									"    var widget = widgets[i];\r",
									"    pm.test(\"Widget \" + widget.type + \" has correct properties\", function () {\r",
									"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
									"        pm.expect(currentWidget).not.to.be.undefined;\r",
									"        pm.expect(currentWidget.page).to.eql('domain');\r",
									"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
									"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
									"        if (widget.fields) {\r",
									"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
									"        }\r",
									"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
									"        if (currentWidget.params.showInDashboard = undefined) {\r",
									"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
									"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
									"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1743 Generate DS widgets again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-domain-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"domain-index\", position: 6 },\r",
									"    { type: \"price-leaders\", position: 7 }\r",
									"];\r",
									"for (var i = 0; i < widgets.length; i++) {\r",
									"    var widget = widgets[i];\r",
									"    pm.test(\"Widget \" + widget.type + \" has correct properties\", function () {\r",
									"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
									"        pm.expect(currentWidget).not.to.be.undefined;\r",
									"        pm.expect(currentWidget.page).to.eql('domain');\r",
									"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
									"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
									"        if (widget.fields) {\r",
									"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
									"        }\r",
									"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
									"        if (currentWidget.params.showInDashboard = undefined) {\r",
									"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
									"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
									"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"pm.test('Get MainWidgetID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get priceLeaderID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get indexHistoryID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get customizableID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Get top5ProductsID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
									"\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5PriceLeaderMultiID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5RedProductsID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5Products widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5ProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5PriceLeaderMultiID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5RedProducts widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5RedProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete priceLeader widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-621 Delete indexHistory widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-626 Delete customizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{customizableID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete domain widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1689 Turn off the Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
									"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "Export",
					"item": [
						{
							"name": "Log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch to account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Switch to account successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
											"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
											"    pm.test(\"Domain Summary page turn on successful\", function () {",
											"        pm.response.to.have.status(200);",
											"        console.log(\"Test passed\");",
											"    });",
											"} else {",
											"    pm.test(\"Domain Summary page turn on failed\", function () {",
											"        console.log(\"Test failed\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    postman.setNextRequest(\"Get MainWidgetID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MainWidgetID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test('Get MainWidgetID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get priceLeaderID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get indexHistoryID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get customizableID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test(\"Get top5ProductsID\", function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
											"\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get top5PriceLeaderMultiID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get top5RedProductsID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-2261 Export CSV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var currentDate = getCurrentDate();\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Checking the value 'file'\", function () {\r",
											"    var collectionVariable = pm.collectionVariables.get(\"AdminUserID\");\r",
											"    pm.expect(jsonData[\"file\"]).to.equal(\"export_widget/\" + collectionVariable + \"/\" + currentDate + \".csv\");\r",
											"});\r",
											"pm.test(\"Checking the date format\", function () {\r",
											"    var dateValue = jsonData[\"file\"].match(/\\d{4}-\\d{2}-\\d{2}/);\r",
											"    pm.expect(dateValue[0]).to.equal(currentDate);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"csv\");\r",
											"});\r",
											"function getCurrentDate() {\r",
											"    var today = new Date();\r",
											"    var year = today.getFullYear();\r",
											"    var month = (today.getMonth() + 1).toString().padStart(2, \"0\");\r",
											"    var day = today.getDate().toString().padStart(2, \"0\");\r",
											"    return year + \"-\" + month + \"-\" + day;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"csv\",\r\n    \"domainIds\": [\r\n        {{twoDomainIds}}\r\n    ],\r\n    \"order_dir\": \"desc\",\r\n    \"order_by\": \"products\",\r\n    \"page\": \"domainSummaryPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-2263 Export EXCEL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var currentDate = getCurrentDate();\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Checking the value 'file'\", function () {\r",
											"    var collectionVariable = pm.collectionVariables.get(\"AdminUserID\");\r",
											"    pm.expect(jsonData[\"file\"]).to.equal(\"export_widget/\" + collectionVariable + \"/\" + currentDate + \".xlsx\");\r",
											"});\r",
											"pm.test(\"Checking the date format\", function () {\r",
											"    var dateValue = jsonData[\"file\"].match(/\\d{4}-\\d{2}-\\d{2}/);\r",
											"    pm.expect(dateValue[0]).to.equal(currentDate);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"xlsx\");\r",
											"});\r",
											"function getCurrentDate() {\r",
											"    var today = new Date();\r",
											"    var year = today.getFullYear();\r",
											"    var month = (today.getMonth() + 1).toString().padStart(2, \"0\");\r",
											"    var day = today.getDate().toString().padStart(2, \"0\");\r",
											"    return year + \"-\" + month + \"-\" + day;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"excel\",\r\n    \"domainIds\": [\r\n        {{twoDomainIds}}\r\n    ],\r\n    \"order_dir\": \"desc\",\r\n    \"order_by\": \"products\",\r\n    \"page\": \"domainSummaryPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-2262 Export PDF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var currentDate = getCurrentDate();\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Checking the value 'file'\", function () {\r",
											"    var collectionVariable = pm.collectionVariables.get(\"AdminUserID\");\r",
											"    pm.expect(jsonData[\"file\"]).to.equal(\"export_widget_pdf/\" + collectionVariable + \"/\" + currentDate + \".pdf\");\r",
											"});\r",
											"pm.test(\"Checking the date format\", function () {\r",
											"    var dateValue = jsonData[\"file\"].match(/\\d{4}-\\d{2}-\\d{2}/);\r",
											"    pm.expect(dateValue[0]).to.equal(currentDate);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"pdf\");\r",
											"});\r",
											"function getCurrentDate() {\r",
											"    var today = new Date();\r",
											"    var year = today.getFullYear();\r",
											"    var month = (today.getMonth() + 1).toString().padStart(2, \"0\");\r",
											"    var day = today.getDate().toString().padStart(2, \"0\");\r",
											"    return year + \"-\" + month + \"-\" + day;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const currentDate = new Date();\r",
											"const twoWeeksAgoDate = new Date(currentDate);\r",
											"twoWeeksAgoDate.setDate(currentDate.getDate() - 14);\r",
											"const startDatePdf = `${twoWeeksAgoDate.getDate()}/${twoWeeksAgoDate.getMonth() + 1}/${twoWeeksAgoDate.getFullYear()}`;\r",
											"const endDatePdf = `${currentDate.getDate()}/${currentDate.getMonth() + 1}/${currentDate.getFullYear()}`;\r",
											"const startDayPdf = `${twoWeeksAgoDate.getFullYear()}-${twoWeeksAgoDate.getMonth() + 1}-${twoWeeksAgoDate.getDate()}`;\r",
											"const endDayPdf = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`;\r",
											"pm.collectionVariables.set('start_date_pdf', startDatePdf);\r",
											"pm.collectionVariables.set('end_date_pdf', endDatePdf);\r",
											"pm.collectionVariables.set('start_day_pdf', startDayPdf);\r",
											"pm.collectionVariables.set('end_day_pdf', endDayPdf);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"pdf\",\r\n    \"domainIds\": [\r\n        {{twoDomainIds}}\r\n    ],\r\n    \"order_dir\": \"desc\",\r\n    \"order_by\": \"products\",\r\n    \"priceLeaderSelectedDomainIds\": [\r\n        {{twoDomainIds}}\r\n    ],\r\n    \"indexHistorySelectedDomainIds\": [\r\n        {{twoDomainIds}}\r\n    ],\r\n    \"price_leader\": {\r\n        \"start_date\": \"{{start_date_pdf}}\",\r\n        \"end_date\": \"{{end_date_pdf}}\",\r\n        \"start_day\": \"{{start_day_pdf}}\",\r\n        \"end_day\": \"{{end_day_pdf}}\",\r\n        \"type\": \"solo\",\r\n        \"view\": \"number\"\r\n    },\r\n    \"index_history\": {\r\n        \"start_date\": \"{{start_date_pdf}}\",\r\n        \"end_date\": \"{{end_date_pdf}}\",\r\n        \"start_day\": \"{{start_day_pdf}}\",\r\n        \"end_day\": \"{{end_day_pdf}}\"\r\n    },\r\n    \"page\": \"domainSummaryPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1760 Export CSV - one domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"const UserId = pm.collectionVariables.get(\"AdminUserID\");\r",
											"const dName = pm.collectionVariables.get(\"domainName\");\r",
											"const currentDate = new Date().toISOString().slice(0, 10);\r",
											"const expectedFileStructure = `export_widget/${UserId}/${dName.replace('.', '_')}_\\\\d{4}-\\\\d{2}-\\\\d{2}.csv`;\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"csv\");\r",
											"});\r",
											"pm.test(\"Checking the parameter 'file'\", function () {\r",
											"    const file = jsonData.file;\r",
											"    pm.expect(file).to.match(new RegExp(`^${expectedFileStructure}$`));\r",
											"    pm.expect(file).to.match(new RegExp(`${currentDate}\\.csv$`));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const currDate = new Date().toISOString();\r",
											"const currentDate = new Date();\r",
											"const thirtyDaysAgo = new Date(currentDate);\r",
											"thirtyDaysAgo.setDate(currentDate.getDate() - 30);\r",
											"const year = thirtyDaysAgo.getFullYear();\r",
											"const month = (thirtyDaysAgo.getMonth() + 1).toString().padStart(2, '0');\r",
											"const day = thirtyDaysAgo.getDate().toString().padStart(2, '0');\r",
											"const startDay = `${year}-${month}-${day}`;\r",
											"const yesterday = new Date();\r",
											"yesterday.setDate(yesterday.getDate() - 1);\r",
											"const endDay = yesterday.toISOString().slice(0, 10);\r",
											"pm.collectionVariables.set(\"historyDate\", currDate);\r",
											"pm.collectionVariables.set('start_day', startDay);\r",
											"pm.collectionVariables.set('end_day', endDay);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"csv\",\r\n    \"domainIds\": [\r\n        {{oneDomainIds}}\r\n    ],\r\n    \"widgetId\": {{MainWidgetID}},\r\n    \"start_day\": \"{{start_day}}\",\r\n    \"end_day\": \"{{end_day}}\",\r\n    \"historyDate\": \"{{historyDate}}\",\r\n    \"page\": \"domainSummaryInfoPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1761 Export EXCEL - one domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"const UserId = pm.collectionVariables.get(\"AdminUserID\");\r",
											"const dName = pm.collectionVariables.get(\"domainName\");\r",
											"const currentDate = new Date().toISOString().slice(0, 10);\r",
											"const expectedFileStructure = `export_widget/${UserId}/${dName.replace('.', '_')}_\\\\d{4}-\\\\d{2}-\\\\d{2}.xlsx`;\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"xlsx\");\r",
											"});\r",
											"pm.test(\"Checking the parameter 'file'\", function () {\r",
											"    const file = jsonData.file;\r",
											"    pm.expect(file).to.match(new RegExp(`^${expectedFileStructure}$`));\r",
											"    pm.expect(file).to.match(new RegExp(`${currentDate}\\.xlsx$`));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const currDate = new Date().toISOString();\r",
											"const currentDate = new Date();\r",
											"const thirtyDaysAgo = new Date(currentDate);\r",
											"thirtyDaysAgo.setDate(currentDate.getDate() - 30);\r",
											"const year = thirtyDaysAgo.getFullYear();\r",
											"const month = (thirtyDaysAgo.getMonth() + 1).toString().padStart(2, '0');\r",
											"const day = thirtyDaysAgo.getDate().toString().padStart(2, '0');\r",
											"const startDay = `${year}-${month}-${day}`;\r",
											"const yesterday = new Date();\r",
											"yesterday.setDate(yesterday.getDate() - 1);\r",
											"const endDay = yesterday.toISOString().slice(0, 10);\r",
											"pm.collectionVariables.set(\"historyDate\", currDate);\r",
											"pm.collectionVariables.set('start_day', startDay);\r",
											"pm.collectionVariables.set('end_day', endDay);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"excel\",\r\n    \"domainIds\": [\r\n        {{oneDomainIds}}\r\n    ],\r\n    \"widgetId\": {{MainWidgetID}},\r\n    \"start_day\": \"{{start_day}}\",\r\n    \"end_day\": \"{{end_day}}\",\r\n    \"historyDate\": \"{{historyDate}}\",\r\n    \"page\": \"domainSummaryInfoPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1762 Export PDF - one domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"const UserId = pm.collectionVariables.get(\"AdminUserID\");\r",
											"const dName = pm.collectionVariables.get(\"domainName\");\r",
											"const currentDate = new Date().toISOString().slice(0, 10);\r",
											"const expectedFileStructure = `export_widget_pdf/${UserId}/${dName.replace('.', '_')}_\\\\d{4}-\\\\d{2}-\\\\d{2}.pdf`;\r",
											"pm.test(\"Checking status\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status).to.equal(200);\r",
											"});\r",
											"pm.test(\"Сhecking the file format\", function () {\r",
											"    var fileExtension = jsonData[\"file\"].split(\".\")[1];\r",
											"    pm.expect(fileExtension).to.equal(\"pdf\");\r",
											"});\r",
											"pm.test(\"Checking the parameter 'file'\", function () {\r",
											"    const file = jsonData.file;\r",
											"    pm.expect(file).to.match(new RegExp(`^${expectedFileStructure}$`));\r",
											"    pm.expect(file).to.match(new RegExp(`${currentDate}\\.pdf$`));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const currDate = new Date().toISOString();\r",
											"const currentDate = new Date();\r",
											"const thirtyDaysAgo = new Date(currentDate);\r",
											"thirtyDaysAgo.setDate(currentDate.getDate() - 30);\r",
											"const year = thirtyDaysAgo.getFullYear();\r",
											"const month = (thirtyDaysAgo.getMonth() + 1).toString().padStart(2, '0');\r",
											"const day = thirtyDaysAgo.getDate().toString().padStart(2, '0');\r",
											"const startDay = `${year}-${month}-${day}`;\r",
											"const yesterday = new Date();\r",
											"yesterday.setDate(yesterday.getDate() - 1);\r",
											"const endDay = yesterday.toISOString().slice(0, 10);\r",
											"pm.collectionVariables.set(\"historyDate\", currDate);\r",
											"pm.collectionVariables.set('start_day', startDay);\r",
											"pm.collectionVariables.set('end_day', endDay);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"pdf\",\r\n    \"domainIds\": [\r\n        {{oneDomainIds}}\r\n    ],\r\n    \"widgetId\": {{MainWidgetID}},\r\n    \"start_day\": \"{{start_day}}\",\r\n    \"end_day\": \"{{end_day}}\",\r\n    \"historyDate\": \"{{historyDate}}\",\r\n    \"stockStatusWidget\": {\r\n        \"series\": [\r\n            \"inStock\",\r\n            \"inStockAverage\",\r\n            \"outOfStock\",\r\n            \"outOfStockAverage\"\r\n        ]\r\n    },\r\n    \"priceLeadersWidget\": {\r\n        \"view\": \"number\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"page\": \"domainSummaryInfoPage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-2261 ](https://app.qase.io/case/PRSP-2261) B: Main widget -> Export \"CSV\" -> Check file download and check result (date)\n\n[PRSP-2263 ](https://app.qase.io/case/PRSP-2263) B: Main widget -> Export \"EXCEL\"-> Check file download and check result (date)\n\n[PRSP-2262 ](https://app.qase.io/case/PRSP-2262) B: Main widget -> Export \"PDF\" -> Check file download and check result (date)\n\n[PRSP-1760 ](https://app.qase.io/case/PRSP-1760) B: Individual domain -> Export domain summary -> CSV\n\n[PRSP-1761 ](https://app.qase.io/case/PRSP-1761) B: Individual domain -> Export domain summary -> EXCEL\n\n[PRSP-1762 ](https://app.qase.io/case/PRSP-1762) B: Individual domain -> Export domain summary -> PDF\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621 ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
				},
				{
					"name": "Check link download (Excel)",
					"item": [
						{
							"name": "Log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch into account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Switch to account successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
											"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
											"    pm.test(\"Domain Summary page turn on successful\", function () {",
											"        pm.response.to.have.status(200);",
											"        console.log(\"Test passed\");",
											"    });",
											"} else {",
											"    pm.test(\"Domain Summary page turn on failed\", function () {",
											"        console.log(\"Test failed\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MainWidgetID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test('Get MainWidgetID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get priceLeaderID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get indexHistoryID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get customizableID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test(\"Get top5ProductsID\", function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
											"",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5PriceLeaderMultiID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5RedProductsID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET MAIN WIDGET Domains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =pm.response.json();",
											"pm.collectionVariables.set(\"DomainSummaryDomainIDS\", jsonData.domain_summary_domain_ids);",
											"if (pm.collectionVariables.get(\"DomainSummaryDomainIDS\")) {",
											"    pm.test(\"DomainSummaryDomainIDS received successfully\", function () {",
											"        pm.expect(jsonData.domain_summary_domain_ids).to.eql(pm.collectionVariables.get(\"DomainSummaryDomainIDS\"));",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export Excel file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"File\", jsonData.file);",
											"if (pm.collectionVariables.get(\"File\")) {",
											"    pm.test(\"Export file received succesfully\", function () {",
											"        postman.setNextRequest(\"PRSP-2223 Open export file\");",
											"    });",
											"} else {",
											"    pm.test(\"Value of File is null, stopping test execution\", function () {",
											"        throw new Error(\"Value of File is null\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"excel\",\n    \"order_by\": \"products\",\n    \"domainIds\": [\n        {{DomainSummaryDomainIDS}}\n    ],\n    \"order_dir\": \"desc\",\n    \"priceLeaderSelectedDomainIds\": [],\n    \"indexHistorySelectedDomainIds\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-2223 Open export file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function(){",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{File}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"download",
										"{{File}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-2223 Open export file second attempt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 403\", function(){",
											"    pm.response.to.have.status(403);",
											"} );"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{File}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"download",
										"{{File}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-2223 ](https://app.qase.io/case/PRSP-2223) B: Main widget->Export Excel->Check link download\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621 ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
				},
				{
					"name": "Check link download (CSV)",
					"item": [
						{
							"name": "Log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{EmailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch into account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Switch to account successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
											"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
											"    pm.test(\"Domain Summary page turn on successful\", function () {",
											"        pm.response.to.have.status(200);",
											"        console.log(\"Test passed\");",
											"    });",
											"} else {",
											"    pm.test(\"Domain Summary page turn on failed\", function () {",
											"        console.log(\"Test failed\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MainWidgetID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test('Get MainWidgetID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get priceLeaderID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get indexHistoryID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get customizableID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test(\"Get top5ProductsID\", function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
											"",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5PriceLeaderMultiID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5RedProductsID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET MAIN WIDGET Domains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData =pm.response.json();",
											"pm.collectionVariables.set(\"DomainSummaryDomainIDS\", jsonData.domain_summary_domain_ids);",
											"if (pm.collectionVariables.get(\"DomainSummaryDomainIDS\")) {",
											"    pm.test(\"DomainSummaryDomainIDS received successfully\", function () {",
											"        pm.expect(jsonData.domain_summary_domain_ids).to.eql(pm.collectionVariables.get(\"DomainSummaryDomainIDS\"));",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export CSV file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"File\", jsonData.file);",
											"if (pm.collectionVariables.get(\"File\")) {",
											"    pm.test(\"Export file received succesfully\", function () {",
											"        postman.setNextRequest(\"PRSP-1526 Open export file\");",
											"    });",
											"} else {",
											"    pm.test(\"Value of File is null, stopping test execution\", function () {",
											"        throw new Error(\"Value of File is null\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"csv\",\n    \"order_by\": \"products\",\n    \"domainIds\": [\n        {{DomainSummaryDomainIDS}}\n    ],\n    \"order_dir\": \"desc\",\n    \"priceLeaderSelectedDomainIds\": [],\n    \"indexHistorySelectedDomainIds\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1526 Open export file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function(){",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{File}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"download",
										"{{File}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1526 Open export file second attempt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 403\", function(){",
											"    pm.response.to.have.status(403);",
											"} );"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{File}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"download",
										"{{File}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1526 ](https://app.qase.io/case/PRSP-1526) B: Main widget->Export CSV->Check link download\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621 ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
				}
			]
		},
		{
			"name": "Main widget",
			"item": [
				{
					"name": "Edit columns -> Add / delete fields",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch to account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Switch to account successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
											"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var widgets = [",
											"    { type: \"top5\", fields: [\"products\"], position: 0 },",
											"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
											"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
											"    { type: \"domain\", position: 3 },",
											"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
											"    { type: \"price-leaders\", position: 5 },",
											"    { type: \"domain-index\", position: 6 }",
											"];",
											"for (var i = 0; i < widgets.length; i++) {",
											"    var widget = widgets[i];",
											"    pm.test(widget.type + \" widget has correct properties\", function () {",
											"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
											"        pm.expect(currentWidget).not.to.be.undefined;",
											"        pm.expect(currentWidget.page).to.eql('domain');",
											"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
											"        pm.expect(currentWidget.position).to.eql(widget.position);",
											"        if (widget.fields) {",
											"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
											"        }",
											"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
											"        if (currentWidget.params.showInDashboard = undefined) {",
											"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
											"        } else if (currentWidget.params.showInDashboard != undefined) {",
											"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
											"        }",
											"    });",
											"}",
											"pm.test('Get MainWidgetID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get priceLeaderID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get indexHistoryID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get customizableID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test(\"Get top5ProductsID\", function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
											"",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5PriceLeaderMultiID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5RedProductsID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check MainWidget fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"products\",\"price_leader_solo\",\"price_leader_multi\",\"domain_index\",\"green_products\",\"red_products\",\"in_stock\",\"out_of_stock\",\"max_dev_pos\",\"min_dev_neg\",\"price_changes\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-57 Delete MainWidget fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(jsonData.message, function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": {{AccountID}},\n    \"key\": \"columns\",\n    \"value\": [\n        \"price_leader_solo\",\n        \"price_leader_multi\",\n        \"domain_index\",\n        \"green_products\",\n        \"out_of_stock\",\n        \"max_dev_pos\",\n        \"min_dev_neg\",\n        \"price_changes\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-57 Check MainWidget fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"price_leader_solo\",\"price_leader_multi\",\"domain_index\",\"green_products\",\"out_of_stock\",\"max_dev_pos\",\"min_dev_neg\",\"price_changes\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-57 Return MainWidget fields to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(jsonData.message, function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": {{AccountID}},\n    \"key\": \"columns\",\n    \"value\": [\n        \"products\",\n        \"price_leader_solo\",\n        \"price_leader_multi\",\n        \"domain_index\",\n        \"green_products\",\n        \"red_products\",\n        \"in_stock\",\n        \"out_of_stock\",\n        \"max_dev_pos\",\n        \"min_dev_neg\",\n        \"price_changes\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-57 Check default MainWidget fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"products\",\"price_leader_solo\",\"price_leader_multi\",\"domain_index\",\"green_products\",\"red_products\",\"in_stock\",\"out_of_stock\",\"max_dev_pos\",\"min_dev_neg\",\"price_changes\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page\n\n[PRSP-57 ](https://app.qase.io/case/PRSP-57) B: Domain Summary -> Main widget -> Edit columns button"
				},
				{
					"name": "Edit columns -> Columns Drag'n'drop",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch to account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Switch to account successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
											"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var widgets = [",
											"    { type: \"top5\", fields: [\"products\"], position: 0 },",
											"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
											"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
											"    { type: \"domain\", position: 3 },",
											"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
											"    { type: \"price-leaders\", position: 5 },",
											"    { type: \"domain-index\", position: 6 }",
											"];",
											"for (var i = 0; i < widgets.length; i++) {",
											"    var widget = widgets[i];",
											"    pm.test(widget.type + \" widget has correct properties\", function () {",
											"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
											"        pm.expect(currentWidget).not.to.be.undefined;",
											"        pm.expect(currentWidget.page).to.eql('domain');",
											"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
											"        pm.expect(currentWidget.position).to.eql(widget.position);",
											"        if (widget.fields) {",
											"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
											"        }",
											"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
											"        if (currentWidget.params.showInDashboard = undefined) {",
											"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
											"        } else if (currentWidget.params.showInDashboard != undefined) {",
											"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
											"        }",
											"    });",
											"}",
											"pm.test('Get MainWidgetID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get priceLeaderID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get indexHistoryID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get customizableID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test(\"Get top5ProductsID\", function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
											"",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5PriceLeaderMultiID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
											"        }",
											"    }",
											"});",
											"pm.test('Get top5RedProductsID', function () {",
											"    if (pm.response.code === 200) {",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
											"        if (dsWidget) {",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check MainWidget fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"products\",\"price_leader_solo\",\"price_leader_multi\",\"domain_index\",\"green_products\",\"red_products\",\"in_stock\",\"out_of_stock\",\"max_dev_pos\",\"min_dev_neg\",\"price_changes\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-294,57 Change MainWidget field position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(jsonData.message, function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": {{AccountID}},\n    \"key\": \"columns\",\n    \"value\": [\n        \"price_leader_multi\",\n        \"price_leader_solo\",\n        \"green_products\",\n        \"domain_index\",\n        \"out_of_stock\",\n        \"in_stock\",\n        \"min_dev_neg\",\n        \"price_changes\",\n        \"products\",\n        \"max_dev_pos\",\n        \"red_products\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-294,57 Check MainWidget field position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"price_leader_multi\",\"price_leader_solo\",\"green_products\",\"domain_index\",\"out_of_stock\",\"in_stock\",\"min_dev_neg\",\"price_changes\",\"products\",\"max_dev_pos\",\"red_products\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-294,57 Return MainWidget field position to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(jsonData.message, function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": {{AccountID}},\n    \"key\": \"columns\",\n    \"value\": [\n        \"products\",\n        \"price_leader_solo\",\n        \"price_leader_multi\",\n        \"domain_index\",\n        \"green_products\",\n        \"red_products\",\n        \"in_stock\",\n        \"out_of_stock\",\n        \"max_dev_pos\",\n        \"min_dev_neg\",\n        \"price_changes\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-294,57 Check default MainWidget field position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"MainWidget fields checked\", function () {",
											"    pm.expect(jsonData.fields).to.eql([\"domain\",\"products\",\"price_leader_solo\",\"price_leader_multi\",\"domain_index\",\"green_products\",\"red_products\",\"in_stock\",\"out_of_stock\",\"max_dev_pos\",\"min_dev_neg\",\"price_changes\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"direction\": \"DESC\",\n    \"limit\": 100,\n    \"page\": 0,\n    \"search\": \"\",\n    \"sort\": \"matches\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-294 ](https://app.qase.io/case/PRSP-294) B: Domain summary -> Main widget -> Edit columns -> Columns Drag'n'drop\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page\n\n[PRSP-57 ](https://app.qase.io/case/PRSP-57) B: Domain Summary -> Main widget -> Edit columns button"
				},
				{
					"name": "Edit domains",
					"item": [
						{
							"name": "Log in",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Switch to account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Switch to account successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"switch-account",
										"{{AccountID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1688 Turn on Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
											"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-1743 Generate DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"generate-default-domain-widgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DS widgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var widgets = [\r",
											"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
											"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
											"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
											"    { type: \"domain\", position: 3 },\r",
											"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
											"    { type: \"price-leaders\", position: 5 },\r",
											"    { type: \"domain-index\", position: 6 }\r",
											"];\r",
											"for (var i = 0; i < widgets.length; i++) {\r",
											"    var widget = widgets[i];\r",
											"    pm.test(widget.type + \" widget has correct properties\", function () {\r",
											"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
											"        pm.expect(currentWidget).not.to.be.undefined;\r",
											"        pm.expect(currentWidget.page).to.eql('domain');\r",
											"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
											"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
											"        if (widget.fields) {\r",
											"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
											"        }\r",
											"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
											"        if (currentWidget.params.showInDashboard = undefined) {\r",
											"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
											"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
											"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"pm.test('Get MainWidgetID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get priceLeaderID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get indexHistoryID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get customizableID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test(\"Get top5ProductsID\", function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
											"\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get top5PriceLeaderMultiID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"pm.test('Get top5RedProductsID', function () {\r",
											"    if (pm.response.code === 200) {\r",
											"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
											"        if (dsWidget) {\r",
											"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets"
									],
									"query": [
										{
											"key": "page",
											"value": "domain"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-56 Edit domains (add domain)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"domain_summary_domain_ids\",\r\n    \"account_id\": {{AccountID}},\r\n    \"value\": [\r\n        {{threeDomainIds}}\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking adding domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"if (pm.expect(jsonData.total).to.eql(3)) {",
											"    pm.test(\"Domains list = 3\", function () {",
											"        pm.response.to.have.status(200);",
											"        console.log(\"Test passed\");",
											"    });",
											"} else {",
											"    pm.test(\"Domains list != 3\", function () {",
											"        console.log(\"Test failed\");",
											"    });",
											"}",
											"var domainIds = jsonData.domain_summary_domain_ids;",
											"pm.test(\"Checking array -> length = 3\", function () {",
											"    pm.expect(domainIds.length).to.eql(3);",
											"});",
											"pm.test(\"Checking value in array\", function () {",
											"    pm.expect(domainIds).to.include.members([86, 24, 17152]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-56 Edit domains (delete domain)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
											"});\r",
											"pm.test(\"Check status\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"key\": \"domain_summary_domain_ids\",\r\n    \"account_id\": {{AccountID}},\r\n    \"value\": [\r\n        {{twoDomainIds}}\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking deleting domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.total).to.eql(2)) {\r",
											"    pm.test(\"Domains list = 2\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domains list != 2\", function () {\r",
											"        console.log(\"Test failed\")\r",
											"    });\r",
											"}\r",
											"var domainIds = jsonData.domain_summary_domain_ids;\r",
											"pm.test(\"Checking array -> length = 2\", function () {\r",
											"    pm.expect(domainIds.length).to.eql(2);\r",
											"});\r",
											"pm.test(\"Checking value in array\", function () {\r",
											"    pm.expect(domainIds).to.include.members([86, 24]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"get-domain-summary",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5Products widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5ProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5PriceLeaderMultiID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-627 Delete top5RedProducts widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{top5RedProductsID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-625 Delete priceLeader widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{priceLeaderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-621 Delete indexHistory widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{indexHistoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRSP-626 Delete customizable widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{customizableID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete domain widget",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"widgets",
										"{{MainWidgetID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PRS-1689 Turn off the Domain Summary page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
											"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Test passed\");\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
											"        console.log(\"Test failed\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"accounts",
										"{{AccountID}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v2/auth/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v2",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page\n\n[PRSP-56 ](https://app.qase.io/case/PRSP-56) B: Domain Summary -> Main widget -> Edit domain button"
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "Templates",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"FeedID\", jsonData.user.current_account.feed.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{Account2ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{Account2ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check NO GS webshop",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"There no 'Google Shopping'webshop in the account\", function () {",
													"    jsonData.data.forEach(function (item) {",
													"        pm.expect(item.name).to.not.eql(\"Google Shopping\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/webshops",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"webshops"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-948 Create Google Shopping sitemap",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Created successfully');",
													"});",
													"pm.test(\"Response has required fields\", function () {",
													"    pm.response.to.have.jsonBody('data.sitemap_id');",
													"    pm.response.to.have.jsonBody('data.webshop_id');",
													"    pm.response.to.have.jsonBody('data.webshop_sitemap_id');",
													"});",
													"pm.collectionVariables.set(\"WebshopID\", jsonData.data.webshop_id);",
													"if (pm.collectionVariables.get(\"WebshopID\")) {",
													"    pm.test(\"WebshopID received successful\", () => {",
													"        console.log(\"WebshopID =\", pm.collectionVariables.get(\"WebshopID\"));",
													"    });",
													"} else {",
													"    pm.test(\"WebshopID received successful\", () => {",
													"        postman.setNextRequest(null);",
													"    });",
													"}",
													"setTimeout(function () {",
													"    postman.setNextRequest(\"PRSP 39 Add all recommendations\");",
													"}, 120000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"googleShopping\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/feeds/{{FeedID}}/create-scraper-sitemap",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"feeds",
												"{{FeedID}}",
												"create-scraper-sitemap"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP 39 Add all recommendations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Add all recommendations successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response message is 'System will add all Recommendations now, please be patient'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"System will add all Recommendations now, please be patient\");",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest(\"Check Product list, get attributes\");",
													"}, 20000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/add-all-recommendations",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"add-all-recommendations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Product list, get attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"function findMaxCountId(array) {\r",
													"    var maxCount = 0;\r",
													"    var maxCountId;\r",
													"    array.forEach(function (item) {\r",
													"        if (item.count > maxCount) {\r",
													"            maxCount = item.count;\r",
													"            maxCountId = item.id;\r",
													"        }\r",
													"    });\r",
													"    return maxCountId;\r",
													"}\r",
													"pm.collectionVariables.unset(\"DomainID\");\r",
													"pm.collectionVariables.set(\"DomainID\", findMaxCountId(jsonData.facets.domains));\r",
													"pm.collectionVariables.unset(\"BrandID\");\r",
													"pm.collectionVariables.set(\"BrandID\", findMaxCountId(jsonData.facets.brands));\r",
													"pm.collectionVariables.unset(\"ProductTypeID\");\r",
													"pm.collectionVariables.set(\"ProductTypeID\", findMaxCountId(jsonData.facets.productTypes));\r",
													"pm.test(\"Variables received successfully\", function () {\r",
													"    console.log(\"DomainID =\", pm.collectionVariables.get(\"DomainID\"));\r",
													"    console.log(\"BrandID =\", pm.collectionVariables.get(\"BrandID\"));\r",
													"    console.log(\"ProductTypeID =\", pm.collectionVariables.get(\"ProductTypeID\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"onlyFacets\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"DS widgets created successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Default widgets created successfully\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1811 Create template Temp1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Template created successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response message is 'Filter template saved'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Filter template saved\");\r",
													"});\r",
													"var userTemplates = jsonData.user.user_templates;\r",
													"var productTemplate = userTemplates[\"/domain-summary\"].find(template => template.name === \"test1 temp\");\r",
													"if (productTemplate) {\r",
													"    pm.test(\"Template 'test1 temp' is owned by Postman_admin\", function () {\r",
													"        pm.expect(productTemplate.owner).to.equal(\"Postman_admin\");\r",
													"    });\r",
													"    pm.test(\"Template 'test1 temp' has correct brandsIds\", function () {\r",
													"        pm.expect(productTemplate.filters.brandsIds).to.deep.equal([pm.collectionVariables.get(\"BrandID\")]);\r",
													"    });\r",
													"    pm.test(\"Template 'test1 temp' has correct domainsIds\", function () {\r",
													"        pm.expect(productTemplate.filters.domainsIds).to.deep.equal([pm.collectionVariables.get(\"DomainID\")]);\r",
													"    });\r",
													"    pm.test(\"Template 'test1 temp' has correct created_at date\", function () {\r",
													"        var today = new Date().toISOString().split('T')[0];\r",
													"        pm.expect(productTemplate.created_at.split(' ')[0]).to.equal(today);\r",
													"    });\r",
													"    pm.collectionVariables.unset(\"Temp1\");\r",
													"    pm.collectionVariables.set(\"Temp1\", productTemplate.id);\r",
													"    console.log(\"Temp1 =\", pm.collectionVariables.get(\"Temp1\"));\r",
													"} else {\r",
													"    pm.test(\"Template 'test1 temp' not found\", function () {\r",
													"        postman.setNextRequest(null);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"url\": \"/domain-summary\",\r\n    \"name\": \"test1 temp\",\r\n    \"filters\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ],\r\n        \"domainsIds\": [\r\n            {{DomainID}}\r\n        ]\r\n    },\r\n    \"use_auto_approve\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/save-template",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"save-template"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1812 Edit template name Temp1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Template updated successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response message is 'Filter template updated'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Filter template updated\");\r",
													"});\r",
													"var userTemplates = jsonData.user.user_templates;\r",
													"var temp1Id = pm.collectionVariables.get(\"Temp1\");\r",
													"var temp1Template = userTemplates[\"/domain-summary\"].find(template => template.id === temp1Id);\r",
													"pm.test(\"Template with Temp1 ID exists\", function () {\r",
													"    pm.expect(temp1Template).to.exist;\r",
													"});\r",
													"pm.test(\"Template with Temp1 ID has correct name\", function () {\r",
													"    pm.expect(temp1Template.name).to.equal(\"test1 template\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"url\": \"/domain-summary\",\r\n    \"name\": \"test1 template\",\r\n    \"use_auto_approve\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/update-template/{{Temp1}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"update-template",
												"{{Temp1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1476 Create tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Tag created successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response message is 'New tag added'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"New tag added\");",
													"});",
													"pm.test(\"Check if data.name is 'For delete'\", function () {",
													"    pm.expect(jsonData.data.name).to.equal(\"For delete\");",
													"});",
													"pm.collectionVariables.unset(\"TagID\");",
													"pm.collectionVariables.set(\"TagID\", jsonData.data.id);",
													"pm.test(\"TagID received successfully\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"TagID\")).to.exist;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"For delete\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/product-labels/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"product-labels",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1813 Update current template Temp1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Template updated successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response message is 'Filter template updated'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Filter template updated\");\r",
													"});\r",
													"var userTemplates = jsonData.user.user_templates;\r",
													"var temp1Id = pm.collectionVariables.get(\"Temp1\");\r",
													"var productTemplate = userTemplates[\"/domain-summary\"].find(template => template.id === temp1Id);\r",
													"if (productTemplate) {\r",
													"    pm.test(\"Template is edited by Postman_admin\", function () {\r",
													"        pm.expect(productTemplate.editor).to.equal(\"Postman_admin\");\r",
													"    });\r",
													"    pm.test(\"Template has correct brandsIds\", function () {\r",
													"        pm.expect(productTemplate.filters.brandsIds).to.deep.equal([pm.collectionVariables.get(\"BrandID\")]);\r",
													"    });\r",
													"    pm.test(\"Template has correct domainsIds\", function () {\r",
													"        pm.expect(productTemplate.filters.domainsIds).to.deep.equal([pm.collectionVariables.get(\"DomainID\")]);\r",
													"    });\r",
													"    pm.test(\"Template has correct productTypeID\", function () {\r",
													"        pm.expect(productTemplate.filters.productTypesIds).to.deep.equal([pm.collectionVariables.get(\"ProductTypeID\")]);\r",
													"    });\r",
													"    pm.test(\"Template has correct TagID\", function () {\r",
													"        pm.expect(productTemplate.filters.labelsIds).to.deep.equal([pm.collectionVariables.get(\"TagID\")]);\r",
													"    });\r",
													"    pm.test(\"Template has correct updated_at date\", function () {\r",
													"        if (productTemplate.updated_at) {\r",
													"            var today = new Date().toISOString().split('T')[0];\r",
													"            pm.expect(productTemplate.updated_at.split(' ')[0]).to.equal(today);\r",
													"        } else {\r",
													"            pm.expect(productTemplate.updated_at).to.be.null;\r",
													"        }\r",
													"    });\r",
													"} else {\r",
													"    pm.test(\"Template Temp1 not found\", function () {\r",
													"        postman.setNextRequest(null);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"url\": \"/domain-summary\",\r\n    \"name\": \"test1 template\",\r\n    \"filters\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ],\r\n        \"domainsIds\": [\r\n            {{DomainID}}\r\n        ],\r\n        \"productTypesIds\": [\r\n            {{ProductTypeID}}\r\n        ],\r\n        \"labelsIds\": [\r\n            {{TagID}}\r\n        ]\r\n    },\r\n    \"use_auto_approve\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/update-template/{{Temp1}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"update-template",
												"{{Temp1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1445 Delete tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Tag deleted successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response message is 'Tag deleted'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"Tag deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/product-labels/{{TagID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"product-labels",
												"{{TagID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-580 Check removed filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Check if labelsIds array exists in removed filters\", function () {",
													"    pm.expect(jsonData.removed_filter_items.labelsIds).to.be.an('array');",
													"    pm.expect(jsonData.removed_filter_items.labelsIds.length).to.be.greaterThan(0);",
													"});",
													"pm.test(\"Check deleted tag has the correct id and name\", function () {",
													"    var expectedTagID = pm.collectionVariables.get(\"TagID\");",
													"    pm.expect(jsonData.removed_filter_items.labelsIds[0].id).to.equal(expectedTagID);",
													"    pm.expect(jsonData.removed_filter_items.labelsIds[0].name).to.equal(\"For delete\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/get-template-data/{{Temp1}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"get-template-data",
												"{{Temp1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2123 Can`t make same name, page template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"pm.test(\"Response message is 'Template with this name is already exists'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Template with this name is already exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"url\": \"/domain-summary\",\r\n    \"name\": \"test1 template\",\r\n    \"filters\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    },\r\n    \"use_auto_approve\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/save-template",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"save-template"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1823 Can make same name diff page Temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Template created successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response message is 'Filter template saved'\", function () {\r",
													"    pm.expect(jsonData.message).to.equal(\"Filter template saved\");\r",
													"});\r",
													"var userTemplates = jsonData.user.user_templates;\r",
													"var productTemplate = userTemplates[\"/deleted-matches\"].find(template => template.name === \"test1 template\");\r",
													"if (productTemplate) {\r",
													"    pm.test(\"Template is owned by Postman_admin\", function () {\r",
													"        pm.expect(productTemplate.owner).to.equal(\"Postman_admin\");\r",
													"    });\r",
													"    pm.test(\"Template has correct brandsIds\", function () {\r",
													"        pm.expect(productTemplate.filters.brandsIds).to.deep.equal([pm.collectionVariables.get(\"BrandID\")]);\r",
													"    });\r",
													"    pm.test(\"Template has correct created_at date\", function () {\r",
													"        var today = new Date().toISOString().split('T')[0];\r",
													"        pm.expect(productTemplate.created_at.split(' ')[0]).to.equal(today);\r",
													"    });\r",
													"    pm.collectionVariables.unset(\"Temp2\");\r",
													"    pm.collectionVariables.set(\"Temp2\", productTemplate.id);\r",
													"    console.log(\"Temp2 =\", pm.collectionVariables.get(\"Temp2\"));\r",
													"} else {\r",
													"    pm.test(\"Template 'Temp2' not found\", function () {\r",
													"        postman.setNextRequest(null);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"url\": \"/deleted-matches\",\r\n    \"name\": \"test1 template\",\r\n    \"filters\": {\r\n        \"brandsIds\": [\r\n            {{BrandID}}\r\n        ]\r\n    },\r\n    \"use_auto_approve\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/save-template",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"save-template"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout successful\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailUser}}\",\n    \"password\": \"{{PasswordUser}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{Account2ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{Account2ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1821 Check templated for user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userTemplates = jsonData.user.user_templates;",
													"var temp1Id = pm.collectionVariables.get(\"Temp1\");",
													"var temp2Id = pm.collectionVariables.get(\"Temp2\");",
													"var productTemplate1 = userTemplates[\"/domain-summary\"] ? userTemplates[\"/domain-summary\"].find(template => template.id === temp1Id) : undefined;",
													"var productTemplate2 = userTemplates[\"/deleted-matches\"] ? userTemplates[\"/deleted-matches\"].find(template => template.id === temp2Id) : undefined;",
													"pm.test(\"User doesn`t see templates on DS\", function () {",
													"    pm.expect(productTemplate1).to.be.undefined;",
													"});",
													"pm.test(\"User doesn`t see templates on Deleted matches\", function () {",
													"    pm.expect(productTemplate2).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout successful\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{Account2ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{Account2ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2122 Delete temp1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Filter template deleted\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.test(\"Response message is 'Filter template deleted'\", function () {",
													"        pm.expect(jsonData.message).to.equal(\"Filter template deleted\");",
													"    });",
													"    pm.test(\"Check if user_templates exists\", function () {",
													"        pm.expect(jsonData.user.user_templates).to.be.an('object');",
													"        if (typeof jsonData.user.user_templates === 'object') {",
													"            pm.expect(jsonData.user.user_templates[\"/product-list\"]).to.not.exist;",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/remove-template/{{Temp1}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"remove-template",
												"{{Temp1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2122 Delete temp2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Filter template deleted\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response message is 'Filter template deleted'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"Filter template deleted\");",
													"});",
													"pm.test(\"Check if user_templates array exists\", function () {",
													"    pm.expect(jsonData.user.user_templates).to.be.an('array');",
													"});",
													"pm.test(\"Check if user_templates is empty\", function () {",
													"    pm.expect(jsonData.user.user_templates.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/users/remove-template/{{Temp2}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"users",
												"remove-template",
												"{{Temp2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-836 Delete webshop",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Webshop deleted'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"Webshop deleted\");",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest(\"PRSP-2697 Force Update Product List\");",
													"}, 20000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/webshops/{{WebshopID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"webshops",
												"{{WebshopID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2697 Force Update Product List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Product list will be updated soon'\", function () {",
													"    pm.expect(jsonData.message).to.equal(\"Product list will be updated soon\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/feeds/force-update-product",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"feeds",
												"force-update-product"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout successful\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-948 ](https://app.qase.io/case/PRSP-948) B: Datafeeds->\"Google Shopping with product prices\" button - (Admin)\n\n[PRSP-39 ](https://app.qase.io/case/PRSP-39) B: Recommendations-> \"Add all recommendations\" button\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1811 ](https://app.qase.io/case/PRSP-1811) B: Elements-> Filter interface ->Templates ->Create template\n\n[PRSP-1812 ](https://app.qase.io/case/PRSP-1812) B: Elements-> Filter interface ->Templates ->Edit template name\n\n[PRSP-1476 ](https://app.qase.io/case/PRSP-1476) B: Product list -> Select action -> Tags -> Edit tags -> Create new tag\n\n[PRSP-1813 ](https://app.qase.io/case/PRSP-1813) B: Elements-> Filter interface ->Templates -> Add filters to template\n\n[PRSP-1445 ](https://app.qase.io/case/PRSP-1445) B: Product list -> Select action -> Tags -> Edit tags -> Delete tag\n\n[PRSP-580 ](https://app.qase.io/case/PRSP-580) B: Elements-> Filter interface ->Templates with deleted attributes\n\n[PRSP-2123 ](https://app.qase.io/case/PRSP-2123) B: Elements-> Filter interface ->Templates -> Create new template with used name, same page\n\n[PRSP-1823 ](https://app.qase.io/case/PRSP-1823) B: Elements-> Filter interface ->Templates -> Same name, different pages.\n\n[PRSP-1821 ](https://app.qase.io/case/PRSP-1821) B: Elements-> Filter interface ->Templates -> display only for the user who created the template\n\n[PRSP-2122 ](https://app.qase.io/case/PRSP-2122) B: Elements-> Filter interface ->Templates -> Delete template\n\n[PRSP-836 ](https://app.qase.io/case/PRSP-836) B: Admin pages-> Webshops->Delete a Webshop\n\n[PRSP-2697](https://app.qase.io/case/PRSP-2697) B: Datafeeds -> Force Update Product List"
						},
						{
							"name": "Filters",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"Account3Name\", jsonData.user.current_account.name);\r",
													"    pm.collectionVariables.set(\"AdminUserID\", jsonData.user.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{Account3ID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{Account3ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var widgets = [\r",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
													"    { type: \"domain\", position: 3 },\r",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
													"    { type: \"price-leaders\", position: 5 },\r",
													"    { type: \"domain-index\", position: 6 }\r",
													"];\r",
													"for (var i = 0; i < widgets.length; i++) {\r",
													"    var widget = widgets[i];\r",
													"    pm.test(widget.type + \" widget has correct properties\", function () {\r",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
													"        pm.expect(currentWidget).not.to.be.undefined;\r",
													"        pm.expect(currentWidget.page).to.eql('domain');\r",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
													"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
													"        if (widget.fields) {\r",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
													"        }\r",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
													"        if (currentWidget.params.showInDashboard = undefined) {\r",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
													"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
													"        }\r",
													"    });\r",
													"}\r",
													"pm.test('Get MainWidgetID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test('Get priceLeaderID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test('Get indexHistoryID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test('Get customizableID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test(\"Get top5ProductsID\", function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
													"\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test('Get top5PriceLeaderMultiID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"pm.test('Get top5RedProductsID', function () {\r",
													"    if (pm.response.code === 200) {\r",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
													"        if (dsWidget) {\r",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get domains PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var domainName_1 = pm.collectionVariables.get(\"domainName_1\");\r",
													"var domainName_2 = pm.collectionVariables.get(\"domainName_2\");\r",
													"for (var i = 0; i < jsonData.facets.domains.length; i++) {\r",
													"    var domains = jsonData.facets.domains[i];\r",
													"    if (domains.name == domainName_1) {\r",
													"        var count1 = domains.count;\r",
													"        var domain1 = domains.id;\r",
													"    } if (domains.name == domainName_2) {\r",
													"        var count2 = domains.count;\r",
													"        var domain2 = domains.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"domainId_1\", domain1);\r",
													"pm.collectionVariables.set(\"domainId_2\", domain2);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"domainId_1\")).to.eql(domain1);\r",
													"    pm.expect(pm.collectionVariables.get(\"domainId_2\")).to.eql(domain2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one domain PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDomainName_1 = pm.collectionVariables.get(\"countDomainName_1\");\r",
													"pm.collectionVariables.set(\"count_d1\", jsonData.sum);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [\r\n        {{domainId_1}}\r\n    ],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two domains PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDomainName_1 = pm.collectionVariables.get(\"countDomainName_1\");\r",
													"var countDomainName_2 = pm.collectionVariables.get(\"countDomainName_2\");\r",
													"pm.collectionVariables.set(\"count_d2\", jsonData.sum);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [\r\n        {{domainId_1}},\r\n        {{domainId_2}}\r\n    ],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2942 Get domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var domainName_1 = pm.collectionVariables.get(\"domainName_1\");\r",
													"var domainName_2 = pm.collectionVariables.get(\"domainName_2\");\r",
													"for (var i = 0; i < jsonData.facets.domains.length; i++) {\r",
													"    var domains = jsonData.facets.domains[i];\r",
													"    if (domains.name == domainName_1) {\r",
													"        var count1 = domains.count;\r",
													"        var domain1 = domains.id;\r",
													"    } if (domains.name == domainName_2) {\r",
													"        var count2 = domains.count;\r",
													"        var domain2 = domains.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countDomainName_1\", count1);\r",
													"pm.collectionVariables.set(\"countDomainName_2\", count2);\r",
													"pm.collectionVariables.set(\"domainId_1\", domain1);\r",
													"pm.collectionVariables.set(\"domainId_2\", domain2);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countDomainName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countDomainName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"domainId_1\")).to.eql(domain1);\r",
													"    pm.expect(pm.collectionVariables.get(\"domainId_2\")).to.eql(domain2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2942 Filter one domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDomainName_1 = pm.collectionVariables.get(\"countDomainName_1\");\r",
													"var count_d1 = pm.collectionVariables.get(\"count_d1\");\r",
													"pm.test(\"Domain filtering is correct\", function () {\r",
													"    pm.expect(countDomainName_1).to.eql(count_d1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [\r\n        {{domainId_1}}\r\n    ],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2942 Filter two domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDomainName_1 = pm.collectionVariables.get(\"countDomainName_1\");\r",
													"var countDomainName_2 = pm.collectionVariables.get(\"countDomainName_2\");\r",
													"var count_d2 = pm.collectionVariables.get(\"count_d2\");\r",
													"pm.test(\"Domains filtering is correct\", function () {\r",
													"    pm.expect(countDomainName_1+countDomainName_2).to.eql(count_d2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [\r\n        {{domainId_1}},\r\n        {{domainId_2}}\r\n    ],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get brands PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var brandName_1 = pm.collectionVariables.get(\"brandName_1\");\r",
													"var brandName_2 = pm.collectionVariables.get(\"brandName_2\");\r",
													"var brandName_3 = pm.collectionVariables.get(\"brandName_3\");\r",
													"for (var i = 0; i < jsonData.facets.brands.length; i++) {\r",
													"    var brands = jsonData.facets.brands[i];\r",
													"    if (brands.name == brandName_1) {\r",
													"        var count1 = brands.count;\r",
													"        var brand1 = brands.id;\r",
													"    }\r",
													"    if (brands.name == brandName_2) {\r",
													"        var count2 = brands.count;\r",
													"        var brand2 = brands.id;\r",
													"    }\r",
													"    if (brands.name == brandName_3) {\r",
													"        var count3 = brands.count;\r",
													"        var brand3 = brands.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"brandId_1\", brand1);\r",
													"pm.collectionVariables.set(\"brandId_2\", brand2);\r",
													"pm.collectionVariables.set(\"brandId_3\", brand3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_1\")).to.eql(brand1);\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_2\")).to.eql(brand2);\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_3\")).to.eql(brand3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one brand PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_1 = pm.collectionVariables.get(\"countBrandName_1\");\r",
													"pm.collectionVariables.set(\"count_b1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_1}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two brands PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_1 = pm.collectionVariables.get(\"countBrandName_1\");\r",
													"var countBrandName_2 = pm.collectionVariables.get(\"countBrandName_2\");\r",
													"pm.collectionVariables.set(\"count_b2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_1}},\r\n        {{brandId_2}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No Brand PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_3 = pm.collectionVariables.get(\"countBrandName_3\");\r",
													"pm.collectionVariables.set(\"count_b3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_3}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2943 Get brands",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var brandName_1 = pm.collectionVariables.get(\"brandName_1\");\r",
													"var brandName_2 = pm.collectionVariables.get(\"brandName_2\");\r",
													"var brandName_3 = pm.collectionVariables.get(\"brandName_3\");\r",
													"for (var i = 0; i < jsonData.facets.brands.length; i++) {\r",
													"    var brands = jsonData.facets.brands[i];\r",
													"    if (brands.name == brandName_1) {\r",
													"        var count1 = brands.count;\r",
													"        var brand1 = brands.id;\r",
													"    } if (brands.name == brandName_2) {\r",
													"        var count2 = brands.count;\r",
													"        var brand2 = brands.id;\r",
													"    } if (brands.name == brandName_3) {\r",
													"        var count3 = brands.count;\r",
													"        var brand3 = brands.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countBrandName_1\", count1);\r",
													"pm.collectionVariables.set(\"countBrandName_2\", count2);\r",
													"pm.collectionVariables.set(\"countBrandName_3\", count3);\r",
													"pm.collectionVariables.set(\"brandId_1\", brand1);\r",
													"pm.collectionVariables.set(\"brandId_2\", brand2);\r",
													"pm.collectionVariables.set(\"brandId_3\", brand3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countBrandName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countBrandName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countBrandName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_1\")).to.eql(brand1);\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_2\")).to.eql(brand2);\r",
													"    pm.expect(pm.collectionVariables.get(\"brandId_3\")).to.eql(brand3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2943 Filter one brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_1 = pm.collectionVariables.get(\"countBrandName_1\");\r",
													"var count_b1 = pm.collectionVariables.get(\"count_b1\");\r",
													"pm.test(\"Brand filtering is correct\", function () {\r",
													"    pm.expect(countBrandName_1).to.eql(count_b1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_1}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2943 Filter two brands",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_1 = pm.collectionVariables.get(\"countBrandName_1\");\r",
													"var countBrandName_2 = pm.collectionVariables.get(\"countBrandName_2\");\r",
													"var count_b2 = pm.collectionVariables.get(\"count_b2\");\r",
													"pm.test(\"Brands filtering is correct\", function () {\r",
													"    pm.expect(countBrandName_1 + countBrandName_2).to.eql(count_b2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_1}},\r\n        {{brandId_2}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2943 Filter with No Brand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countBrandName_3 = pm.collectionVariables.get(\"countBrandName_3\");\r",
													"var count_b3 = pm.collectionVariables.get(\"count_b3\");\r",
													"pm.test(\"No Brand filtering is correct\", function () {\r",
													"    pm.expect(countBrandName_3).to.eql(count_b3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [\r\n        {{brandId_3}}\r\n    ],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product types PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var productTypeName_1 = pm.collectionVariables.get(\"productTypeName_1\");\r",
													"var productTypeName_2 = pm.collectionVariables.get(\"productTypeName_2\");\r",
													"var productTypeName_3 = pm.collectionVariables.get(\"productTypeName_3\");\r",
													"for (var i = 0; i < jsonData.facets.productTypes.length; i++) {\r",
													"    var productTypes = jsonData.facets.productTypes[i];\r",
													"    if (productTypes.name == productTypeName_1) {\r",
													"        var count1 = productTypes.count;\r",
													"        var type1 = productTypes.id;\r",
													"    }\r",
													"    if (productTypes.name == productTypeName_2) {\r",
													"        var count2 = productTypes.count;\r",
													"        var type2 = productTypes.id;\r",
													"    }\r",
													"    if (productTypes.name == productTypeName_3) {\r",
													"        var count3 = productTypes.count;\r",
													"        var type3 = productTypes.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"typeId_1\", type1);\r",
													"pm.collectionVariables.set(\"typeId_2\", type2);\r",
													"pm.collectionVariables.set(\"typeId_3\", type3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_1\")).to.eql(type1);\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_2\")).to.eql(type2);\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_3\")).to.eql(type3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one type PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_1 = pm.collectionVariables.get(\"countProductTypeName_1\");\r",
													"pm.collectionVariables.set(\"count_t1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_1}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"limit\": 25,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two types PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_1 = pm.collectionVariables.get(\"countProductTypeName_1\");\r",
													"var countProductTypeName_2 = pm.collectionVariables.get(\"countProductTypeName_2\");\r",
													"pm.collectionVariables.set(\"count_t2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_1}},\r\n        {{typeId_2}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No Product type PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_3 = pm.collectionVariables.get(\"countProductTypeName_3\");\r",
													"pm.collectionVariables.set(\"count_t3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_3}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2944 Get product types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var productTypeName_1 = pm.collectionVariables.get(\"productTypeName_1\");\r",
													"var productTypeName_2 = pm.collectionVariables.get(\"productTypeName_2\");\r",
													"var productTypeName_3 = pm.collectionVariables.get(\"productTypeName_3\");\r",
													"for (var i = 0; i < jsonData.facets.productTypes.length; i++) {\r",
													"    var productTypes = jsonData.facets.productTypes[i];\r",
													"    if (productTypes.name == productTypeName_1) {\r",
													"        var count1 = productTypes.count;\r",
													"        var type1 = productTypes.id;\r",
													"    } if (productTypes.name == productTypeName_2) {\r",
													"        var count2 = productTypes.count;\r",
													"        var type2 = productTypes.id;\r",
													"    } if (productTypes.name == productTypeName_3) {\r",
													"        var count3 = productTypes.count;\r",
													"        var type3 = productTypes.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countProductTypeName_1\", count1);\r",
													"pm.collectionVariables.set(\"countProductTypeName_2\", count2);\r",
													"pm.collectionVariables.set(\"countProductTypeName_3\", count3);\r",
													"pm.collectionVariables.set(\"typeId_1\", type1);\r",
													"pm.collectionVariables.set(\"typeId_2\", type2);\r",
													"pm.collectionVariables.set(\"typeId_3\", type3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countProductTypeName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countProductTypeName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countProductTypeName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_1\")).to.eql(type1);\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_2\")).to.eql(type2);\r",
													"    pm.expect(pm.collectionVariables.get(\"typeId_3\")).to.eql(type3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2944 Filter one type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_1 = pm.collectionVariables.get(\"countProductTypeName_1\");\r",
													"var count_t1 = pm.collectionVariables.get(\"count_t1\");\r",
													"pm.test(\"Product type filtering is correct\", function () {\r",
													"    pm.expect(countProductTypeName_1).to.eql(count_t1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_1}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2944 Filter two types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_1 = pm.collectionVariables.get(\"countProductTypeName_1\");\r",
													"var countProductTypeName_2 = pm.collectionVariables.get(\"countProductTypeName_2\");\r",
													"var count_t2 = pm.collectionVariables.get(\"count_t2\");\r",
													"pm.test(\"Product types filtering is correct\", function () {\r",
													"    pm.expect(countProductTypeName_1 + countProductTypeName_2).to.eql(count_t2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_1}},\r\n        {{typeId_2}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2944 Filter No product type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countProductTypeName_3 = pm.collectionVariables.get(\"countProductTypeName_3\");\r",
													"var count_t3 = pm.collectionVariables.get(\"count_t3\");\r",
													"pm.test(\"No Product type filtering is correct\", function () {\r",
													"    pm.expect(countProductTypeName_3).to.eql(count_t3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [\r\n        {{typeId_3}}\r\n    ],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var tagName_1 = pm.collectionVariables.get(\"tagName_1\");\r",
													"var tagName_2 = pm.collectionVariables.get(\"tagName_2\");\r",
													"var tagName_3 = pm.collectionVariables.get(\"tagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.labels.length; i++) {\r",
													"    var labels = jsonData.facets.labels[i];\r",
													"    if (labels.name == tagName_1) {\r",
													"        var count1 = labels.count;\r",
													"        var tag1 = labels.id;\r",
													"    }\r",
													"    if (labels.name == tagName_2) {\r",
													"        var count2 = labels.count;\r",
													"        var tag2 = labels.id;\r",
													"    }\r",
													"    if (labels.name == tagName_3) {\r",
													"        var count3 = labels.count;\r",
													"        var tag3 = labels.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"tagId_1\", tag1);\r",
													"pm.collectionVariables.set(\"tagId_2\", tag2);\r",
													"pm.collectionVariables.set(\"tagId_3\", tag3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_1\")).to.eql(tag1);\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_2\")).to.eql(tag2);\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_3\")).to.eql(tag3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one tag PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_1 = pm.collectionVariables.get(\"countTagName_1\");\r",
													"pm.collectionVariables.set(\"count_tag1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_1}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_1 = pm.collectionVariables.get(\"countTagName_1\");\r",
													"var countTagName_2 = pm.collectionVariables.get(\"countTagName_2\");\r",
													"pm.collectionVariables.set(\"count_tag2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_1}},\r\n        {{tagId_2}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No Tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_3 = pm.collectionVariables.get(\"countTagName_3\");\r",
													"pm.collectionVariables.set(\"count_tag3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_3}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Get Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var tagName_1 = pm.collectionVariables.get(\"tagName_1\");\r",
													"var tagName_2 = pm.collectionVariables.get(\"tagName_2\");\r",
													"var tagName_3 = pm.collectionVariables.get(\"tagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.labels.length; i++) {\r",
													"    var labels = jsonData.facets.labels[i];\r",
													"    if (labels.name == tagName_1) {\r",
													"        var count1 = labels.count;\r",
													"        var tag1 = labels.id;\r",
													"    } if (labels.name == tagName_2) {\r",
													"        var count2 = labels.count;\r",
													"        var tag2 = labels.id;\r",
													"    } if (labels.name == tagName_3) {\r",
													"        var count3 = labels.count;\r",
													"        var tag3 = labels.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countTagName_1\", count1);\r",
													"pm.collectionVariables.set(\"countTagName_2\", count2);\r",
													"pm.collectionVariables.set(\"countTagName_3\", count3);\r",
													"pm.collectionVariables.set(\"tagId_1\", tag1);\r",
													"pm.collectionVariables.set(\"tagId_2\", tag2);\r",
													"pm.collectionVariables.set(\"tagId_3\", tag3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countTagName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countTagName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countTagName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_1\")).to.eql(tag1);\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_2\")).to.eql(tag2);\r",
													"    pm.expect(pm.collectionVariables.get(\"tagId_3\")).to.eql(tag3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter one tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_1 = pm.collectionVariables.get(\"countTagName_1\");\r",
													"var count_tag1 = pm.collectionVariables.get(\"count_tag1\");\r",
													"pm.test(\"Tag filtering is correct\", function () {\r",
													"    pm.expect(countTagName_1).to.eql(count_tag1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_1}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter two tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_1 = pm.collectionVariables.get(\"countTagName_1\");\r",
													"var countTagName_2 = pm.collectionVariables.get(\"countTagName_2\");\r",
													"var count_tag2 = pm.collectionVariables.get(\"count_tag2\");\r",
													"pm.test(\"Tags filtering is correct\", function () {\r",
													"    pm.expect(countTagName_1 + countTagName_2).to.eql(count_tag2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_1}},\r\n        {{tagId_2}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter with No Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countTagName_3 = pm.collectionVariables.get(\"countTagName_3\");\r",
													"var count_tag3 = pm.collectionVariables.get(\"count_tag3\");\r",
													"pm.test(\"No Tags filtering is correct\", function () {\r",
													"    pm.expect(countTagName_3).to.eql(count_tag3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [\r\n        {{tagId_3}}\r\n    ],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Imported Tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var importedTagName_1 = pm.collectionVariables.get(\"importedTagName_1\");\r",
													"var importedTagName_2 = pm.collectionVariables.get(\"importedTagName_2\");\r",
													"var importedTagName_3 = pm.collectionVariables.get(\"importedTagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.importedTags.length; i++) {\r",
													"    var importedTags = jsonData.facets.importedTags[i];\r",
													"    if (importedTags.name == importedTagName_1) {\r",
													"        var count1 = importedTags.count;\r",
													"        var tag1 = importedTags.id;\r",
													"    }\r",
													"    if (importedTags.name == importedTagName_2) {\r",
													"        var count2 = importedTags.count;\r",
													"        var tag2 = importedTags.id;\r",
													"    }\r",
													"    if (importedTags.name == importedTagName_3) {\r",
													"        var count3 = importedTags.count;\r",
													"        var tag3 = importedTags.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"importedTagId_1\", tag1);\r",
													"pm.collectionVariables.set(\"importedTagId_2\", tag2);\r",
													"pm.collectionVariables.set(\"importedTagId_3\", tag3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_1\")).to.eql(tag1);\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_2\")).to.eql(tag2);\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_3\")).to.eql(tag3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one imported tag PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_1 = pm.collectionVariables.get(\"countImportedTagName_1\");\r",
													"pm.collectionVariables.set(\"count_it1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_1}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two imported tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_1 = pm.collectionVariables.get(\"countImportedTagName_1\");\r",
													"var countImportedTagName_2 = pm.collectionVariables.get(\"countImportedTagName_2\");\r",
													"pm.collectionVariables.set(\"count_it2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_1}},\r\n        {{importedTagId_2}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No Imported Tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_3 = pm.collectionVariables.get(\"countImportedTagName_3\");\r",
													"pm.collectionVariables.set(\"count_it3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_3}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Get Imported Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var importedTagName_1 = pm.collectionVariables.get(\"importedTagName_1\");\r",
													"var importedTagName_2 = pm.collectionVariables.get(\"importedTagName_2\");\r",
													"var importedTagName_3 = pm.collectionVariables.get(\"importedTagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.importedTags.length; i++) {\r",
													"    var importedTags = jsonData.facets.importedTags[i];\r",
													"    if (importedTags.name == importedTagName_1) {\r",
													"        var count1 = importedTags.count;\r",
													"        var tag1 = importedTags.id;\r",
													"    } if (importedTags.name == importedTagName_2) {\r",
													"        var count2 = importedTags.count;\r",
													"        var tag2 = importedTags.id;\r",
													"    } if (importedTags.name == importedTagName_3) {\r",
													"        var count3 = importedTags.count;\r",
													"        var tag3 = importedTags.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countImportedTagName_1\", count1);\r",
													"pm.collectionVariables.set(\"countImportedTagName_2\", count2);\r",
													"pm.collectionVariables.set(\"countImportedTagName_3\", count3);\r",
													"pm.collectionVariables.set(\"importedTagId_1\", tag1);\r",
													"pm.collectionVariables.set(\"importedTagId_2\", tag2);\r",
													"pm.collectionVariables.set(\"importedTagId_3\", tag3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countImportedTagName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countImportedTagName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countImportedTagName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_1\")).to.eql(tag1);\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_2\")).to.eql(tag2);\r",
													"    pm.expect(pm.collectionVariables.get(\"importedTagId_3\")).to.eql(tag3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter one imported tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_1 = pm.collectionVariables.get(\"countImportedTagName_1\");\r",
													"var count_it1 = pm.collectionVariables.get(\"count_it1\");\r",
													"pm.test(\"Imported Tag filtering is correct\", function () {\r",
													"    pm.expect(countImportedTagName_1).to.eql(count_it1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_1}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter two imported tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_1 = pm.collectionVariables.get(\"countImportedTagName_1\");\r",
													"var countImportedTagName_2 = pm.collectionVariables.get(\"countImportedTagName_2\");\r",
													"var count_it2 = pm.collectionVariables.get(\"count_it2\");\r",
													"pm.test(\"Imported Tags filtering is correct\", function () {\r",
													"    pm.expect(countImportedTagName_1 + countImportedTagName_2).to.eql(count_it2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_1}},\r\n        {{importedTagId_2}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2946 Filter with No Imported Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countImportedTagName_3 = pm.collectionVariables.get(\"countImportedTagName_3\");\r",
													"var count_it3 = pm.collectionVariables.get(\"count_it3\");\r",
													"pm.test(\"No Imported Tags filtering is correct\", function () {\r",
													"    pm.expect(countImportedTagName_3).to.eql(count_it3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [\r\n        {{importedTagId_3}}\r\n    ],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Custom labels PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var customLabelName_1 = pm.collectionVariables.get(\"customLabelName_1\");\r",
													"var customLabelName_2 = pm.collectionVariables.get(\"customLabelName_2\");\r",
													"var customLabelName_3 = pm.collectionVariables.get(\"customLabelName_3\");\r",
													"for (var i = 0; i < jsonData.facets.customLabels.length; i++) {\r",
													"    var customLabels = jsonData.facets.customLabels[i];\r",
													"    if (customLabels.name == customLabelName_1) {\r",
													"        var count1 = customLabels.count;\r",
													"        var label1 = customLabels.id;\r",
													"    }\r",
													"    if (customLabels.name == customLabelName_2) {\r",
													"        var count2 = customLabels.count;\r",
													"        var label2 = customLabels.id;\r",
													"    }\r",
													"    if (customLabels.name == customLabelName_3) {\r",
													"        var count3 = customLabels.count;\r",
													"        var label3 = customLabels.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"customLabelId_1\", label1);\r",
													"pm.collectionVariables.set(\"customLabelId_2\", label2);\r",
													"pm.collectionVariables.set(\"customLabelId_3\", label3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_1\")).to.eql(label1);\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_2\")).to.eql(label2);\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_3\")).to.eql(label3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count one custom label PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_1 = pm.collectionVariables.get(\"countCustomLabelName_1\");\r",
													"pm.collectionVariables.set(\"count_c1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_1}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count two custom labels PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_1 = pm.collectionVariables.get(\"countCustomLabelName_1\");\r",
													"var countCustomLabelName_2 = pm.collectionVariables.get(\"countCustomLabelName_2\");\r",
													"pm.collectionVariables.set(\"count_c2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_1}},\r\n        {{customLabelId_2}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No Custom labels PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_3 = pm.collectionVariables.get(\"countCustomLabelName_3\");\r",
													"pm.collectionVariables.set(\"count_c3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_3}}\r\n    ],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2947 Get Custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var customLabelName_1 = pm.collectionVariables.get(\"customLabelName_1\");\r",
													"var customLabelName_2 = pm.collectionVariables.get(\"customLabelName_2\");\r",
													"var customLabelName_3 = pm.collectionVariables.get(\"customLabelName_3\");\r",
													"for (var i = 0; i < jsonData.facets.customLabels.length; i++) {\r",
													"    var customLabels = jsonData.facets.customLabels[i];\r",
													"    if (customLabels.name == customLabelName_1) {\r",
													"        var count1 = customLabels.count;\r",
													"        var label1 = customLabels.id;\r",
													"    } if (customLabels.name == customLabelName_2) {\r",
													"        var count2 = customLabels.count;\r",
													"        var label2 = customLabels.id;\r",
													"    } if (customLabels.name == customLabelName_3) {\r",
													"        var count3 = customLabels.count;\r",
													"        var label3 = customLabels.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countCustomLabelName_1\", count1);\r",
													"pm.collectionVariables.set(\"countCustomLabelName_2\", count2);\r",
													"pm.collectionVariables.set(\"countCustomLabelName_3\", count3);\r",
													"pm.collectionVariables.set(\"customLabelId_1\", label1);\r",
													"pm.collectionVariables.set(\"customLabelId_2\", label2);\r",
													"pm.collectionVariables.set(\"customLabelId_3\", label3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countCustomLabelName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countCustomLabelName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countCustomLabelName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_1\")).to.eql(label1);\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_2\")).to.eql(label2);\r",
													"    pm.expect(pm.collectionVariables.get(\"customLabelId_3\")).to.eql(label3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2947 Filter one custom label",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_1 = pm.collectionVariables.get(\"countCustomLabelName_1\");\r",
													"var count_c1 = pm.collectionVariables.get(\"count_c1\");\r",
													"pm.test(\"Custom label filtering is correct\", function () {\r",
													"    pm.expect(countCustomLabelName_1).to.eql(count_c1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_1}}\r\n    ],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2947 Filter two custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_1 = pm.collectionVariables.get(\"countCustomLabelName_1\");\r",
													"var countCustomLabelName_2 = pm.collectionVariables.get(\"countCustomLabelName_2\");\r",
													"var count_c2 = pm.collectionVariables.get(\"count_c2\");\r",
													"pm.test(\"Imported Tags filtering is correct\", function () {\r",
													"    pm.expect(countCustomLabelName_1 + countCustomLabelName_2).to.eql(count_c2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_2}}\r\n    ],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2947 Filter with No Custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countCustomLabelName_3 = pm.collectionVariables.get(\"countCustomLabelName_3\");\r",
													"var count_c3 = pm.collectionVariables.get(\"count_c3\");\r",
													"pm.test(\"No Imported Tags filtering is correct\", function () {\r",
													"    pm.expect(countCustomLabelName_3).to.eql(count_c3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [\r\n        {{customLabelId_3}}\r\n    ],\r\n    \"dynamicTagsIds\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1690 Turn on Dynamic Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Dynamic tags page turn on successful\", function () {\r",
													"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{Account3Name}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": false,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": true\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{Account3ID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{Account3ID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRS-1414 Create Dynamic Tag 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Creating Dynamic tag successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"dtName = jsonData.tag.name;\r",
													"pm.collectionVariables.set(\"dynamicTagName_1\", dtName);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{Account3ID}},\r\n    \"name\": \"test\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"minmax\",\r\n                \"values\": {\r\n                    \"min\": 168,\r\n                    \"max\": 168\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-tag",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRS-1414 Create Dynamic Tag 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Creating Dynamic tag successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"dtName = jsonData.tag.name;\r",
													"pm.collectionVariables.set(\"dynamicTagName_2\", dtName);\r",
													"setTimeout(function () {\r",
													"}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": {{AdminUserID}},\r\n    \"account_id\": {{Account3ID}},\r\n    \"name\": \"test_1\",\r\n    \"params\": {\r\n        \"products\": {\r\n            \"price\": {\r\n                \"isActive\": true,\r\n                \"range\": \"minmax\",\r\n                \"values\": {\r\n                    \"min\": 1099,\r\n                    \"max\": 1099\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"status\": \"on\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/dynamic-tag/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-tag",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Dynamic tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var dynamicTagName_1 = pm.collectionVariables.get(\"dynamicTagName_1\");\r",
													"var dynamicTagName_2 = pm.collectionVariables.get(\"dynamicTagName_2\");\r",
													"var dynamicTagName_3 = pm.collectionVariables.get(\"dynamicTagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.dynamicTags.length; i++) {\r",
													"    var dynamicTags = jsonData.facets.dynamicTags[i];\r",
													"    if (dynamicTags.name == dynamicTagName_1) {\r",
													"        var count1 = dynamicTags.count;\r",
													"        var dt1 = dynamicTags.id;\r",
													"    }\r",
													"    if (dynamicTags.name == dynamicTagName_2) {\r",
													"        var count2 = dynamicTags.count;\r",
													"        var dt2 = dynamicTags.id;\r",
													"    }\r",
													"    if (dynamicTags.name == dynamicTagName_3) {\r",
													"        var count3 = dynamicTags.count;\r",
													"        var dt3 = dynamicTags.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"DynamicTagId_1\", dt1);\r",
													"pm.collectionVariables.set(\"DynamicTagId_2\", dt2);\r",
													"pm.collectionVariables.set(\"DynamicTagId_3\", dt3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_1\")).to.eql(dt1);\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_2\")).to.eql(dt2);\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_3\")).to.eql(dt3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 100,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with one dynamic tag PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_1 = pm.collectionVariables.get(\"countDynamicTagName_1\");\r",
													"pm.collectionVariables.set(\"count_d1\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_1}}\r\n    ],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with two dynamic tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_1 = pm.collectionVariables.get(\"countDynamicTagName_1\");\r",
													"var countDynamicTagName_2 = pm.collectionVariables.get(\"countDynamicTagName_2\");\r",
													"pm.collectionVariables.set(\"count_d2\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_1}},\r\n        {{DynamicTagId_2}}\r\n    ],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get count with No dynamic tags PL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_3 = pm.collectionVariables.get(\"countDynamicTagName_3\");\r",
													"pm.collectionVariables.set(\"count_d3\", jsonData.count);\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"priceStrategy\": [],\r\n    \"priceParams\": [],\r\n    \"grossMarginColor\": [],\r\n    \"competitorsCurrency\": [],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"hasScraper\": [],\r\n    \"isGoogleSERP\": [],\r\n    \"stockStatus\": [],\r\n    \"competitorsStockStatus\": [],\r\n    \"favorite\": [],\r\n    \"newPrices\": [],\r\n    \"hasManualPrice\": [],\r\n    \"hasManualCostPrice\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_3}}\r\n    ],\r\n    \"manualMatches\": [],\r\n    \"limit\": 10,\r\n    \"page\": 0,\r\n    \"isExactMatch\": false,\r\n    \"isCustomHideLoader\": true,\r\n    \"onlyFacets\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-compare-products",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-compare-products"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2954 Get Dynamic tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var dynamicTagName_1 = pm.collectionVariables.get(\"dynamicTagName_1\");\r",
													"var dynamicTagName_2 = pm.collectionVariables.get(\"dynamicTagName_2\");\r",
													"var dynamicTagName_3 = pm.collectionVariables.get(\"dynamicTagName_3\");\r",
													"for (var i = 0; i < jsonData.facets.dynamicTags.length; i++) {\r",
													"    var dynamicTags = jsonData.facets.dynamicTags[i];\r",
													"    if (dynamicTags.name == dynamicTagName_1) {\r",
													"        var count1 = dynamicTags.count;\r",
													"        var dt1 = dynamicTags.id;\r",
													"    } if (dynamicTags.name == dynamicTagName_2) {\r",
													"        var count2 = dynamicTags.count;\r",
													"        var dt2 = dynamicTags.id;\r",
													"    } if (dynamicTags.name == dynamicTagName_3) {\r",
													"        var count3 = dynamicTags.count;\r",
													"        var dt3 = dynamicTags.id;\r",
													"    }\r",
													"}\r",
													"pm.collectionVariables.set(\"countDynamicTagName_1\", count1);\r",
													"pm.collectionVariables.set(\"countDynamicTagName_2\", count2);\r",
													"pm.collectionVariables.set(\"countDynamicTagName_3\", count3);\r",
													"pm.collectionVariables.set(\"DynamicTagId_1\", dt1);\r",
													"pm.collectionVariables.set(\"DynamicTagId_2\", dt2);\r",
													"pm.collectionVariables.set(\"DynamicTagId_3\", dt3);\r",
													"pm.test(\"Check values\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"countDynamicTagName_1\")).to.eql(count1);\r",
													"    pm.expect(pm.collectionVariables.get(\"countDynamicTagName_2\")).to.eql(count2);\r",
													"    pm.expect(pm.collectionVariables.get(\"countDynamicTagName_3\")).to.eql(count3);\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_1\")).to.eql(dt1);\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_2\")).to.eql(dt2);\r",
													"    pm.expect(pm.collectionVariables.get(\"DynamicTagId_3\")).to.eql(dt3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"onlyFacets\": true,\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2954 Filter with one dynamic tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_1 = pm.collectionVariables.get(\"countDynamicTagName_1\");\r",
													"var count_d1 = pm.collectionVariables.get(\"count_d1\");\r",
													"pm.test(\"Dynamic tag filtering is correct\", function () {\r",
													"    pm.expect(countDynamicTagName_1).to.eql(count_d1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_1}}\r\n    ],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2954 Filter with two dynamic tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_1 = pm.collectionVariables.get(\"countDynamicTagName_1\");\r",
													"var countDynamicTagName_2 = pm.collectionVariables.get(\"countDynamicTagName_2\");\r",
													"var count_d2 = pm.collectionVariables.get(\"count_d2\");\r",
													"pm.test(\"Dynamic tags filtering is correct\", function () {\r",
													"    pm.expect(countDynamicTagName_1 + countDynamicTagName_2).to.eql(count_d2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_1}},\r\n        {{DynamicTagId_2}}\r\n    ],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2954 Filter with No dynamic tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var countDynamicTagName_3 = pm.collectionVariables.get(\"countDynamicTagName_3\");\r",
													"var count_d3 = pm.collectionVariables.get(\"count_d3\");\r",
													"pm.test(\"No dynamic tags filtering is correct\", function () {\r",
													"    pm.expect(countDynamicTagName_3).to.eql(count_d3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"domainsIds\": [],\r\n    \"brandsIds\": [],\r\n    \"productTypesIds\": [],\r\n    \"labelsIds\": [],\r\n    \"importedTagsIds\": [],\r\n    \"customLabelsIds\": [],\r\n    \"dynamicTagsIds\": [\r\n        {{DynamicTagId_3}}\r\n    ],\r\n    \"hasMatch\": [\r\n        \"yes\"\r\n    ],\r\n    \"limit\": 25,\r\n    \"page\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-458 Delete Dynamic Tag 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Dynamic tag successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagId_1}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-tag",
												"{{DynamicTagId_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-458 Delete Dynamic Tag 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Dynamic tag successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/dynamic-tag/{{DynamicTagId_2}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"dynamic-tag",
												"{{DynamicTagId_2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1691 Turn off  Dynamic Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Dynamic tags page turn off successful\", function () {\r",
													"    pm.expect(jsonData.user.current_account.settings.enable_dynamic_tags).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{Account3Name}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": false,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_dynamic_tags\": false\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{Account3ID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{Account3ID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout successful\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-2942 ](https://app.qase.io/case/PRSP-2942) B: Recommendations-> Filters -> Domains\n\n[PRSP-2943 ](https://app.qase.io/case/PRSP-2943) B: Recommendations-> Filters -> Brands\n\n[PRSP-2944 ](https://app.qase.io/case/PRSP-2944) B: Recommendations-> Filters -> Product types\n\n[PRSP-2946 ](https://app.qase.io/case/PRSP-2946) B: Recommendations -> Filters -> Tags\n\n[PRSP-2947 ](https://app.qase.io/case/PRSP-2947) B: Recommendations -> Filters -> Custom labels\n\n[PRSP-1690 ](https://app.qase.io/case/PRSP-1690) B: Settings -> Dynamic tag settings ->Turn on Dynamic tag page\n\n[PRSP-1414 ](https://app.qase.io/case/PRSP-1414) B: Dynamic tags -> Create new Dynamic tags (Essence)\n\n[PRSP-2954 ](https://app.qase.io/case/PRSP-2954) B: Recommendations -> Filters -> Dynamic Tags\n\n[PRSP-458 ](https://app.qase.io/case/PRSP-458) B: Dynamic tags -> \"Delete\" button\n\n[PRSP-1691 ](https://app.qase.io/case/PRSP-1691) B: Settings -> Dynamic tag settings ->Turn off Dynamic tag page\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary-> Top 5 widget-> Delete \"Top 5\" widget\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-621 ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget"
						}
					]
				}
			]
		},
		{
			"name": "Index history widget",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (jsonData.success = \"true\") {\r",
									"    pm.test(\"Switch is successfully\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.expect(jsonData.user.current_account.id == pm.collectionVariables.get(\"AccountID\"));\r",
									"        pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(pm.response.code, function () {\r",
									"        postman.setNextRequest(null);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1688 Turn on Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
									"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1743 Generate DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-domain-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"price-leaders\", position: 5 },\r",
									"    { type: \"domain-index\", position: 6 }\r",
									"];\r",
									"for (var i = 0; i < widgets.length; i++) {\r",
									"    var widget = widgets[i];\r",
									"    pm.test(widget.type + \" widget has correct properties\", function () {\r",
									"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
									"        pm.expect(currentWidget).not.to.be.undefined;\r",
									"        pm.expect(currentWidget.page).to.eql('domain');\r",
									"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
									"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
									"        if (widget.fields) {\r",
									"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
									"        }\r",
									"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
									"        if (currentWidget.params.showInDashboard === undefined) {\r",
									"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
									"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
									"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"pm.test('Get MainWidgetID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get priceLeaderID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get indexHistoryID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get customizableID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Get top5ProductsID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
									"\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5PriceLeaderMultiID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5RedProductsID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2860 Check today points on widgets",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"if (dateIndex !== -1) {\r",
									"    var domains = jsonData.domains;\r",
									"    for (var i = 0; i < domains.length; i++) {\r",
									"        var domainId = domains[i];\r",
									"        var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"        pm.collectionVariables.set(\"points_index_domain_\" + domainId, points);\r",
									"    }\r",
									"    pm.test(\"Today's date found\", function () {\r",
									"        pm.expect(dateIndex).not.to.eql(-1);\r",
									"        postman.setNextRequest(\"Get MainWidget (index)\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Today's date not found\", function () {\r",
									"        postman.setNextRequest(\"Get crons DS\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"number\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"widget_type\": \"domain-index\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-domain-index/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-domain-index",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crons DS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var cronID = null;\r",
									"for (var i = 0; i < jsonData.length; i++) {\r",
									"    if (jsonData[i].type === \"domain-history\") {\r",
									"        cronID = jsonData[i].id;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"if (cronID !== null) {\r",
									"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);\r",
									"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"PRSP-1831 Create Domain Summary cron\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1831 Create Domain Summary cron",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status and message\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');\r",
									"    postman.setNextRequest(\"Get crons DS\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cron_identifiers\": [\r\n        \"domain-history\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group",
								"create"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2455 Change next_run to now + 2 min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check message in the response\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');\r",
									"});\r",
									"setTimeout(function () {\r",
									"    postman.setNextRequest('PRSP-2860 Check today points on widgets');\r",
									"}, 180000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"currentDate.setUTCHours(currentDate.getUTCHours() + 1);\r",
									"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);\r",
									"let hours = currentDate.getUTCHours();\r",
									"let minutes = currentDate.getUTCMinutes();\r",
									"if (hours >= 24) {\r",
									"    hours -= 24;\r",
									"}\r",
									"if (hours < 10) {\r",
									"    hours = `0${hours}`;\r",
									"}\r",
									"if (minutes < 10) {\r",
									"    minutes = `0${minutes}`;\r",
									"}\r",
									"const danskTime = `${minutes} ${hours} * * *`;\r",
									"pm.collectionVariables.set(\"now2mRule\", danskTime);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{cronDomainHistoryID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"cron_rule\": \"{{now2mRule}}\",\r\n    \"type\": \"domain-history\",\r\n    \"priority\": \"normal\",\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group",
								"update",
								"{{cronDomainHistoryID}}"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MainWidget (index)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var domains = jsonData.data;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = jsonData.data[i].id;\r",
									"    var domain_index = jsonData.data[i].domain_index;\r",
									"    pm.collectionVariables.set(\"domain_index_main_widget_domain_\" + domainId, domain_index);\r",
									"}\r",
									"var points_index_domain_1887 = pm.collectionVariables.get(\"points_index_domain_1887\");\r",
									"var points_index_domain_2040 = pm.collectionVariables.get(\"points_index_domain_2040\");\r",
									"var points_index_domain_48004 = pm.collectionVariables.get(\"points_index_domain_48004\");\r",
									"var domain_index_main_widget_domain_1887 = pm.collectionVariables.get(\"domain_index_main_widget_domain_1887\");\r",
									"var domain_index_main_widget_domain_2040 = pm.collectionVariables.get(\"domain_index_main_widget_domain_2040\");\r",
									"var domain_index_main_widget_domain_48004 = pm.collectionVariables.get(\"domain_index_main_widget_domain_48004\");\r",
									"pm.test(\"Comparison of the 'Index' value\", function () {\r",
									"    pm.expect(points_index_domain_1887).to.eql(domain_index_main_widget_domain_1887);\r",
									"    pm.expect(points_index_domain_2040).to.eql(domain_index_main_widget_domain_2040);\r",
									"    pm.expect(points_index_domain_48004).to.eql(domain_index_main_widget_domain_48004);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-domain-summary",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5Products widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5ProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5PriceLeaderMultiID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5RedProducts widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5RedProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete priceLeader widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-621 Delete indexHistory widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-626 Delete customizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{customizableID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete domain widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1689 Turn off the Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
									"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743 ](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-2860 ](https://app.qase.io/case/PRSP-2860) B: Domain summary -> Index history widget -> Check today points on widgets\n\n[PRSP-1831 ](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455 ](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
		},
		{
			"name": "Price leader widget",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (jsonData.success = \"true\") {\r",
									"    pm.test(\"Switch is successfully\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.expect(jsonData.user.current_account.id == pm.collectionVariables.get(\"AccountID\"));\r",
									"        pm.collectionVariables.set(\"AccountName\", jsonData.user.current_account.name);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(pm.response.code, function () {\r",
									"        postman.setNextRequest(null);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1688 Turn on Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
									"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1743 Generate DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-domain-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"price-leaders\", position: 5 },\r",
									"    { type: \"domain-index\", position: 6 }\r",
									"];\r",
									"for (var i = 0; i < widgets.length; i++) {\r",
									"    var widget = widgets[i];\r",
									"    pm.test(widget.type + \" widget has correct properties\", function () {\r",
									"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);\r",
									"        pm.expect(currentWidget).not.to.be.undefined;\r",
									"        pm.expect(currentWidget.page).to.eql('domain');\r",
									"        pm.expect(currentWidget.widget_type).to.eql(widget.type);\r",
									"        pm.expect(currentWidget.position).to.eql(widget.position);\r",
									"        if (widget.fields) {\r",
									"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);\r",
									"        }\r",
									"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.\r",
									"        if (currentWidget.params.showInDashboard = undefined) {\r",
									"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;\r",
									"        } else if (currentWidget.params.showInDashboard != undefined) {\r",
									"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"pm.test('Get MainWidgetID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get priceLeaderID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get indexHistoryID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get customizableID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('customizableID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Get top5ProductsID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);\r",
									"\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5PriceLeaderMultiID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test('Get top5RedProductsID', function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-636 Include own data is ON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Own data included\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody('message', 'Own data included');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"show_account_domain_data\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"toggle-account-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-294,57 Edit columns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status and message\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody('message', 'Widget was successfully updated');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"account_id\": {{AccountID}},\r\n    \"key\": \"columns\",\r\n    \"value\": [\r\n        \"products\",\r\n        \"price_leader_solo_percent\",\r\n        \"price_leader_multi_percent\",\r\n        \"price_leader_multi\",\r\n        \"price_leader_solo\",\r\n        \"domain_index\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/save",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-domain-summary",
								"{{MainWidgetID}}",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-636 Check today points on widgets (solo value) - Include own data is ON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"if (dateIndex !== -1) {\r",
									"    var domains = jsonData.domains;\r",
									"    for (var i = 0; i < domains.length; i++) {\r",
									"        var domainId = domains[i];\r",
									"        var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"        pm.collectionVariables.set(\"points_leaders_solo_value_domain_\" + domainId, points);\r",
									"    }\r",
									"    pm.test(\"Today's date found\", function () {\r",
									"        pm.expect(dateIndex).not.to.eql(-1);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Today's date not found\", function () {\r",
									"        postman.setNextRequest(\"PRSP-636 Check today points on widgets (solo percentage) - Include own data is ON\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"number\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-636 Check today points on widgets (solo percentage) - Include own data is ON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"if (dateIndex !== -1) {\r",
									"    var domains = jsonData.domains;\r",
									"    for (var i = 0; i < domains.length; i++) {\r",
									"        var domainId = domains[i];\r",
									"        var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"        pm.collectionVariables.set(\"points_leaders_solo_percentage_domain_\" + domainId, points);\r",
									"    }\r",
									"    pm.test(\"Today's date found\", function () {\r",
									"        pm.expect(dateIndex).not.to.eql(-1);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Today's date not found\", function () {\r",
									"        postman.setNextRequest(\"PRSP-636 Check today points on widgets (multi value) - Include own data is ON\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"percentage\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-636 Check today points on widgets (multi value) - Include own data is ON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"if (dateIndex !== -1) {\r",
									"    var domains = jsonData.domains;\r",
									"    for (var i = 0; i < domains.length; i++) {\r",
									"        var domainId = domains[i];\r",
									"        var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"        pm.collectionVariables.set(\"points_leaders_multi_value_domain_\" + domainId, points);\r",
									"    }\r",
									"    pm.test(\"Today's date found\", function () {\r",
									"        pm.expect(dateIndex).not.to.eql(-1);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Today's date not found\", function () {\r",
									"        postman.setNextRequest(\"PRSP-636 Check today points on widgets (multi percentage) - Include own data is ON\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"number\",\r\n        \"type\": \"multi\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-636 Check today points on widgets (multi percentage) - Include own data is ON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"if (dateIndex !== -1) {\r",
									"    var domains = jsonData.domains;\r",
									"    for (var i = 0; i < domains.length; i++) {\r",
									"        var domainId = domains[i];\r",
									"        var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"        pm.collectionVariables.set(\"points_leaders_multi_percentage_domain_\" + domainId, points);\r",
									"    }\r",
									"    pm.test(\"Today's date found\", function () {\r",
									"        pm.expect(dateIndex).not.to.eql(-1);\r",
									"        postman.setNextRequest(\"Get MainWidget (price leader)\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Today's date not found\", function () {\r",
									"        postman.setNextRequest(\"Get crons DS\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"percentage\",\r\n        \"type\": \"multi\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crons DS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var cronID = null;\r",
									"for (var i = 0; i < jsonData.length; i++) {\r",
									"    if (jsonData[i].type === \"domain-history\") {\r",
									"        cronID = jsonData[i].id;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"if (cronID !== null) {\r",
									"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);\r",
									"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");\r",
									"} else {\r",
									"    postman.setNextRequest(\"PRSP-1831 Create Domain Summary cron\");\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1831 Create Domain Summary cron",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status and message\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');\r",
									"    postman.setNextRequest(\"Get crons DS\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cron_identifiers\": [\r\n        \"domain-history\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group",
								"create"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2455 Change next_run to now + 2 min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check message in the response\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');\r",
									"});\r",
									"setTimeout(function () {\r",
									"    postman.setNextRequest(\"PRSP-636 Check today points on widgets (solo value) - Include own data is ON\");\r",
									"}, 180000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"currentDate.setUTCHours(currentDate.getUTCHours() + 1);\r",
									"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);\r",
									"let hours = currentDate.getUTCHours();\r",
									"let minutes = currentDate.getUTCMinutes();\r",
									"if (hours >= 24) {\r",
									"    hours -= 24;\r",
									"}\r",
									"if (hours < 10) {\r",
									"    hours = `0${hours}`;\r",
									"}\r",
									"if (minutes < 10) {\r",
									"    minutes = `0${minutes}`;\r",
									"}\r",
									"const danskTime = `${minutes} ${hours} * * *`;\r",
									"pm.collectionVariables.set(\"now2mRule\", danskTime);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{cronDomainHistoryID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"cron_rule\": \"{{now2mRule}}\",\r\n    \"type\": \"domain-history\",\r\n    \"priority\": \"normal\",\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=main",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group",
								"update",
								"{{cronDomainHistoryID}}"
							],
							"query": [
								{
									"key": "group",
									"value": "main"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MainWidget (price leader)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var domains = jsonData.data;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = jsonData.data[i].id;\r",
									"    var price_leader_solo = jsonData.data[i].price_leader_solo;\r",
									"    var price_leader_solo_competitor = jsonData.data[i].price_leader_solo_competitor;\r",
									"    var price_leader_multi = jsonData.data[i].price_leader_multi;\r",
									"    var price_leader_multi_competitor = jsonData.data[i].price_leader_multi_competitor;\r",
									"    var price_leader_solo_percent = jsonData.data[i].price_leader_solo_percent;\r",
									"    var price_leader_solo_competitor_percent = jsonData.data[i].price_leader_solo_competitor_percent;\r",
									"    var price_leader_multi_percent = jsonData.data[i].price_leader_multi_percent;\r",
									"    var price_leader_multi_competitor_percent = jsonData.data[i].price_leader_multi_competitor_percent;\r",
									"    pm.collectionVariables.set(\"price_leader_solo_domain_\" + domainId, price_leader_solo);\r",
									"    pm.collectionVariables.set(\"price_leader_solo_competitor_domain_\" + domainId, price_leader_solo_competitor);\r",
									"    pm.collectionVariables.set(\"price_leader_multi_domain_\" + domainId, price_leader_multi);\r",
									"    pm.collectionVariables.set(\"price_leader_multi_competitor_domain_\" + domainId, price_leader_multi_competitor);\r",
									"    pm.collectionVariables.set(\"price_leader_solo_percent_domain_\" + domainId, price_leader_solo_percent);\r",
									"    pm.collectionVariables.set(\"price_leader_solo_competitor_percent_domain_\" + domainId, price_leader_solo_competitor_percent);\r",
									"    pm.collectionVariables.set(\"price_leader_multi_percent_domain_\" + domainId, price_leader_multi_percent);\r",
									"    pm.collectionVariables.set(\"price_leader_multi_competitor_percent_domain_\" + domainId, price_leader_multi_competitor_percent);\r",
									"}\r",
									"var points_leaders_solo_value_domain_1887 = pm.collectionVariables.get(\"points_leaders_solo_value_domain_1887\");\r",
									"var points_leaders_solo_value_domain_2040 = pm.collectionVariables.get(\"points_leaders_solo_value_domain_2040\");\r",
									"var points_leaders_solo_value_domain_48004 = pm.collectionVariables.get(\"points_leaders_solo_value_domain_48004\");\r",
									"var points_leaders_solo_value_domain_13438 = pm.collectionVariables.get(\"points_leaders_solo_value_domain_13438\");\r",
									"var points_leaders_solo_percentage_domain_1887 = pm.collectionVariables.get(\"points_leaders_solo_percentage_domain_1887\");\r",
									"var points_leaders_solo_percentage_domain_2040 = pm.collectionVariables.get(\"points_leaders_solo_percentage_domain_2040\");\r",
									"var points_leaders_solo_percentage_domain_48004 = pm.collectionVariables.get(\"points_leaders_solo_percentage_domain_48004\");\r",
									"var points_leaders_solo_percentage_domain_13438 = pm.collectionVariables.get(\"points_leaders_solo_percentage_domain_13438\");\r",
									"var points_leaders_multi_value_domain_1887 = pm.collectionVariables.get(\"points_leaders_multi_value_domain_1887\");\r",
									"var points_leaders_multi_value_domain_2040 = pm.collectionVariables.get(\"points_leaders_multi_value_domain_2040\");\r",
									"var points_leaders_multi_value_domain_48004 = pm.collectionVariables.get(\"points_leaders_multi_value_domain_48004\");\r",
									"var points_leaders_multi_value_domain_13438 = pm.collectionVariables.get(\"points_leaders_multi_value_domain_13438\");\r",
									"var points_leaders_multi_percentage_domain_1887 = pm.collectionVariables.get(\"points_leaders_multi_percentage_domain_1887\");\r",
									"var points_leaders_multi_percentage_domain_2040 = pm.collectionVariables.get(\"points_leaders_multi_percentage_domain_2040\");\r",
									"var points_leaders_multi_percentage_domain_48004 = pm.collectionVariables.get(\"points_leaders_multi_percentage_domain_48004\");\r",
									"var points_leaders_multi_percentage_domain_13438 = pm.collectionVariables.get(\"points_leaders_multi_percentage_domain_13438\");\r",
									"var price_leader_solo_domain_1887 = pm.collectionVariables.get(\"price_leader_solo_domain_1887\");\r",
									"var price_leader_solo_domain_2040 = pm.collectionVariables.get(\"price_leader_solo_domain_2040\");\r",
									"var price_leader_solo_domain_48004 = pm.collectionVariables.get(\"price_leader_solo_domain_48004\");\r",
									"var price_leader_solo_domain_13438 = pm.collectionVariables.get(\"price_leader_solo_domain_13438\");\r",
									"var price_leader_solo_competitor_domain_1887 = pm.collectionVariables.get(\"price_leader_solo_competitor_domain_1887\");\r",
									"var price_leader_solo_competitor_domain_2040 = pm.collectionVariables.get(\"price_leader_solo_competitor_domain_2040\");\r",
									"var price_leader_solo_competitor_domain_48004 = pm.collectionVariables.get(\"price_leader_solo_competitor_domain_48004\");\r",
									"var price_leader_solo_competitor_domain_13438 = pm.collectionVariables.get(\"price_leader_solo_competitor_domain_13438\");\r",
									"var price_leader_multi_domain_1887 = pm.collectionVariables.get(\"price_leader_multi_domain_1887\");\r",
									"var price_leader_multi_domain_2040 = pm.collectionVariables.get(\"price_leader_multi_domain_2040\");\r",
									"var price_leader_multi_domain_48004 = pm.collectionVariables.get(\"price_leader_multi_domain_48004\");\r",
									"var price_leader_multi_domain_13438 = pm.collectionVariables.get(\"price_leader_multi_domain_13438\");\r",
									"var price_leader_multi_competitor_domain_1887 = pm.collectionVariables.get(\"price_leader_multi_competitor_domain_1887\");\r",
									"var price_leader_multi_competitor_domain_2040 = pm.collectionVariables.get(\"price_leader_multi_competitor_domain_2040\");\r",
									"var price_leader_multi_competitor_domain_48004 = pm.collectionVariables.get(\"price_leader_multi_competitor_domain_48004\");\r",
									"var price_leader_multi_competitor_domain_13438 = pm.collectionVariables.get(\"price_leader_multi_competitor_domain_13438\");\r",
									"var price_leader_solo_percent_domain_1887 = pm.collectionVariables.get(\"price_leader_solo_percent_domain_1887\");\r",
									"var price_leader_solo_percent_domain_2040 = pm.collectionVariables.get(\"price_leader_solo_percent_domain_2040\");\r",
									"var price_leader_solo_percent_domain_48004 = pm.collectionVariables.get(\"price_leader_solo_percent_domain_48004\");\r",
									"var price_leader_solo_percent_domain_13438 = pm.collectionVariables.get(\"price_leader_solo_percent_domain_13438\");\r",
									"var price_leader_solo_competitor_percent_domain_1887 = pm.collectionVariables.get(\"price_leader_solo_competitor_percent_domain_1887\");\r",
									"var price_leader_solo_competitor_percent_domain_2040 = pm.collectionVariables.get(\"price_leader_solo_competitor_percent_domain_2040\");\r",
									"var price_leader_solo_competitor_percent_domain_48004 = pm.collectionVariables.get(\"price_leader_solo_competitor_percent_domain_48004\");\r",
									"var price_leader_solo_competitor_percent_domain_13438 = pm.collectionVariables.get(\"price_leader_solo_competitor_percent_domain_13438\");\r",
									"var price_leader_multi_percent_domain_1887 = pm.collectionVariables.get(\"price_leader_multi_percent_domain_1887\");\r",
									"var price_leader_multi_percent_domain_2040 = pm.collectionVariables.get(\"price_leader_multi_percent_domain_2040\");\r",
									"var price_leader_multi_percent_domain_48004 = pm.collectionVariables.get(\"price_leader_multi_percent_domain_48004\");\r",
									"var price_leader_multi_percent_domain_13438 = pm.collectionVariables.get(\"price_leader_multi_percent_domain_13438\");\r",
									"var price_leader_multi_competitor_percent_domain_1887 = pm.collectionVariables.get(\"price_leader_multi_competitor_percent_domain_1887\");\r",
									"var price_leader_multi_competitor_percent_domain_2040 = pm.collectionVariables.get(\"price_leader_multi_competitor_percent_domain_2040\");\r",
									"var price_leader_multi_competitor_percent_domain_48004 = pm.collectionVariables.get(\"price_leader_multi_competitor_percent_domain_48004\");\r",
									"var price_leader_multi_competitor_percent_domain_13438 = pm.collectionVariables.get(\"price_leader_multi_competitor_percent_domain_13438\");\r",
									"if (jsonData.account_domain_id === 0) {\r",
									"    pm.test(\"Comparison of the 'Solo' values (include own data is OFF)\", function () {\r",
									"        pm.expect(points_leaders_solo_value_domain_1887).to.eql(price_leader_solo_domain_1887);\r",
									"        pm.expect(points_leaders_solo_value_domain_2040).to.eql(price_leader_solo_domain_2040);\r",
									"        pm.expect(points_leaders_solo_value_domain_48004).to.eql(price_leader_solo_domain_48004);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Multi' values (include own data is OFF)\", function () {\r",
									"        pm.expect(points_leaders_multi_value_domain_1887).to.eql(price_leader_multi_domain_1887);\r",
									"        pm.expect(points_leaders_multi_value_domain_2040).to.eql(price_leader_multi_domain_2040);\r",
									"        pm.expect(points_leaders_multi_value_domain_48004).to.eql(price_leader_multi_domain_48004);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Solo percentage' values (include own data is OFF)\", function () {\r",
									"        pm.expect(points_leaders_solo_percentage_domain_1887).to.eql(price_leader_solo_percent_domain_1887);\r",
									"        pm.expect(points_leaders_solo_percentage_domain_2040).to.eql(price_leader_solo_percent_domain_2040);\r",
									"        pm.expect(points_leaders_solo_percentage_domain_48004).to.eql(price_leader_solo_percent_domain_48004);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Multi percentage' values (include own data is OFF)\", function () {\r",
									"        pm.expect(points_leaders_multi_percentage_domain_1887).to.eql(price_leader_multi_percent_domain_1887);\r",
									"        pm.expect(points_leaders_multi_percentage_domain_2040).to.eql(price_leader_multi_percent_domain_2040);\r",
									"        pm.expect(points_leaders_multi_percentage_domain_48004).to.eql(price_leader_multi_percent_domain_48004);\r",
									"    });\r",
									"    postman.setNextRequest(\"PRSP-627 Delete top5Products widget\")\r",
									"} else {\r",
									"    pm.test(\"Comparison of the 'Solo' values (include own data is ON)\", function () {\r",
									"        pm.expect(points_leaders_solo_value_domain_1887).to.eql(price_leader_solo_competitor_domain_1887);\r",
									"        pm.expect(points_leaders_solo_value_domain_2040).to.eql(price_leader_solo_competitor_domain_2040);\r",
									"        pm.expect(points_leaders_solo_value_domain_48004).to.eql(price_leader_solo_competitor_domain_48004);\r",
									"        pm.expect(points_leaders_solo_value_domain_13438).to.eql(points_leaders_solo_value_domain_13438);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Multi' values (include own data is ON)\", function () {\r",
									"        pm.expect(points_leaders_multi_value_domain_1887).to.eql(price_leader_multi_competitor_domain_1887);\r",
									"        pm.expect(points_leaders_multi_value_domain_2040).to.eql(price_leader_multi_competitor_domain_2040);\r",
									"        pm.expect(points_leaders_multi_value_domain_48004).to.eql(price_leader_multi_competitor_domain_48004);\r",
									"        pm.expect(points_leaders_multi_value_domain_13438).to.eql(price_leader_multi_domain_13438);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Solo percentage' values (include own data is ON)\", function () {\r",
									"        pm.expect(points_leaders_solo_percentage_domain_1887).to.eql(price_leader_solo_competitor_percent_domain_1887);\r",
									"        pm.expect(points_leaders_solo_percentage_domain_2040).to.eql(price_leader_solo_competitor_percent_domain_2040);\r",
									"        pm.expect(points_leaders_solo_percentage_domain_48004).to.eql(price_leader_solo_competitor_percent_domain_48004);\r",
									"        pm.expect(points_leaders_solo_percentage_domain_13438).to.eql(price_leader_solo_percent_domain_13438);\r",
									"    });\r",
									"    pm.test(\"Comparison of the 'Multi percentage' values (include own data is ON)\", function () {\r",
									"        pm.expect(points_leaders_multi_percentage_domain_1887).to.eql(price_leader_multi_competitor_percent_domain_1887);\r",
									"        pm.expect(points_leaders_multi_percentage_domain_2040).to.eql(price_leader_multi_competitor_percent_domain_2040);\r",
									"        pm.expect(points_leaders_multi_percentage_domain_48004).to.eql(price_leader_multi_competitor_percent_domain_48004);\r",
									"        pm.expect(points_leaders_multi_percentage_domain_13438).to.eql(price_leader_multi_percent_domain_13438);\r",
									"    });\r",
									"    postman.setNextRequest(\"PRSP-2861 Include own data is OFF\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"\",\r\n    \"sort\": \"matches\",\r\n    \"direction\": \"DESC\",\r\n    \"limit\": 10,\r\n    \"page\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"get-domain-summary",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2861 Include own data is OFF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Own data excluded\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody('message', 'Own data excluded.');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"show_account_domain_data\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"toggle-account-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2861 Check today points on widgets (solo value) - Include own data is OFF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"var domains = jsonData.domains;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = domains[i];\r",
									"    var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"    pm.collectionVariables.set(\"points_leaders_solo_value_domain_\" + domainId, points);\r",
									"}\r",
									"pm.test(\"Today's date found\", function () {\r",
									"    pm.expect(dateIndex).not.to.eql(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"number\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2861 Check today points on widgets (solo percentage) - Include own data is OFF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"var domains = jsonData.domains;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = domains[i];\r",
									"    var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"    pm.collectionVariables.set(\"points_leaders_solo_percentage_domain_\" + domainId, points);\r",
									"}\r",
									"pm.test(\"Today's date found\", function () {\r",
									"    pm.expect(dateIndex).not.to.eql(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"percentage\",\r\n        \"type\": \"solo\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2861 Check today points on widgets (multi value) - Include own data is OFF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"var domains = jsonData.domains;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = domains[i];\r",
									"    var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"    pm.collectionVariables.set(\"points_leaders_multi_value_domain_\" + domainId, points);\r",
									"}\r",
									"pm.test(\"Today's date found\", function () {\r",
									"    pm.expect(dateIndex).not.to.eql(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"number\",\r\n        \"type\": \"multi\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2861 Check today points on widgets (multi percentage) - Include own data is OFF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const currentDate = new Date();\r",
									"const twoWeeksAgo = new Date(currentDate);\r",
									"twoWeeksAgo.setDate(currentDate.getDate() - 14);\r",
									"const year = twoWeeksAgo.getFullYear();\r",
									"const month = (twoWeeksAgo.getMonth() + 1).toString().padStart(2, '0');\r",
									"const day = twoWeeksAgo.getDate().toString().padStart(2, '0');\r",
									"const startDay = `${year}-${month}-${day}`;\r",
									"const today = new Date();\r",
									"const todayYear = today.getFullYear();\r",
									"const todayMonth = (today.getMonth() + 1).toString().padStart(2, '0');\r",
									"const todayDay = today.getDate().toString().padStart(2, '0');\r",
									"const endDay = `${todayYear}-${todayMonth}-${todayDay}`;\r",
									"pm.collectionVariables.set('start_day', startDay);\r",
									"pm.collectionVariables.set('end_day', endDay);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var currentDate = pm.variables.get(\"end_day\");\r",
									"var dateIndex = jsonData.dates.indexOf(currentDate);\r",
									"var domains = jsonData.domains;\r",
									"for (var i = 0; i < domains.length; i++) {\r",
									"    var domainId = domains[i];\r",
									"    var points = jsonData.datasets[domainId].points[dateIndex].y;\r",
									"    pm.collectionVariables.set(\"points_leaders_multi_percentage_domain_\" + domainId, points);\r",
									"}\r",
									"pm.test(\"Today's date found\", function () {\r",
									"    pm.expect(dateIndex).not.to.eql(-1);\r",
									"    postman.setNextRequest(\"Get MainWidget (price leader)\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"start_day\": \"{{start_day}}\",\r\n        \"end_day\": \"{{end_day}}\",\r\n        \"view\": \"percentage\",\r\n        \"type\": \"multi\"\r\n    },\r\n    \"widget_type\": \"price-leaders\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"get-price-leaders",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5Products widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5ProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5PriceLeaderMultiID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5RedProducts widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5RedProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete priceLeader widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-621 Delete indexHistory widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-626 Delete customizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{customizableID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete domain widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1689 Turn off the Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
									"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{AccountName}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{AccountID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 Get crons DS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var cronID = null;\r",
									"for (var i = 0; i < jsonData.length; i++) {\r",
									"    if (jsonData[i].type === \"domain-history\") {\r",
									"        cronID = jsonData[i].id;\r",
									"        break;\r",
									"    }\r",
									"}\r",
									"pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group"
							],
							"query": [
								{
									"key": "group",
									"value": "domain_summary"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-2455 Change next_run to default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check message in the response\", function () {\r",
									"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{cronDomainHistoryID}},\r\n    \"account_id\": {{AccountID}},\r\n    \"cron_rule\": \"50 23 * * *\",\r\n    \"type\": \"domain-history\",\r\n    \"priority\": \"normal\",\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=main",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"cron",
								"groups",
								"group",
								"update",
								"{{cronDomainHistoryID}}"
							],
							"query": [
								{
									"key": "group",
									"value": "main"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Пока что есть бага, некоторые запросы могут фейлится.\n\n[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-636](https://app.qase.io/case/PRSP-636) B: Domain summary ->\"Price leaders\" widget ->\"Include own data\" slider -> ON\n\n[PRSP-294](https://app.qase.io/case/PRSP-294) B: Domain summary -> Main widget -> Edit columns -> Columns Drag'n'drop\n\n[PRSP-57](https://app.qase.io/case/PRSP-57) B: Domain Summary -> Main widget -> Edit columns button\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2861](https://app.qase.io/case/PRSP-2861) B: Domain summary ->\"Price leaders\" widget ->\"Include own data\" slider -> OFF\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
		},
		{
			"name": "Include own data",
			"item": [
				{
					"name": "Include own data ON",
					"item": [
						{
							"name": "Main page Include own data ON",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2918 Turn ON Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2918 Turn ON Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data included'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data included');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data On",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Include own data is ON\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Turn on is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-371 Check main widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is on the widget\", function () {",
													"    var domainFound = false;",
													"    _.each(jsonData.data, function (data) {",
													"        if (data.id === parseInt(ownDomainID)) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains - 1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});",
													"pm.test(\"Check data for luxlight.dk with products equal to 1\", function () {",
													"    var luxlightData = _.find(jsonData.data, { 'domain': 'luxlight.dk' });",
													"    pm.expect(luxlightData).to.not.be.undefined;",
													"    pm.expect(luxlightData.products).to.equal(1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});",
													"pm.test(\"Check data for luxlight.dk with price_leader_solo equal to 0\", function () {",
													"    var luxlightData = _.find(jsonData.data, { 'domain': 'luxlight.dk' });",
													"    pm.expect(luxlightData).to.not.be.undefined;",
													"    pm.expect(luxlightData.price_leader_solo).to.equal(0);",
													"});",
													"pm.test(\"Check data for ownDomainID with price_leader_solo equal to 1\", function () {",
													"    var ownDomainData = _.find(jsonData.data, { 'id': parseInt(ownDomainID) });",
													"    pm.expect(ownDomainData).to.not.be.undefined;",
													"    pm.expect(ownDomainData.price_leader_solo).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2921 Check Index History widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Check datasets length\", function () {",
													"    pm.expect(Object.keys(jsonData.datasets).length).to.equal(jsonData.domains.length);",
													"});",
													"pm.test(\"Check absence of 0 or ownDomainID in domains array\", function () {",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));",
													"    var containsZeroOrOwnDomainID = false;",
													"    _.each(jsonData.domains, function (domain) {",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {",
													"            containsZeroOrOwnDomainID = true;",
													"        }",
													"    });",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/get-domain-index/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"get-domain-index",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-636 Check Price Leaders widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Own domain is included\", function () {",
													"    var accountDomainId = jsonData.account_domain_id;",
													"    var domainFound = false;",
													"    _.each(jsonData.domains, function (domain) {",
													"        if (domain === accountDomainId) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"get-price-leaders",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-639 Check Custom widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is on the widget\", function () {",
													"    var domainFound = false;",
													"    _.each(jsonData.data, function (data) {",
													"        if (data.id === parseInt(ownDomainID)) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains - 1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-628 Check Top 5 Products widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is on the widget\", function () {",
													"    var domainFound = false;",
													"    _.each(jsonData.data, function (data) {",
													"        if (data.id === parseInt(ownDomainID)) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains - 1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-628 Check Top 5 LeadMulti widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is on the widget\", function () {",
													"    var domainFound = false;",
													"    _.each(jsonData.data, function (data) {",
													"        if (data.id === parseInt(ownDomainID)) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains - 1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-628 Check Top 5 RedProd widget ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is on the widget\", function () {",
													"    var domainFound = false;",
													"    _.each(jsonData.data, function (data) {",
													"        if (data.id === parseInt(ownDomainID)) {",
													"            domainFound = true;",
													"        }",
													"    });",
													"    pm.expect(domainFound).to.be.true;",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains - 1);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(parseInt(ownDomainID));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\":  \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2918 ](https://app.qase.io/case/PRSP-2918) B: Domain Summary -> Include own data -> ON\n\n[PRSP-371 ](https://app.qase.io/case/PRSP-371) B: Domain Summary -> Main widget -> \"Include own data\" slider -> ON\n\n[PRSP-2921 ](https://app.qase.io/case/PRSP-2921) B: Domain summary -> Index history widget -> Include on data -> ON\n\n[PRSP-636 ](https://app.qase.io/case/PRSP-636) B: Domain summary ->\"Price leaders\" widget ->\"Include own data\" slider -> ON\n\n[PRSP-639 ](https://app.qase.io/case/PRSP-639) B: Domain Summary -> Custom widget -> \"Include own data\" slider -> ON\n\n[PRSP-628 ](https://app.qase.io/case/PRSP-628) B: Domain Summary->Top 5 widget->\"Include own data\" slider -> ON\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						},
						{
							"name": "Domain page Include own data ON",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2918 Turn ON Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2918 Turn ON Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data included'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data included');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data On",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Get domain id\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Turn on is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Competitor domain exists on widget\", function () {\r",
													"    pm.expect(jsonData.facets.domains[0]).to.exist;\r",
													"});\r",
													"var compDomainID = jsonData.facets.domains[0].id;\r",
													"pm.collectionVariables.set(\"CompDomainID\", compDomainID);\r",
													"pm.test(\"CompDomainID is set\", function () {\r",
													"    pm.expect(pm.collectionVariables.has(\"CompDomainID\")).to.be.true;\r",
													"    pm.expect(pm.collectionVariables.get(\"CompDomainID\")).to.equal(compDomainID);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2925 Check domain page On",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");\r",
													"pm.test(\"Check accountDomainId is equal to OwnDomainID\", function () {\r",
													"    pm.expect(jsonData.accountDomainId).to.equal(parseInt(ownDomainID));\r",
													"});\r",
													"pm.test(\"Check showAccountData is true\", function () {\r",
													"    pm.expect(jsonData.showAccountData).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/widget/{{CompDomainID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"widget",
												"{{CompDomainID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2927 Check Index on domain page On",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var currentDate = new Date();\r",
													"var yesterdayDate = new Date(currentDate);\r",
													"yesterdayDate.setDate(currentDate.getDate() - 1);\r",
													"var oneMonthAgoDate = new Date(currentDate);\r",
													"oneMonthAgoDate.setMonth(currentDate.getMonth() - 1);\r",
													"var formattedYesterday = yesterdayDate.toISOString().split('T')[0];\r",
													"var formattedOneMonthAgo = oneMonthAgoDate.toISOString().split('T')[0];\r",
													"pm.collectionVariables.set(\"EndDay\", formattedYesterday);\r",
													"pm.collectionVariables.set(\"StartDay\", formattedOneMonthAgo);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check absence own domain in Index history\", function () {\r",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));\r",
													"    var containsZeroOrOwnDomainID = false;\r",
													"    _.each(jsonData.domains, function (domain) {\r",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {\r",
													"            containsZeroOrOwnDomainID = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domain_id\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/index-history",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"index-history"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1770 Check Price leaders on domain page ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");\r",
													"var compDomainID = pm.collectionVariables.get(\"CompDomainID\");\r",
													"pm.test(\"Check if OwnDomainID is in in Price leaders widget\", function () {\r",
													"    pm.expect(jsonData.domains).to.include(parseInt(ownDomainID));\r",
													"});\r",
													"pm.test(\"Check if CompDomainID is in Price leaders widget\", function () {\r",
													"    pm.expect(jsonData.domains).to.include(parseInt(compDomainID));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var currentDate = new Date();",
													"var yesterdayDate = new Date(currentDate);",
													"yesterdayDate.setDate(currentDate.getDate() - 1);",
													"var oneMonthAgoDate = new Date(currentDate);",
													"oneMonthAgoDate.setMonth(currentDate.getMonth() - 1);",
													"var formattedYesterday = yesterdayDate.toISOString().split('T')[0];",
													"var formattedOneMonthAgo = oneMonthAgoDate.toISOString().split('T')[0];",
													"pm.collectionVariables.set(\"EndDay\", formattedYesterday);",
													"pm.collectionVariables.set(\"StartDay\", formattedOneMonthAgo);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"solo\",\r\n    \"view\": \"number\",\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domainId\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/price-leaders",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"price-leaders"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2930 Check Stock history on domain page ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check absence own domain in Stock history widget\", function () {\r",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));\r",
													"    var containsZeroOrOwnDomainID = false;\r",
													"    _.each(jsonData.domains, function (domain) {\r",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {\r",
													"            containsZeroOrOwnDomainID = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var currentDate = new Date();",
													"var yesterdayDate = new Date(currentDate);",
													"yesterdayDate.setDate(currentDate.getDate() - 1);",
													"var oneMonthAgoDate = new Date(currentDate);",
													"oneMonthAgoDate.setMonth(currentDate.getMonth() - 1);",
													"var formattedYesterday = yesterdayDate.toISOString().split('T')[0];",
													"var formattedOneMonthAgo = oneMonthAgoDate.toISOString().split('T')[0];",
													"pm.collectionVariables.set(\"EndDay\", formattedYesterday);",
													"pm.collectionVariables.set(\"StartDay\", formattedOneMonthAgo);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domain_id\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/stock-history",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"stock-history"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\":  \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2918](https://app.qase.io/case/PRSP-2918) B: Domain Summary -> Include own data -> ON\n\n[PRSP-2925 ](https://app.qase.io/case/PRSP-2925) B: Individual domain -> Include own data -> ON\n\n[PRSP-2927 ](https://app.qase.io/case/PRSP-2927) B: Individual domain -> Index history widget -> Include own data -> ON\n\n[PRSP-1770](https://app.qase.io/case/PRSP-1770) B: Individual domain -> Price leaders history widget -> Include own data -> ON\n\n[PRSP-2930 ](https://app.qase.io/case/PRSP-2930) B: Individual domain -> Stock history widget -> Include own data -> ON\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						},
						{
							"name": "Export Include own data ON",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"var siteUrl = jsonData.user.current_account.feed.options.siteUrl;\r",
													"var matches = siteUrl.match(/^https?\\:\\/\\/(?:www\\.)?([^\\/?#]+)(?:[\\/?#]|$)/i);\r",
													"var ownDomainName = matches && matches[1];\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.collectionVariables.set(\"OwnDomainName\", ownDomainName);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});\r",
													"pm.test(\"Own Domain Name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainName\")).to.equal(ownDomainName);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2918 Turn on Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2918 Turn on Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data included'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data included');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Include own data is ON\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Turn on is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Competitor domain exists on widget\", function () {\r",
													"    pm.expect(jsonData.facets.domains[0]).to.exist;\r",
													"});\r",
													"var compDomainID = jsonData.facets.domains[0].id;\r",
													"pm.collectionVariables.set(\"CompDomainID\", compDomainID);\r",
													"pm.test(\"CompDomainID is set\", function () {\r",
													"    pm.expect(pm.collectionVariables.has(\"CompDomainID\")).to.be.true;\r",
													"    pm.expect(pm.collectionVariables.get(\"CompDomainID\")).to.equal(compDomainID);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-277 Export CSV Main page own data ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var csvEndpoint = jsonData.file;",
													"pm.collectionVariables.set(\"CSVEndpoint\", csvEndpoint);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"csv\",\n    \"order_dir\": \"desc\",\n    \"order_by\": \"products\",\n    \"page\": \"domainSummaryPage\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"export"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check export CSV Main page  file ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedCSVHeader = \"Domain,Products,Price leader solo,Price leader solo (%),Price leader multi,Price leader multi (%),Index,In stock,Out of stock,Green,Red,Yellow,Orange,Max pos. diff,Max neg. diff,Price changes,Average difference,Google rating,Number of ratings\";",
													"var responseBody = pm.response.text();",
													"var csvData = responseBody.split(\"\\n\");",
													"pm.test(\"CSV Colums test\", function () {",
													"    pm.expect(csvData[0].trim()).to.equal(expectedCSVHeader.trim());",
													"});",
													"var ownDomainName = pm.collectionVariables.get(\"OwnDomainName\");",
													"pm.test(\"Check if OwnDomainName is in CSV\", function () {",
													"    pm.expect(responseBody).to.include(ownDomainName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{CSVEndpoint}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"download",
												"{{CSVEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1948 Export CSV Domain page own data ON",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currDate = new Date().toISOString();",
													"const currentDate = new Date();",
													"const thirtyDaysAgo = new Date(currentDate);",
													"thirtyDaysAgo.setDate(currentDate.getDate() - 30);",
													"const year = thirtyDaysAgo.getFullYear();",
													"const month = (thirtyDaysAgo.getMonth() + 1).toString().padStart(2, '0');",
													"const day = thirtyDaysAgo.getDate().toString().padStart(2, '0');",
													"const startDay = `${year}-${month}-${day}`;",
													"const yesterday = new Date();",
													"yesterday.setDate(yesterday.getDate() - 1);",
													"const endDay = yesterday.toISOString().slice(0, 10);",
													"pm.collectionVariables.set(\"historyDate\", currDate);",
													"pm.collectionVariables.set('start_day', startDay);",
													"pm.collectionVariables.set('end_day', endDay);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var csvEndpoint = jsonData.file;",
													"pm.collectionVariables.set(\"CSVEndpoint\", csvEndpoint);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"csv\",\n    \"domainIds\": [\n        {{CompDomainID}}\n    ],\n    \"widgetId\": {{MainWidgetID}},\n    \"start_day\": \"{{start_day}}\",\n    \"end_day\": \"{{end_day}}\",\n    \"historyDate\": \"{{historyDate}}\",\n    \"page\": \"domainSummaryInfoPage\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"export"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check export CSV domain page file ON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedCSVHeader = \"Domain,Products,Price leader solo,Price leader solo (%),Price leader multi,Price leader multi (%),Index,In stock,Out of stock,Green,Red,Yellow,Orange,Max pos. diff,Max neg. diff,Price changes,Average difference,Google rating,Number of ratings\";",
													"var responseBody = pm.response.text();",
													"var csvData = responseBody.split(\"\\n\");",
													"pm.test(\"CSV Colums test\", function () {",
													"    pm.expect(csvData[0].trim()).to.equal(expectedCSVHeader.trim());",
													"});",
													"var ownDomainName = pm.collectionVariables.get(\"OwnDomainName\");",
													"pm.test(\"Check if OwnDomainName is in CSV\", function () {",
													"    pm.expect(responseBody).to.include(ownDomainName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{CSVEndpoint}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"download",
												"{{CSVEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\":  \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2918 ](https://app.qase.io/case/PRSP-2918) B: Domain Summary -> Include own data -> ON\n\n[PRSP-277 ](https://app.qase.io/case/PRSP-277) B: Domain Summary -> Export \"CSV\" and check result on file (Own data ON)\n\n[PRSP-1948 ](https://app.qase.io/case/PRSP-1948) B: Individual domain -> Export domain summary -> CSV (include own data ON)\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						}
					]
				},
				{
					"name": "Include own data OFF",
					"item": [
						{
							"name": "Main page Include own data OFF",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2919 Turn off Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2919 Turn off Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data excluded.'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data excluded.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (!showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Include own data is OFF\");",
													"        postman.setNextRequest(\"PRSP-649 - Check main widget Off\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Turn off is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2920 - Check main widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is not on the widget\", function () {",
													"    _.each(jsonData.data, function (data) {",
													"        pm.expect(data.id).not.equal(parseInt(ownDomainID));",
													"    });",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains);",
													"});",
													"pm.test(\"account_domain_id should be equal to 0\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});",
													"pm.test(\"account_domain_id should be equal to ownDomainID\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});",
													"pm.test(\"Check data for luxlight.dk with price_leader_solo equal to 1\", function () {",
													"    var luxlightData = _.find(jsonData.data, { 'domain': 'luxlight.dk' });",
													"    pm.expect(luxlightData).to.not.be.undefined;",
													"    pm.expect(luxlightData.price_leader_solo).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2861 Check Price Leaders widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Price leaders does not contain own domain data\", function () {",
													"    var accountDomainId = jsonData.account_domain_id;",
													"    var domainNotFound = true;",
													"    _.each(jsonData.domains, function (domain) {",
													"        if (domain === accountDomainId) {",
													"            domainNotFound = false;",
													"        }",
													"    });",
													"    pm.expect(domainNotFound).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/get-price-leaders/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"get-price-leaders",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2922 Check Index History widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Check datasets length\", function () {",
													"    pm.expect(Object.keys(jsonData.datasets).length).to.equal(jsonData.domains.length);",
													"});",
													"pm.test(\"Check absence of 0 or ownDomainID in domains array\", function () {",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));",
													"    var containsZeroOrOwnDomainID = false;",
													"    _.each(jsonData.domains, function (domain) {",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {",
													"            containsZeroOrOwnDomainID = true;",
													"        }",
													"    });",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/get-domain-index/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"get-domain-index",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2924 - Check Custom widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is not on the widget\", function () {",
													"    _.each(jsonData.data, function (data) {",
													"        pm.expect(data.id).not.equal(parseInt(ownDomainID));",
													"    });",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains);",
													"});",
													"pm.test(\"account_domain_id should be equal to 0\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2923 - Check Top 5 Products widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is not on the widget\", function () {",
													"    _.each(jsonData.data, function (data) {",
													"        pm.expect(data.id).not.equal(parseInt(ownDomainID));",
													"    });",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains);",
													"});",
													"pm.test(\"account_domain_id should be equal to 0\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2923 - Check Top 5 LeadMulti widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is not on the widget\", function () {",
													"    _.each(jsonData.data, function (data) {",
													"        pm.expect(data.id).not.equal(parseInt(ownDomainID));",
													"    });",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains);",
													"});",
													"pm.test(\"account_domain_id should be equal to 0\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2923 - Check Top 5 RedProd widget Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var ownDomainID = pm.collectionVariables.get(\"OwnDomainID\");",
													"pm.test(\"Own domain with id \" + ownDomainID + \" is not on the widget\", function () {",
													"    _.each(jsonData.data, function (data) {",
													"        pm.expect(data.id).not.equal(parseInt(ownDomainID));",
													"    });",
													"});",
													"var total = jsonData.total;",
													"var countDomains = jsonData.data ? jsonData.data.length : 0;",
													"pm.test(\"Count of domains on widget is correct\", function () {",
													"    pm.expect(total).to.equal(countDomains);",
													"});",
													"pm.test(\"account_domain_id should be equal to 0\", function () {",
													"    pm.expect(jsonData.account_domain_id).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2919 ](https://app.qase.io/case/PRSP-2919) B: Domain Summary -> Include own data -> OFF\n\n[PRSP-2920 ](https://app.qase.io/case/PRSP-2920) B: Domain Summary -> Main widget -> \"Include own data\" slider -> OFF\n\n[PRSP-2861 ](https://app.qase.io/case/PRSP-2861) B: Domain summary ->\"Price leaders\" widget ->\"Include own data\" slider -> OFF\n\n[PRSP-2922 ](https://app.qase.io/case/PRSP-2922) B: Domain summary -> Index history widget -> Include on data -> OFF\n\n[PRSP-2923 ](https://app.qase.io/case/PRSP-2923) B: Domain Summary->Top 5 widget->\"Include own data\" slider -> OFF\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						},
						{
							"name": "Domain page Include own data OFF",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2919 Turn off Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2919 Turn off Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data excluded.'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data excluded.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (!showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Include own data is OFF\");",
													"        postman.setNextRequest(\"Get domain id\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Turn off is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Competitor domain exists on widget\", function () {\r",
													"    pm.expect(jsonData.facets.domains[0]).to.exist;\r",
													"});\r",
													"var compDomainID = jsonData.facets.domains[0].id;\r",
													"pm.collectionVariables.set(\"CompDomainID\", compDomainID);\r",
													"pm.test(\"CompDomainID is set\", function () {\r",
													"    pm.expect(pm.collectionVariables.has(\"CompDomainID\")).to.be.true;\r",
													"    pm.expect(pm.collectionVariables.get(\"CompDomainID\")).to.equal(compDomainID);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2926 Check domain page Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check own domain is off\", function () {\r",
													"    pm.expect(jsonData.accountDomainId).to.equal(0);\r",
													"});\r",
													"pm.test(\"Check showAccountData is false\", function () {\r",
													"    pm.expect(jsonData.showAccountData).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/widget/{{CompDomainID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"widget",
												"{{CompDomainID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2928 Check Index on domain page Off",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var currentDate = new Date();\r",
													"var yesterdayDate = new Date(currentDate);\r",
													"yesterdayDate.setDate(currentDate.getDate() - 1);\r",
													"var oneMonthAgoDate = new Date(currentDate);\r",
													"oneMonthAgoDate.setMonth(currentDate.getMonth() - 1);\r",
													"var formattedYesterday = yesterdayDate.toISOString().split('T')[0];\r",
													"var formattedOneMonthAgo = oneMonthAgoDate.toISOString().split('T')[0];\r",
													"pm.collectionVariables.set(\"EndDay\", formattedYesterday);\r",
													"pm.collectionVariables.set(\"StartDay\", formattedOneMonthAgo);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check absence own domain in Index history\", function () {\r",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));\r",
													"    var containsZeroOrOwnDomainID = false;\r",
													"    _.each(jsonData.domains, function (domain) {\r",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {\r",
													"            containsZeroOrOwnDomainID = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domain_id\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/index-history",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"index-history"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2929 - Check Price leaders on domain page Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check absence own domain in Price leaders\", function () {\r",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));\r",
													"    var containsZeroOrOwnDomainID = false;\r",
													"    _.each(jsonData.domains, function (domain) {\r",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {\r",
													"            containsZeroOrOwnDomainID = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var currentDate = new Date();",
													"var yesterdayDate = new Date(currentDate);",
													"yesterdayDate.setDate(currentDate.getDate() - 1);",
													"var oneMonthAgoDate = new Date(currentDate);",
													"oneMonthAgoDate.setMonth(currentDate.getMonth() - 1);",
													"var formattedYesterday = yesterdayDate.toISOString().split('T')[0];",
													"var formattedOneMonthAgo = oneMonthAgoDate.toISOString().split('T')[0];",
													"pm.collectionVariables.set(\"EndDay\", formattedYesterday);",
													"pm.collectionVariables.set(\"StartDay\", formattedOneMonthAgo);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"type\": \"solo\",\r\n    \"view\": \"number\",\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domainId\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/price-leaders",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"price-leaders"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2931 Check Stock history on domain page Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Check absence own domain in domains array\", function () {\r",
													"    var ownDomainID = parseInt(pm.collectionVariables.get(\"OwnDomainID\"));\r",
													"    var containsZeroOrOwnDomainID = false;\r",
													"    _.each(jsonData.domains, function (domain) {\r",
													"        if (domain === 0 || parseInt(domain) === ownDomainID) {\r",
													"            containsZeroOrOwnDomainID = true;\r",
													"        }\r",
													"    });\r",
													"    pm.expect(containsZeroOrOwnDomainID).to.be.false;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"end_day\": \"{{EndDay}}\",\r\n    \"domain_id\": {{CompDomainID}},\r\n    \"start_day\": \"{{StartDay}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/stock-history",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"stock-history"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\":  \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2919 ](https://app.qase.io/case/PRSP-2919) B: Domain Summary -> Include own data -> OFF\n\n[PRSP-2926 ](https://app.qase.io/case/PRSP-2926) B: Individual domain -> Include own data -> OFF\n\n[PRSP-2928 ](https://app.qase.io/case/PRSP-2928) B: Individual domain -> Index history widget -> Include own data -> OFF\n\n[PRSP-2929 ](https://app.qase.io/case/PRSP-2929) B: Individual domain -> Price leaders history widget -> Include own data -> OFF\n\n[PRSP-2931 ](https://app.qase.io/case/PRSP-2931) B: Individual domain -> Stock history widget -> Include own data -> OFF\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						},
						{
							"name": "Export Include own data OFF",
							"item": [
								{
									"name": "Log in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/login",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Switch to account, get accName, domainID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Switch to account successful\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"var accountName = jsonData.user.current_account.name;\r",
													"var domainId = jsonData.user.current_account.feed.domain_id;\r",
													"var siteUrl = jsonData.user.current_account.feed.options.siteUrl;\r",
													"var matches = siteUrl.match(/^https?\\:\\/\\/(?:www\\.)?([^\\/?#]+)(?:[\\/?#]|$)/i);\r",
													"var ownDomainName = matches && matches[1];\r",
													"pm.collectionVariables.set(\"AccountName\", accountName);\r",
													"pm.collectionVariables.set(\"OwnDomainID\", domainId);\r",
													"pm.collectionVariables.set(\"OwnDomainName\", ownDomainName);\r",
													"pm.test(\"Account name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"AccountName\")).to.equal(accountName);\r",
													"});\r",
													"pm.test(\"Own Domain ID is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainID\")).to.equal(domainId);\r",
													"});\r",
													"pm.test(\"Own Domain Name is assigned correctly\", function () {\r",
													"    pm.expect(pm.collectionVariables.get(\"OwnDomainName\")).to.equal(ownDomainName);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"switch-account",
												"{{AccountID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1688 Turn on Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {",
													"    pm.test(\"Domain Summary page turn on successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn on failed\", function () {",
													"        console.log(\"Domain Summary page turn on failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1743 Generate DS widgets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Default widgets created successfully'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Default widgets created successfully');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"generate-default-domain-widgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS widgets ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var widgets = [",
													"    { type: \"top5\", fields: [\"products\"], position: 0 },",
													"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },",
													"    { type: \"top5\", fields: [\"red_products\"], position: 2 },",
													"    { type: \"domain\", position: 3 },",
													"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },",
													"    { type: \"price-leaders\", position: 5 },",
													"    { type: \"domain-index\", position: 6 }",
													"];",
													"for (var i = 0; i < widgets.length; i++) {",
													"    var widget = widgets[i];",
													"    pm.test(widget.type + \" widget has correct properties\", function () {",
													"        var currentWidget = jsonData.find(item => item.widget_type === widget.type && item.position === widget.position);",
													"        pm.expect(currentWidget).not.to.be.undefined;",
													"        pm.expect(currentWidget.page).to.eql('domain');",
													"        pm.expect(currentWidget.widget_type).to.eql(widget.type);",
													"        pm.expect(currentWidget.position).to.eql(widget.position);",
													"        if (widget.fields) {",
													"            pm.expect(currentWidget.params.fields[i]).to.eql(widget.fields[i]);",
													"        }",
													"        // Since currentWidget.params.showInDashboard can be undefined, we'll check its value only if it's defined.",
													"        if (currentWidget.params.showInDashboard === undefined) {",
													"            pm.expect(currentWidget.params).to.be.an('array').that.is.empty;",
													"        } else if (currentWidget.params.showInDashboard != undefined) {",
													"            pm.expect(currentWidget.params.showInDashboard).to.eql(false);",
													"        }",
													"    });",
													"}",
													"pm.test('Get MainWidgetID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('MainWidgetID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get priceLeaderID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'price-leaders');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('priceLeaderID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get indexHistoryID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'domain-index');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('indexHistoryID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get customizableID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'customizable');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('customizableID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test(\"Get top5ProductsID\", function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === \"top5\" && item.params.fields && item.params.fields[0] === \"products\");",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set(\"top5ProductsID\", dsWidget.id);",
													"",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5PriceLeaderMultiID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'price_leader_multi');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5PriceLeaderMultiID', dsWidget.id);",
													"        }",
													"    }",
													"});",
													"pm.test('Get top5RedProductsID', function () {",
													"    if (pm.response.code === 200) {",
													"        var dsWidget = jsonData.find(item => item.widget_type === 'top5' && item.params.fields && item.params.fields[0] === 'red_products');",
													"        if (dsWidget) {",
													"            pm.collectionVariables.set('top5RedProductsID', dsWidget.id);",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets"
											],
											"query": [
												{
													"key": "page",
													"value": "domain"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var cronID = null;",
													"for (var i = 0; i < jsonData.length; i++) {",
													"    if (jsonData[i].type === \"domain-history\") {",
													"        cronID = jsonData[i].id;",
													"        break;",
													"    }",
													"}",
													"if (cronID !== null) {",
													"    pm.collectionVariables.set(\"cronDomainHistoryID\", cronID);",
													"    postman.setNextRequest(\"PRSP-2455 Change next_run to now + 2 min\");",
													"} else {",
													"    postman.setNextRequest(\"PRSP-1831 Create DS cron\");",
													"}",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1831 Create DS cron",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Selected cron jobs successfully created'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Selected cron jobs successfully created');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cron_identifiers\": [\n        \"domain-history\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/create?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"create"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Change next_run to now + 2 min",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currentDate = new Date();",
													"currentDate.setUTCHours(currentDate.getUTCHours() + 1);",
													"currentDate.setMinutes(currentDate.getUTCMinutes() + 1);",
													"let hours = currentDate.getUTCHours();",
													"let minutes = currentDate.getUTCMinutes();",
													"if (hours >= 24) {",
													"    hours -= 24;",
													"}",
													"if (hours < 10) {",
													"    hours = `0${hours}`;",
													"}",
													"if (minutes < 10) {",
													"    minutes = `0${minutes}`;",
													"}",
													"const danskTime = `${minutes} ${hours} * * *`;",
													"pm.collectionVariables.set(\"now2mRule\", danskTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});",
													"setTimeout(function () {",
													"    postman.setNextRequest('PRSP-2919 Turn off Include own data');",
													"}, 180000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\": \"{{now2mRule}}\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2919 Turn off Include own data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Own data excluded.'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Own data excluded.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"show_account_domain_data\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/toggle-account-data",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"toggle-account-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check include own data Off",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = jsonData.user.id;",
													"var showAccountDomainData = jsonData.user.current_account.settings.show_account_domain_data;",
													"if (!showAccountDomainData.includes(userId)) {",
													"    pm.test(\"Include own data is OFF\", function () {",
													"        console.log(\"Include own data is OFF\");",
													"        postman.setNextRequest(\"Get domain id\");",
													"    });",
													"} else {",
													"    pm.test(\"Include own data is ON\", function () {",
													"        console.log(\"Turn off is failed\");",
													"        postman.setNextRequest(null);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Competitor domain exists on widget\", function () {\r",
													"    pm.expect(jsonData.facets.domains[0]).to.exist;\r",
													"});\r",
													"var compDomainID = jsonData.facets.domains[0].id;\r",
													"pm.collectionVariables.set(\"CompDomainID\", compDomainID);\r",
													"pm.test(\"CompDomainID is set\", function () {\r",
													"    pm.expect(pm.collectionVariables.has(\"CompDomainID\")).to.be.true;\r",
													"    pm.expect(pm.collectionVariables.get(\"CompDomainID\")).to.equal(compDomainID);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2084 Export CSV Main page own data OFF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var csvEndpoint = jsonData.file;",
													"pm.collectionVariables.set(\"CSVEndpoint\", csvEndpoint);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"csv\",\n    \"order_dir\": \"desc\",\n    \"order_by\": \"products\",\n    \"page\": \"domainSummaryPage\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"export"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check export CSV Main page  file OFF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedCSVHeader = \"Domain,Products,Price leader solo,Price leader solo (%),Price leader multi,Price leader multi (%),Index,In stock,Out of stock,Green,Red,Yellow,Orange,Max pos. diff,Max neg. diff,Price changes,Average difference,Google rating,Number of ratings\";",
													"var responseBody = pm.response.text();",
													"var csvData = responseBody.split(\"\\n\");",
													"pm.test(\"CSV Colums test\", function () {",
													"    pm.expect(csvData[0].trim()).to.equal(expectedCSVHeader.trim());",
													"});",
													"var ownDomainName = pm.collectionVariables.get(\"OwnDomainName\");",
													"pm.test(\"Check if OwnDomainName is not in CSV\", function () {",
													"    pm.expect(responseBody).to.not.include(ownDomainName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{CSVEndpoint}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"download",
												"{{CSVEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1760 Export CSV Domain page own data OFF",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const currDate = new Date().toISOString();",
													"const currentDate = new Date();",
													"const thirtyDaysAgo = new Date(currentDate);",
													"thirtyDaysAgo.setDate(currentDate.getDate() - 30);",
													"const year = thirtyDaysAgo.getFullYear();",
													"const month = (thirtyDaysAgo.getMonth() + 1).toString().padStart(2, '0');",
													"const day = thirtyDaysAgo.getDate().toString().padStart(2, '0');",
													"const startDay = `${year}-${month}-${day}`;",
													"const yesterday = new Date();",
													"yesterday.setDate(yesterday.getDate() - 1);",
													"const endDay = yesterday.toISOString().slice(0, 10);",
													"pm.collectionVariables.set(\"historyDate\", currDate);",
													"pm.collectionVariables.set('start_day', startDay);",
													"pm.collectionVariables.set('end_day', endDay);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var csvEndpoint = jsonData.file;",
													"pm.collectionVariables.set(\"CSVEndpoint\", csvEndpoint);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"csv\",\n    \"domainIds\": [\n        {{CompDomainID}}\n    ],\n    \"widgetId\": {{MainWidgetID}},\n    \"start_day\": \"{{start_day}}\",\n    \"end_day\": \"{{end_day}}\",\n    \"historyDate\": \"{{historyDate}}\",\n    \"page\": \"domainSummaryInfoPage\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/export",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"export"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check export CSV domain page file OFF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedCSVHeader = \"Domain,Products,Price leader solo,Price leader solo (%),Price leader multi,Price leader multi (%),Index,In stock,Out of stock,Green,Red,Yellow,Orange,Max pos. diff,Max neg. diff,Price changes,Average difference,Google rating,Number of ratings\";",
													"var responseBody = pm.response.text();",
													"var csvData = responseBody.split(\"\\n\");",
													"pm.test(\"CSV Colums test\", function () {",
													"    pm.expect(csvData[0].trim()).to.equal(expectedCSVHeader.trim());",
													"});",
													"var ownDomainName = pm.collectionVariables.get(\"OwnDomainName\");",
													"pm.test(\"Check if OwnDomainName is not in CSV\", function () {",
													"    pm.expect(responseBody).to.not.include(ownDomainName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/get-domain-summary/{{MainWidgetID}}/download/{{CSVEndpoint}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"get-domain-summary",
												"{{MainWidgetID}}",
												"download",
												"{{CSVEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete domain widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{MainWidgetID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-626 Delete customizable widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{customizableID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-621 Delete indexHistory widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{indexHistoryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-625 Delete priceLeader widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{priceLeaderID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5RedProducts widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5RedProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5PriceLeaderMultiI widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5PriceLeaderMultiID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-627 Delete top5Products widget",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Response message is 'Widget was successfully deleted'\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Widget was successfully deleted');",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"widgets",
												"{{top5ProductsID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-1689 Turn off the Domain Summary page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {",
													"    pm.test(\"Domain Summary page turn off successful\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"} else {",
													"    pm.test(\"Domain Summary page turn off failed\", function () {",
													"        console.log(\"Domain Summary page turn off failed\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{AccountName}}\",\n    \"competitor_settings\": {\n        \"price\": \"gs-product-price\",\n        \"fillGsDashboard\": true,\n        \"fillAmazonDashboard\": false,\n        \"showPosition\": false,\n        \"deliveryPrice\": true\n    },\n    \"settings\": {\n        \"enable_domain_summary\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/accounts/{{AccountID}}/settings",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"accounts",
												"{{AccountID}}",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "PRSP-2455 Set DS cron 23:50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check response status\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check message in the response\", function () {",
													"    pm.response.to.have.jsonBody('message', 'Cron job successfully updated');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{cronDomainHistoryID}},\n    \"account_id\": {{AccountID}},\n    \"cron_rule\":  \"50 23 * * *\",\n    \"type\": \"domain-history\",\n    \"priority\": \"normal\",\n    \"is_active\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v2/cron/groups/group/update/{{cronDomainHistoryID}}?group=domain_summary",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"cron",
												"groups",
												"group",
												"update",
												"{{cronDomainHistoryID}}"
											],
											"query": [
												{
													"key": "group",
													"value": "domain_summary"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Log out",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v2/auth/logout",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v2",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "[PRSP-1688](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-1743](https://app.qase.io/case/PRSP-1743) B: Domain summary-> Generate default widgets (Admin/RA)\n\n[PRSP-1831](https://app.qase.io/case/PRSP-1831) B: Cron jobs -> Create a new cron (Admin/RA)\n\n[PRSP-2455](https://app.qase.io/case/PRSP-2455) B: Cron jobs -> Changing \"next_run\"\n\n[PRSP-2084 ](https://app.qase.io/case/PRSP-2084) B: Domain Summary -> Export \"CSV\" and check result on file (Own data off)\n\n[PRSP-2919 ](https://app.qase.io/case/PRSP-2919) B: Domain Summary -> Include own data -> OFF\n\n[PRSP-1760 ](https://app.qase.io/case/PRSP-1760) B: Individual domain -> Export domain summary -> CSV (include own data OFF)\n\n[PRSP-626](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-621](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-625](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-627](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-1689](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
						}
					]
				}
			]
		},
		{
			"name": "Top 5 widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3054 Add Top 5 widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Get top5ProductsID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.widget.id;\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"top5ID\", dsWidget);\r",
									"\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Widget was successfully created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"fields\": [\r\n            \"products\"\r\n        ],\r\n        \"showInDashboard\": false\r\n    },\r\n    \"widget_type\": \"top5\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/create-widget/top5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"create-widget",
								"top5"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3056 Edit Top 5 widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"Widget fields was successfully updated\", function () {\r",
									"    pm.expect(jsonData.widget.fields[0]).to.eql(\"in_stock\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"fields\": [\r\n            \"in_stock\"\r\n        ],\r\n        \"domains\": [],\r\n        \"showInDashboard\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-top5-widget/{{top5ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-top5-widget",
								"{{top5ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3055 Edit Top 5 widget (Show in Dashboard is ON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"'Show in Dashboard' is ON\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.params.showInDashboard).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"fields\": [\r\n            \"in_stock\"\r\n        ],\r\n        \"domains\": [],\r\n        \"showInDashboard\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-top5-widget/{{top5ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-top5-widget",
								"{{top5ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3055  Check widget in Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var top5ID = pm.collectionVariables.get(\"top5ID\");\r",
									"pm.test(\"Check top5\", function () {\r",
									"    var widget = jsonData.find(function (item) {\r",
									"        return item.id === top5ID;\r",
									"    });\r",
									"    pm.expect(widget).to.not.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete Top 5 widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3054](https://app.qase.io/case/PRSP-3054) B: Domain Summary->Top 5 widget->Adding \"Top 5\" widget\n\n[PRSP-3056](https://app.qase.io/case/PRSP-3056) B: Domain Summary->Top 5 widget->Editing \"Top 5\" widget\n\n[PRSP-3055](https://app.qase.io/case/PRSP-3055) B: Domain Summary -> Top 5 widget -> Show in dashboard\n\n[PRSP-627 ](https://app.qase.io/case/PRSP-627) B: Domain Summary-> Top 5 widget-> Delete \"Top 5\" widget"
		},
		{
			"name": "Сustomizable widget",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3058 Add Сustomizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Get customID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.widget.id;\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"customID\", dsWidget);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Widget was successfully created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"fields\": [\r\n            \"products\",\r\n            \"green_products\",\r\n            \"price_leader_solo\"\r\n        ],\r\n        \"domains\": [\r\n            {{threeDomainIds}}\r\n        ],\r\n        \"widget_name\": \"\",\r\n        \"column_size\": 4,\r\n        \"showInDashboard\": false\r\n    },\r\n    \"widget_type\": \"customizable\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/create-widget/customizable",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"create-widget",
								"customizable"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3060 Edit Сustomizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"Widget fields was successfully updated\", function () {\r",
									"    pm.expect(jsonData.widget.data[2].field).to.eql(\"in_stock\");\r",
									"    pm.expect(jsonData.data.params.domains).to.eql([86, 24]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"fields\": [\r\n            \"products\",\r\n            \"price_leader_multi\",\r\n            \"in_stock\"\r\n        ],\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"widget_name\": \"Customizable - up to 15 domains - up to 3 parameters\",\r\n        \"showInDashboard\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-customisable-widget/{{customID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-customisable-widget",
								"{{customID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3059 Edit Сustomizable widget (Show in Dashboard is ON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"'Show in Dashboard' is ON\", function () {\r",
									"    pm.expect(jsonData.data.params.showInDashboard).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"fields\": [\r\n            \"products\",\r\n            \"price_leader_multi\",\r\n            \"in_stock\"\r\n        ],\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"widget_name\": \"Customizable - up to 15 domains - up to 3 parameters\",\r\n        \"showInDashboard\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-customisable-widget/{{customID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-customisable-widget",
								"{{customID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3059 Check widget in Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var customID = pm.collectionVariables.get(\"customID\");\r",
									"pm.test(\"Check custom\", function () {\r",
									"    var widget = jsonData.find(function (item) {\r",
									"        return item.id === customID;\r",
									"    });\r",
									"    pm.expect(widget).to.not.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-626 Delete Сustomizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{customID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{customID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3058](https://app.qase.io/case/PRSP-3058) B: Domain Summary -> Custom widget -> Adding widget\n\n[PRSP-3059](https://app.qase.io/case/PRSP-3059) B: Domain Summary -> Custom widget -> Editing widget\n\n[PRSP-3060](https://app.qase.io/case/PRSP-3060) B: Domain Summary -> Custom widget -> Show in dashboard\n\n[PRSP-626 ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget"
		},
		{
			"name": "Index history widget (base)",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3063 Add Index history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Get indexHistoryID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.widget.id;\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"indexHistoryID\", dsWidget);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Widget was successfully created\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"domains\": [\r\n            {{threeDomainIds}}\r\n        ],\r\n        \"showInDashboard\": false\r\n    },\r\n    \"widget_type\": \"domain-index\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/create-widget/domain-index",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"create-widget",
								"domain-index"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3065 Edit Index history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"Widget fields was successfully updated\", function () {\r",
									"    pm.expect(jsonData.data.params.domains).to.eql([86, 24]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"showInDashboard\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-domain-index-widget/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-domain-index-widget",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3064 Edit Index history widget (Show in Dashboard is ON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"'Show in Dashboard' is ON\", function () {\r",
									"    pm.expect(jsonData.data.params.showInDashboard).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"showInDashboard\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-domain-index-widget/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-domain-index-widget",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3064 Check widget in Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var indexHistoryID = pm.collectionVariables.get(\"indexHistoryID\");\r",
									"pm.test(\"Check Index History\", function () {\r",
									"    var widget = jsonData.find(function (item) {\r",
									"        return item.id === indexHistoryID;\r",
									"    });\r",
									"    pm.expect(widget).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-621 Delete Index history widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3068](https://app.qase.io/case/PRSP-3068) B: Domain summary ->\"Index history\" widget ->Adding \"Index history\" widget\n\n[PRSP-3069 ](https://app.qase.io/case/PRSP-3069) B: Domain summary ->\"Index history\" widget ->Show in dashboard\n\n[PRSP-3070](https://app.qase.io/case/PRSP-3070) B: Domain summary ->\"Index history\" widget ->Editing \"Index history\" widget\n\n[PRSP-621 ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget"
		},
		{
			"name": "Price leader  widget (base)",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Switch to account successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{AccountID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{AccountID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3068 Add Price leader  widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Get priceLeaderID\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        var dsWidget = jsonData.widget.id;\r",
									"        if (dsWidget) {\r",
									"            pm.collectionVariables.set(\"priceLeaderID\", dsWidget);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"Widget was successfully created\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"params\": {\r\n        \"domains\": [\r\n            {{threeDomainIds}}\r\n        ],\r\n        \"showInDashboard\": false\r\n    },\r\n    \"widget_type\": \"domain-index\",\r\n    \"page\": \"domain\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/create-widget/price-leaders",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"create-widget",
								"price-leaders"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3070 Edit Price leader  widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"Widget fields was successfully updated\", function () {\r",
									"    pm.expect(jsonData.data.params.domains).to.eql([86, 24]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"showInDashboard\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-leader-widget/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-leader-widget",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3069 Edit Price leader  widget (Show in Dashboard is ON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Widget was successfully updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Widget was successfully updated\");\r",
									"});\r",
									"pm.test(\"'Show in Dashboard' is ON\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.params.showInDashboard).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"facets\": {\r\n        \"domains\": [\r\n            {{twoDomainIds}}\r\n        ],\r\n        \"showInDashboard\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/save-price-leader-widget/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"save-price-leader-widget",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3069 Check widget in Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var priceLeaderID = pm.collectionVariables.get(\"priceLeaderID\");\r",
									"pm.test(\"Check Price Leader\", function () {\r",
									"    var widget = jsonData.find(function (item) {\r",
									"        return item.id === priceLeaderID;\r",
									"    });\r",
									"    pm.expect(widget).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete Price leader widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-3063](https://app.qase.io/case/PRSP-3063) B: Domain summary ->\"Price leaders\" widget ->Adding \"Price leaders\" widget\n\n[PRSP-3064](https://app.qase.io/case/PRSP-3064) B: Domain summary ->\"Price leaders\" widget ->Editing \"Price leaders\" widget\n\n[PRSP-3067](https://app.qase.io/case/PRSP-3067) B: Domain summary ->\"Price leaders\" widget ->Show in dashboard\n\n[PRSP-625 ](https://app.qase.io/case/PRSP-625) B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget"
		},
		{
			"name": "Widgets drag n drop",
			"item": [
				{
					"name": "Log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EmailAdmin}}\",\n    \"password\": \"{{PasswordAdmin}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch to account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Switch to account successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var accountName = jsonData.user.current_account.name;\r",
									"pm.collectionVariables.set(\"Account2Name\", accountName);\r",
									"pm.test(\"Account name is assigned correctly\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"Account2Name\")).to.equal(accountName);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/switch-account/{{Account2ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"switch-account",
								"{{Account2ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1688 Turn on Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(true)) {\r",
									"    pm.test(\"Domain Summary page turn on successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn on failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Account2Name}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{Account2ID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{Account2ID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check DS is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DS is opened\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check NO widgets\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    if (jsonData.length > 0) {\r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-1743 Generate DS widgets again Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/generate-default-domain-widgets",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"generate-default-domain-widgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check default DS widgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var widgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 1 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 2 },\r",
									"    { type: \"domain\", position: 3 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 4 },\r",
									"    { type: \"price-leaders\", position: 5 },\r",
									"    { type: \"domain-index\", position: 6 }\r",
									"];\r",
									"pm.collectionVariables.unset(\"top5ProductsID\");\r",
									"pm.collectionVariables.unset(\"top5PriceLeaderMultiID\");\r",
									"pm.collectionVariables.unset(\"top5RedProductsID\");\r",
									"pm.collectionVariables.unset(\"MainWidgetID\");\r",
									"pm.collectionVariables.unset(\"priceLeaderID\");\r",
									"pm.collectionVariables.unset(\"indexHistoryID\");\r",
									"pm.collectionVariables.unset(\"customizableID\");\r",
									"pm.test(\"Widgets have correct properties\", function () {\r",
									"    for (var i = 0; i < widgets.length; i++) {\r",
									"        var widget = widgets[i];\r",
									"        var currentWidgets = jsonData.filter(item => item.widget_type === widget.type && (item.position === widget.position || (!item.position && widget.type === \"domain\")));\r",
									"        for (var j = 0; j < currentWidgets.length; j++) {\r",
									"            var currentWidget = currentWidgets[j];\r",
									"            pm.test(\"Widget \" + widget.type + \" has correct properties\", function () {\r",
									"                pm.expect(currentWidget, \"Widget \" + widget.type + \" not found\").not.to.be.undefined;\r",
									"                pm.expect(currentWidget.page, \"Widget \" + widget.type + \" has incorrect page\").to.eql('domain');\r",
									"                pm.expect(currentWidget.widget_type, \"Widget \" + widget.type + \" has incorrect widget_type\").to.eql(widget.type);\r",
									"                pm.expect(currentWidget.position, \"Widget \" + widget.type + \" has incorrect position\").to.eql(widget.position);\r",
									"                if (widget.fields && widget.fields.length > 0) {\r",
									"                    pm.expect(currentWidget.params.fields, \"Widget \" + widget.type + \" has incorrect fields\").to.be.an('array');\r",
									"                    pm.expect(currentWidget.params.fields[0], \"Widget \" + widget.type + \" has incorrect fields\").to.eql(widget.fields[0]);\r",
									"                }\r",
									"                if (currentWidget.params && currentWidget.params.showInDashboard !== undefined) {\r",
									"                    pm.expect(currentWidget.params.showInDashboard, \"Widget \" + widget.type + \" has incorrect showInDashboard\").to.eql(false);\r",
									"                }\r",
									"            });\r",
									"            if (widget.type === 'domain-index') {\r",
									"                pm.collectionVariables.set('indexHistoryID', currentWidget.id);\r",
									"            } else if (widget.type === 'price-leaders') {\r",
									"                pm.collectionVariables.set('priceLeaderID', currentWidget.id);\r",
									"            } else if (widget.type === 'domain' && widget.position === 3) {\r",
									"                pm.collectionVariables.set('MainWidgetID', currentWidget.id);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"});\r",
									"function setWidgetID(widgetType, fields, variableName) {\r",
									"    var widget = jsonData.find(item => item.widget_type === widgetType && item.params && item.params.fields && item.params.fields.length > 0 && item.params.fields[0] === fields[0]);\r",
									"    if (widget) {\r",
									"        pm.collectionVariables.set(variableName, widget.id);\r",
									"    }\r",
									"}\r",
									"setWidgetID('top5', ['products'], 'top5ProductsID');\r",
									"setWidgetID('top5', ['price_leader_multi'], 'top5PriceLeaderMultiID');\r",
									"setWidgetID('top5', ['red_products'], 'top5RedProductsID');\r",
									"setWidgetID('domain', [], 'MainWidgetID');\r",
									"setWidgetID('customizable', ['products', 'price_leader_multi', 'red_products'], 'customizableID');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-3142 DS Widgets drag n drop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(jsonData.message, function () {\r",
									"    pm.expect(jsonData.message).to.equal(\"Widget positions was successfully updated\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"page\": \"domain\",\r\n    \"positions\": [\r\n        {\r\n            \"id\": {{top5ProductsID}},\r\n            \"oldPos\": 0,\r\n            \"position\": 0\r\n        },\r\n        {\r\n            \"id\": {{MainWidgetID}},\r\n            \"oldPos\": 3,\r\n            \"position\": 1\r\n        },\r\n        {\r\n            \"id\": {{customizableID}},\r\n            \"oldPos\": 4,\r\n            \"position\": 2\r\n        },\r\n        {\r\n            \"id\": {{top5PriceLeaderMultiID}},\r\n            \"oldPos\": 1,\r\n            \"position\": 3\r\n        },\r\n        {\r\n            \"id\": {{top5RedProductsID}},\r\n            \"oldPos\": 2,\r\n            \"position\": 4\r\n        },\r\n        {\r\n            \"id\": {{indexHistoryID}},\r\n            \"oldPos\": 6,\r\n            \"position\": 5\r\n        },\r\n        {\r\n            \"id\": {{priceLeaderID}},\r\n            \"oldPos\": 5,\r\n            \"position\": 6\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/positions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check DS widgets position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedWidgets = [\r",
									"    { type: \"top5\", fields: [\"products\"], position: 0 },\r",
									"    { type: \"top5\", fields: [\"price_leader_multi\"], position: 3 },\r",
									"    { type: \"top5\", fields: [\"red_products\"], position: 4 },\r",
									"    { type: \"domain\", position: 1 },\r",
									"    { type: \"customizable\", fields: [\"products\", \"price_leader_multi\", \"red_products\"], position: 2 },\r",
									"    { type: \"price-leaders\", position: 6 },\r",
									"    { type: \"domain-index\", position: 5 }\r",
									"];\r",
									"pm.test(\"Widgets positions are correct\", function () {\r",
									"    for (var i = 0; i < expectedWidgets.length; i++) {\r",
									"        var expectedWidget = expectedWidgets[i];\r",
									"        var matchingWidgets = jsonData.filter(item => item.widget_type === expectedWidget.type && item.position === expectedWidget.position);\r",
									"        pm.test(\"Widget \" + expectedWidget.type + \" at position \" + expectedWidget.position + \" exists\", function () {\r",
									"            pm.expect(matchingWidgets.length > 0, \"Widget not found\").to.be.true;\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5Products widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5ProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5ProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5PriceLeaderMulti widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5PriceLeaderMultiID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5PriceLeaderMultiID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-627 Delete top5RedProducts widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{top5RedProductsID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{top5RedProductsID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-625 Delete priceLeader widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{priceLeaderID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{priceLeaderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-621 Delete indexHistory widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{indexHistoryID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{indexHistoryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PRSP-626 Delete customizable widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{customizableID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{customizableID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete domain widget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(jsonData.message, function () {",
									"    pm.expect(jsonData.message).to.equal(\"Widget was successfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets/{{MainWidgetID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets",
								"{{MainWidgetID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check DS is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"DS is opened\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check NO widgets\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    if (jsonData.length > 0) {\r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/widgets?page=domain",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"widgets"
							],
							"query": [
								{
									"key": "page",
									"value": "domain"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PRS-1689 Turn off the Domain Summary page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if (pm.expect(jsonData.user.current_account.settings.enable_domain_summary).to.eql(false)) {\r",
									"    pm.test(\"Domain Summary page turn off successful\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        console.log(\"Test passed\");\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Domain Summary page turn off failed\", function () {\r",
									"        console.log(\"Test failed\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Account2Name}}\",\r\n    \"competitor_settings\": {\r\n        \"price\": \"gs-product-price\",\r\n        \"fillGsDashboard\": true,\r\n        \"fillAmazonDashboard\": false,\r\n        \"showPosition\": false,\r\n        \"deliveryPrice\": true\r\n    },\r\n    \"settings\": {\r\n        \"enable_domain_summary\": false\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v2/accounts/{{Account2ID}}/settings",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"accounts",
								"{{Account2ID}}",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v2/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "[PRSP-1688 ](https://app.qase.io/case/PRSP-1688) B: Settings -> Domain Summary setting ->Turn on Domain Summary page\n\n[PRSP-3142 ](https://app.qase.io/case/PRSP-3142) B: Domain Summary -> Widgets Drag'n'drop\n\n[PRSP-627 - ](https://app.qase.io/case/PRSP-627) B: Domain Summary->Top 5 widget->Delete \"Top 5\" widget\n\n[PRSP-625 -](https://app.qase.io/case/PRSP-625)B: Domain summary ->\"Price leaders\" widget ->Delete \"Price leaders\" widget\n\n[PRSP-621 - ](https://app.qase.io/case/PRSP-621) B: Domain summary ->\"Index history\" widget ->Delete \"Index history\" widget\n\n[PRSP-626 - ](https://app.qase.io/case/PRSP-626) B: Domain Summary -> Custom widget -> Delete widget\n\n[PRSP-1689 ](https://app.qase.io/case/PRSP-1689) B: Settings -> Domain Summary setting ->Turn off Domain Summary page"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "EmailAdmin",
			"value": "",
			"type": "string"
		},
		{
			"key": "PasswordAdmin",
			"value": "123456789",
			"type": "string"
		},
		{
			"key": "AccountID",
			"value": "10984",
			"type": "string"
		},
		{
			"key": "MainWidgetID",
			"value": "",
			"type": "string"
		},
		{
			"key": "EmailUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "PasswordUser",
			"value": "123456",
			"type": "string"
		},
		{
			"key": "AdminUserID",
			"value": "",
			"type": "string"
		},
		{
			"key": "WidgetID",
			"value": "42988",
			"type": "string"
		},
		{
			"key": "AccountName",
			"value": "Postman_account",
			"type": "string"
		},
		{
			"key": "DsWidgetId",
			"value": "",
			"type": "string"
		},
		{
			"key": "oneDomainIds",
			"value": "86",
			"type": "string"
		},
		{
			"key": "twoDomainIds",
			"value": "86, 24",
			"type": "string"
		},
		{
			"key": "threeDomainIds",
			"value": "86, 24, 17152",
			"type": "string"
		},
		{
			"key": "domainName",
			"value": "lavprisel.dk",
			"type": "string"
		},
		{
			"key": "historyDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "start_day",
			"value": "",
			"type": "string"
		},
		{
			"key": "end_day",
			"value": "",
			"type": "string"
		},
		{
			"key": "start_date_pdf",
			"value": "",
			"type": "string"
		},
		{
			"key": "end_date_pdf",
			"value": "",
			"type": "string"
		},
		{
			"key": "start_day_pdf",
			"value": "",
			"type": "string"
		},
		{
			"key": "end_day_pdf",
			"value": "",
			"type": "string"
		},
		{
			"key": "Account2ID",
			"value": "11078",
			"type": "string"
		},
		{
			"key": "FeedID",
			"value": "",
			"type": "string"
		},
		{
			"key": "WebshopID",
			"value": "",
			"type": "string"
		},
		{
			"key": "DomainID",
			"value": "",
			"type": "string"
		},
		{
			"key": "BrandID",
			"value": "",
			"type": "string"
		},
		{
			"key": "ProductTypeID",
			"value": "",
			"type": "string"
		},
		{
			"key": "Temp1",
			"value": "",
			"type": "string"
		},
		{
			"key": "Temp2",
			"value": "",
			"type": "string"
		},
		{
			"key": "TagID",
			"value": "",
			"type": "string"
		},
		{
			"key": "DomainSummaryDomainIDS",
			"value": "",
			"type": "string"
		},
		{
			"key": "File",
			"value": "",
			"type": "string"
		},
		{
			"key": "top5ProductsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "top5PriceLeaderMultiID",
			"value": "",
			"type": "string"
		},
		{
			"key": "top5RedProductsID",
			"value": "",
			"type": "string"
		},
		{
			"key": "priceLeaderID",
			"value": "",
			"type": "string"
		},
		{
			"key": "indexHistoryID",
			"value": "",
			"type": "string"
		},
		{
			"key": "customizableID",
			"value": "",
			"type": "string"
		},
		{
			"key": "points_index_domain_86",
			"value": ""
		},
		{
			"key": "points_index_domain_24",
			"value": ""
		},
		{
			"key": "points_index_domain_17152",
			"value": ""
		},
		{
			"key": "domain_index_main_widget_domain_24",
			"value": ""
		},
		{
			"key": "domain_index_main_widget_domain_86",
			"value": ""
		},
		{
			"key": "domain_index_main_widget_domain_17152",
			"value": ""
		},
		{
			"key": "points_leaders_solo_value_domain_11",
			"value": ""
		},
		{
			"key": "points_leaders_solo_value_domain_86",
			"value": ""
		},
		{
			"key": "points_leaders_solo_value_domain_24",
			"value": ""
		},
		{
			"key": "points_leaders_solo_value_domain_17152",
			"value": ""
		},
		{
			"key": "points_leaders_solo_percentage_domain_11",
			"value": ""
		},
		{
			"key": "points_leaders_solo_percentage_domain_86",
			"value": ""
		},
		{
			"key": "points_leaders_solo_percentage_domain_24",
			"value": ""
		},
		{
			"key": "points_leaders_solo_percentage_domain_17152",
			"value": ""
		},
		{
			"key": "points_leaders_multi_value_domain_11",
			"value": ""
		},
		{
			"key": "points_leaders_multi_value_domain_86",
			"value": ""
		},
		{
			"key": "points_leaders_multi_value_domain_24",
			"value": ""
		},
		{
			"key": "points_leaders_multi_value_domain_17152",
			"value": ""
		},
		{
			"key": "points_leaders_multi_percentage_domain_11",
			"value": ""
		},
		{
			"key": "points_leaders_multi_percentage_domain_86",
			"value": ""
		},
		{
			"key": "points_leaders_multi_percentage_domain_24",
			"value": ""
		},
		{
			"key": "points_leaders_multi_percentage_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_solo_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_multi_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_solo_percent_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_percent_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_multi_percent_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_percent_domain_11",
			"value": ""
		},
		{
			"key": "price_leader_solo_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_multi_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_solo_percent_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_percent_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_multi_percent_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_percent_domain_24",
			"value": ""
		},
		{
			"key": "price_leader_solo_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_multi_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_solo_percent_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_percent_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_multi_percent_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_percent_domain_86",
			"value": ""
		},
		{
			"key": "price_leader_solo_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_multi_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_solo_percent_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_solo_competitor_percent_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_multi_percent_domain_17152",
			"value": ""
		},
		{
			"key": "price_leader_multi_competitor_percent_domain_17152",
			"value": ""
		},
		{
			"key": "cronDomainHistoryID",
			"value": ""
		},
		{
			"key": "Account3ID",
			"value": "11188",
			"type": "string"
		},
		{
			"key": "domainName_1",
			"value": "cookinglife.eu",
			"type": "string"
		},
		{
			"key": "domainName_2",
			"value": "imerco.dk",
			"type": "string"
		},
		{
			"key": "brandName_1",
			"value": "Eva Trio& Eva",
			"type": "string"
		},
		{
			"key": "brandName_2",
			"value": "Lyngby Glas",
			"type": "string"
		},
		{
			"key": "brandName_3",
			"value": "No Brand",
			"type": "string"
		},
		{
			"key": "productTypeName_1",
			"value": "Cocktailglas",
			"type": "string"
		},
		{
			"key": "productTypeName_2",
			"value": "Skåle",
			"type": "string"
		},
		{
			"key": "productTypeName_3",
			"value": "No Product Type",
			"type": "string"
		},
		{
			"key": "tagName_1",
			"value": "test1",
			"type": "string"
		},
		{
			"key": "tagName_2",
			"value": "test2",
			"type": "string"
		},
		{
			"key": "tagName_3",
			"value": "No Tag",
			"type": "string"
		},
		{
			"key": "importedTagName_1",
			"value": "blue",
			"type": "string"
		},
		{
			"key": "importedTagName_2",
			"value": "red",
			"type": "string"
		},
		{
			"key": "importedTagName_3",
			"value": "No Tag",
			"type": "string"
		},
		{
			"key": "customLabelName_1",
			"value": "24 cm",
			"type": "string"
		},
		{
			"key": "customLabelName_2",
			"value": "Denmark",
			"type": "string"
		},
		{
			"key": "customLabelName_3",
			"value": "No Label",
			"type": "string"
		},
		{
			"key": "dynamicTagName_3",
			"value": "No Dynamic Tags",
			"type": "string"
		},
		{
			"key": "Account3Name",
			"value": ""
		},
		{
			"key": "domainId_1",
			"value": ""
		},
		{
			"key": "domainId_2",
			"value": ""
		},
		{
			"key": "count_d1",
			"value": ""
		},
		{
			"key": "count_d2",
			"value": ""
		},
		{
			"key": "countDomainName_1",
			"value": ""
		},
		{
			"key": "countDomainName_2",
			"value": ""
		},
		{
			"key": "brandId_1",
			"value": ""
		},
		{
			"key": "brandId_2",
			"value": ""
		},
		{
			"key": "brandId_3",
			"value": ""
		},
		{
			"key": "count_b1",
			"value": ""
		},
		{
			"key": "count_b2",
			"value": ""
		},
		{
			"key": "count_b3",
			"value": ""
		},
		{
			"key": "countBrandName_1",
			"value": ""
		},
		{
			"key": "countBrandName_2",
			"value": ""
		},
		{
			"key": "countBrandName_3",
			"value": ""
		},
		{
			"key": "typeId_1",
			"value": ""
		},
		{
			"key": "typeId_2",
			"value": ""
		},
		{
			"key": "typeId_3",
			"value": ""
		},
		{
			"key": "count_t1",
			"value": ""
		},
		{
			"key": "count_t2",
			"value": ""
		},
		{
			"key": "count_t3",
			"value": ""
		},
		{
			"key": "countProductTypeName_1",
			"value": ""
		},
		{
			"key": "countProductTypeName_2",
			"value": ""
		},
		{
			"key": "countProductTypeName_3",
			"value": ""
		},
		{
			"key": "tagId_1",
			"value": ""
		},
		{
			"key": "tagId_2",
			"value": ""
		},
		{
			"key": "tagId_3",
			"value": ""
		},
		{
			"key": "count_tag1",
			"value": ""
		},
		{
			"key": "count_tag2",
			"value": ""
		},
		{
			"key": "count_tag3",
			"value": ""
		},
		{
			"key": "countTagName_1",
			"value": ""
		},
		{
			"key": "countTagName_2",
			"value": ""
		},
		{
			"key": "countTagName_3",
			"value": ""
		},
		{
			"key": "importedTagId_1",
			"value": ""
		},
		{
			"key": "importedTagId_2",
			"value": ""
		},
		{
			"key": "importedTagId_3",
			"value": ""
		},
		{
			"key": "count_it1",
			"value": ""
		},
		{
			"key": "count_it2",
			"value": ""
		},
		{
			"key": "count_it3",
			"value": ""
		},
		{
			"key": "countImportedTagName_1",
			"value": ""
		},
		{
			"key": "countImportedTagName_2",
			"value": ""
		},
		{
			"key": "countImportedTagName_3",
			"value": ""
		},
		{
			"key": "customLabelId_1",
			"value": ""
		},
		{
			"key": "customLabelId_2",
			"value": ""
		},
		{
			"key": "customLabelId_3",
			"value": ""
		},
		{
			"key": "count_c1",
			"value": ""
		},
		{
			"key": "count_c2",
			"value": ""
		},
		{
			"key": "count_c3",
			"value": ""
		},
		{
			"key": "countCustomLabelName_1",
			"value": ""
		},
		{
			"key": "countCustomLabelName_2",
			"value": ""
		},
		{
			"key": "countCustomLabelName_3",
			"value": ""
		},
		{
			"key": "dynamicTagName_1",
			"value": ""
		},
		{
			"key": "dynamicTagName_2",
			"value": ""
		},
		{
			"key": "DynamicTagId_1",
			"value": ""
		},
		{
			"key": "DynamicTagId_2",
			"value": ""
		},
		{
			"key": "DynamicTagId_3",
			"value": ""
		},
		{
			"key": "count_d3",
			"value": ""
		},
		{
			"key": "countDynamicTagName_1",
			"value": ""
		},
		{
			"key": "countDynamicTagName_2",
			"value": ""
		},
		{
			"key": "countDynamicTagName_3",
			"value": ""
		},
		{
			"key": "top5ID",
			"value": ""
		},
		{
			"key": "test",
			"value": ""
		},
		{
			"key": "customID",
			"value": ""
		},
		{
			"key": "Account2Name",
			"value": ""
		}
	]
}