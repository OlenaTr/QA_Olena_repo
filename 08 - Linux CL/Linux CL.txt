 1. `ls`
Description: Lists files and directories in the current directory.
Example:
sh
ls

Example with options:
sh
ls -l  # detailed list with permissions, owner, and size
ls -a  # shows all files, including hidden ones


 2. `cd`
Description: Changes the current directory.
Example:
sh
cd /home/user/documents

Example usage:
sh
cd ..  # move to the parent directory


 3. `pwd`
Description: Displays the full path of the current directory.
Example:
sh
pwd


 4. `mkdir`
Description: Creates a new directory.
Example:
sh
mkdir new_directory


 5. `rm`
Description: Removes files or directories.
Example:
sh
rm file.txt

Example for directory:
sh
rm -r directory_name  # recursive deletion of the directory and its contents


 6. `cp`
Description: Copies files or directories.
Example:
sh
cp source_file.txt destination_file.txt

Example for directory:
sh
cp -r source_directory/ destination_directory/  # recursive copy of a directory


 7. `mv`
Description: Moves or renames files and directories.
Example to move:
sh
mv file.txt /path/to/destination/

Example to rename:
sh
mv old_name.txt new_name.txt


 8. `touch`
Description: Creates an empty file or updates the access time of an existing file.
Example:
sh
touch newfile.txt


 9. `cat`
Description: Displays the contents of a file.
Example:
sh
cat file.txt


 10. `echo`
Description: Displays a line of text.
Example:
sh
echo "Hello, World!"

Example to write to a file:
sh
echo "Hello, World!" > file.txt  # overwrites the file
echo "Append this text" >> file.txt  # appends the line to the file


 11. `grep`
Description: Searches for patterns in files.
Example:
sh
grep "search_term" file.txt

Example with options:
sh
grep -r "search_term" /path/to/directory  # recursive search in a directory


 12. `find`
Description: Searches for files and directories based on criteria.
Example:
sh
find /path/to/search -name "filename"

Example with options:
sh
find /path/to/search -type f -name "*.txt"  # search for all text files


 13. `chmod`
Description: Changes file or directory permissions.
Example:
sh
chmod 755 script.sh  # execution rights for owner, group, and others


 14. `chown`
Description: Changes file or directory owner and group.
Example:
sh
chown user:group file.txt


 15. `ps`
Description: Displays a list of current processes.
Example:
sh
ps

Example with options:
sh
ps aux  # detailed list of all processes


 16. `kill`
Description: Sends a signal to a process to terminate it.
Example:
sh
kill 1234  # terminate process with PID 1234

Example with options:
sh
kill -9 1234  # sends SIGKILL signal (forceful termination)


 17. `top`
Description: Displays a dynamic list of processes and resource usage.
Example:
sh
top


 18. `df`
Description: Shows disk space usage.
Example:
sh
df -h  # human-readable format with units


 19. `du`
Description: Shows disk usage of files and directories.
Example:
sh
du -sh /path/to/directory  # size of the directory in human-readable format


 20. `wget`
Description: Downloads files from the internet.
Example:
sh
wget http://example.com/file.zip


 21. `curl`
Description: Sends requests to URLs and displays the response.
Example:
sh
curl http://example.com


 22. `tar`
Description: Archives and extracts files.
Example to create an archive:
sh
tar -cvf archive.tar file1 file2

Example to extract an archive:
sh
tar -xvf archive.tar


 23. `sudo`
Description: Executes a command with superuser privileges.
Example:
sh
sudo apt update


 24. `man`
Description: Displays the manual page for a command.
Example:
sh
man ls


 25. `nano` or `vim`
Description: Text editors for use in the terminal.
Example to start nano:
sh
nano file.txt

Example to start vim:
sh
vim file.txt
Certainly! Here's a brief explanation and examples for each of these commands:

 26. `ls -l`
Description: Lists files and directories in the current directory in long format.
Example:
sh
ls -l

This command shows detailed information including file permissions, number of links, owner, group, size, and timestamp.

 27. `top`
Description: Displays a dynamic, real-time view of system processes and resource usage.
Example:
sh
top

Use this command to monitor system performance and process activity. Press `q` to exit.

 28. `ps aux`
Description: Displays detailed information about all running processes.
Example:
sh
ps aux

This command shows all processes with a detailed list including user, PID, CPU and memory usage, start time, and command.

 29. `grep bin`
Description: Searches for the pattern "bin" in the input provided (files or output of other commands).
Example:
sh
grep bin file.txt

This command searches for the word "bin" in `file.txt`. You can also use it with other commands, e.g.:
sh
ps aux | grep bin  # Filters processes that contain "bin" in their output


 30. `free`
Description: Displays the amount of free and used memory in the system.
Example:
sh
free -h

Using the `-h` option shows the memory usage in a human-readable format (e.g., KB, MB, GB).

 31. `clear`
Description: Clears the terminal screen.
Example:
sh
clear

This command helps to clean up the terminal screen for better readability.

 32. `cp`
Description: Copies files or directories.
Example:
sh
cp source_file.txt destination_file.txt

To copy a directory and its contents, use:
sh
cp -r source_directory/ destination_directory/


 33. `wget`
Description: Downloads files from the internet.
Example:
sh
wget http://example.com/file.zip

This command downloads `file.zip` from the specified URL.

 34. `less`
Description: Displays the contents of a file one page at a time.
Example:
sh
less file.txt

Use this command to view large files. Navigate with arrow keys, and press `q` to quit.

 35. `tail -f`
Description: Outputs the last part of a file and follows it for additional data.
Example:
sh
tail -f logfile.log

This command is useful for monitoring log files in real-time.

 36. `ps`
Description: Displays information about active processes.
Example:
sh
ps

This command shows the current shell's processes.

 37. `top`
Description: (Duplicate in the list, see above for description.)
Example:
sh
top


 Additional Command: `man`
Description: Displays the manual page for a command, which can help resolve errors or understand command usage.
Example:
sh
man cp

Use this to get detailed information and options for the `cp` command, or any other command.
